[Info]
Type:AdvDupe File
Creator:"Cipher Ultra"
Date:11/05/10
Description:"none"
Entities:5
Constraints:8
[More Information]
FileVersion:0.84
AdvDupeVersion:1.85
AdvDupeToolVersion:1.9
AdvDupeSharedVersion:1.72
SerialiserVersion:1.4
WireVersion:2207 (exported)
Time:09:50 AM
Head:76
HoldAngle:0,-95.4053,0
HoldPos:9.5083,2.31583,-1.46875
StartPos:1530.84,-235.646,-0.96875
[Save]
Entities:2AD721C8{N:0=T:2AD72228;}29FA5068{Y:4=T:2AD721C8;Y:1=A:2.50448e-006,-5.46415e-005,7.4292e-006;Y:6=Y:55;Y:59=T:28725060;Y:61=T:29ECAA60;Y:62=S:"Car";Y:32=N:76;Y:2=V:21.2261,2.43106,2.96973;Y:21=Y:63;Y:65=Y:64;Y:29=T:29FA50F0;Y:118=T:2ACB0628;Y:30=N:0;}2A22B9A0{;}29FA5150{Y:26=S:"";}29354198{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}29E5FA00{Y:27=T:2A22AD60;Y:28=T:2A22AD08;}27F8C7E8{Y:1=A:1.49857e-020,-180,360;Y:2=V:9.5083,2.31583,1.46875;Y:3=B:t;}29354228{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}1F52B008{;}2918DC90{;}2918DC30{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}2A22AD60{Y:26=Y:25;}28724FD0{N:255;N:255;N:255;}29354288{;}29F92FD8{Y:1=A:5.8157e-006,90,360;Y:2=V:-8.4917,-11.4234,3.31152;Y:3=B:t;}28724FA0{N:0;N:0;N:0;}2918DB18{Y:39=T:2918DB48;S:"Src"=N:73;Y:41=Y:40;Y:42=V:1.53,-0.6,0.73;Y:43=T:2918DB78;Y:45=Y:44;Y:46=V:-1.75,-1.14,2.28;Y:47=N:0;}2ACB0688{N:0;N:0;N:0;}285CDF18{Y:21=Y:53;Y:1=A:1.49857e-020,-180,0;Y:2=V:9.5083,2.31583,1.46875;Y:30=N:0;Y:4=T:27F8C7B8;Y:6=Y:54;Y:29=T:285CDFC8;}29DD94F8{Y:57;Y:58;Y:57;}2A22B940{S:"A"=T:2A22B970;S:"Alt"=T:29354258;S:"S"=T:1F52AFD8;Y:49=T:2A22BA00;Y:60=T:1F52B0F8;S:"D"=T:29354138;S:"W"=T:293541C8;S:"R"=T:1F52B068;}1F52B0C8{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}1F52AFD8{Y:39=T:1F52B008;S:"Src"=N:79;Y:41=S:"S";Y:42=V:-0.31,-1.83,2.36;Y:43=T:1F52B038;Y:45=Y:44;Y:46=V:1.63,0.65,0.73;Y:47=N:0;}1FFF91D0{Y:35=T:28F4CB28;Y:27=T:28F4CAA8;}28F4CB28{S:"pod"=N:80;Y:34=T:28F4CB80;}2A22AD08{;}27F8C7B8{N:0=T:27F8C7E8;}2918DB78{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}1F52AFA8{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}2A22ADB8{N:0=T:2A22AE18;}29FA50F0{Y:35=T:2A22B910;Y:27=T:29FA5150;}28F4CB80{;}285CDFC8{Y:27=T:27D51948;}29E5F978{Y:4=T:2A22ADB8;Y:6=Y:5;Y:22=T:29DAF188;Y:24=Y:23;Y:2=V:-26.0532,0.68985,3.31543;Y:21=Y:20;Y:29=T:29E5FA00;Y:1=A:-4.37063e-008,-91,-4.87595e-007;Y:30=N:0;}2A22B910{Y:34=T:2A22B940;}29591E30{Y:35=T:29591F10;Y:27=T:29591E90;}2ACB0718{N:255;N:250;N:230;}29DAF188{Y:8=Y:7;Y:9=T:29DAF1E8;Y:11=Y:10;Y:15=T:29DAF1B8;Y:6=Y:5;Y:17=Y:16;Y:19=Y:18;Y:21=Y:20;}2A22BA30{;}29591F10{S:"pod"=N:80;Y:34=T:29591F68;}29F92F78{N:0=T:29F92FD8;}H292DBDB0{N:80=T:29E5F978;N:79=T:1FFF9148;N:74=T:29C1EF40;N:76=T:285CDF18;N:73=T:29FA5068;}28725060{T:28725090;T:29DD94F8;}1F52B068{Y:39=T:1F52B098;S:"Src"=N:79;Y:41=S:"R";Y:42=V:1.36,-1.89,2.2;Y:43=T:1F52B0C8;Y:45=Y:44;Y:46=V:0.67,-1.98,0.73;Y:47=N:0;}2918DB48{;}28725030{N:0.31;N:0.31;N:0.1;}2AD72228{Y:1=A:2.50448e-006,-4.09811e-005,5.8157e-006;Y:2=V:21.2261,2.43106,2.96973;Y:3=B:t;}29591F68{Y:48=T:2918DB18;Y:50=T:2918DBA8;Y:52=T:2918DC60;}29ECAA60{T:29ECAA90;T:29ECAAC0;}2A22B9D0{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}1F52B098{;}293541F8{;}29F92F48{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}1F52B038{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}1F52B0F8{Y:39=T:1F52B128;S:"Src"=N:79;Y:41=Y:66;Y:42=V:-0.4,-2.54,2.1;Y:43=T:29354108;Y:45=Y:44;Y:46=V:0.64,0.86,0.73;Y:47=N:0;}28725000{N:10;N:10;N:10;}2ACB06E8{N:100;N:0;N:0;}2ACB06B8{N:0;N:0;N:0;}2ACB0658{N:0;N:0;N:0;}29354108{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}28725090{Y:40;Y:56;Y:51;}293541C8{Y:39=T:293541F8;S:"Src"=N:79;Y:41=S:"W";Y:42=V:1.73,-0.04,2.42;Y:43=T:29354228;Y:45=Y:44;Y:46=V:-0.81,-1.37,0.73;Y:47=N:0;}28F4CAA8{Y:26=Y:36;}29354138{Y:39=T:29354168;S:"Src"=N:79;Y:41=S:"D";Y:42=V:0.23,-2.46,2.15;Y:43=T:29354198;Y:45=Y:44;Y:46=V:-0.27,-0.73,0.73;Y:47=N:0;}29354168{;}2918DBA8{Y:39=T:2918DBD8;S:"Src"=N:79;Y:41=Y:49;Y:42=V:0.5,-1.84,2.35;Y:43=T:2918DC30;Y:45=Y:44;Y:46=V:-1.29,1.44,2.34;Y:47=N:0;}27D51948{Y:26=Y:25;}29ECAA90{S:"A";S:"Alt";S:"S";Y:49;Y:60;S:"D";S:"W";S:"R";}2ACB0628{Y:67=N:0;Y:68=N:0;Y:69=N:0;Y:49=N:0;Y:71=Y:70;Y:72=N:5;Y:73=N:0;Y:74=N:0;Y:75=N:90;Y:56=N:0;Y:76=V:1552.06,-233.215,2.00098;Y:77=N:0;S:"Z"=N:0;Y:78=N:1;Y:80=Y:79;Y:81=N:0;Y:82=N:5;Y:83=N:-7;Y:84=N:0;Y:85=N:0;Y:51=V:1577.06,-208.215,10.001;S:"W"=N:0;Y:86=N:0;Y:40=V:-0.696365,-0.696364,-0.173648;S:"R"=N:0;Y:87=N:0;Y:88=N:0;S:"Alt"=N:0;Y:89=N:0;Y:90=N:0;Y:91=N:11;S:"A"=N:0;Y:93=Y:92;Y:94=N:0;Y:95=N:0;Y:97=Y:96;Y:98=T:2ACB0718;Y:99=N:0;Y:100=N:0;Y:101=N:7;Y:102=N:4.8;Y:103=T:2ACB0658;Y:104=N:0;Y:105=N:0;Y:106=T:28724FA0;Y:107=N:0;Y:108=T:28724FD0;S:"D"=N:0;S:"P"=N:0;S:"S"=N:0;Y:109=T:2ACB06B8;Y:110=T:2ACB06E8;Y:111=N:1;Y:112=N:2.6;Y:113=N:0;S:"Car"=N:1;Y:60=N:0;Y:114=T:28725000;Y:52=T:2ACB0688;Y:115=N:0;Y:116=N:0;Y:117=T:28725030;}1F52B128{;}2A22B970{Y:39=T:2A22B9A0;S:"Src"=N:79;Y:41=S:"A";Y:42=V:2.51,-2.64,1.63;Y:43=T:2A22B9D0;Y:45=Y:44;Y:46=V:-1.49,-1.13,0.73;Y:47=N:0;}29DAF1E8{;}2A22BA00{Y:39=T:2A22BA30;S:"Src"=N:79;Y:41=Y:49;Y:42=V:1.47,-1.06,2.38;Y:43=T:1F52AFA8;Y:45=Y:44;Y:46=V:1.12,0.05,0.73;Y:47=N:0;}29ECAAC0{Y:58;Y:58;Y:58;Y:58;Y:58;Y:58;Y:58;Y:58;}2AD72198{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}29354258{Y:39=T:29354288;S:"Src"=N:79;Y:41=S:"Alt";Y:42=V:1.36,0.64,2.46;Y:43=T:2AD72198;Y:45=Y:44;Y:46=V:-0.04,-1.28,0.73;Y:47=N:0;}28F4CC10{Y:1=A:5.8157e-006,90,360;Y:2=V:-8.70166,14.7953,3.31152;Y:3=B:t;}29C1EF40{Y:4=T:29F92F78;Y:6=Y:37;Y:32=N:76;Y:2=V:-8.4917,-11.4234,3.31152;Y:21=Y:33;Y:38=N:0;Y:29=T:29591E30;Y:1=A:6.30331e-006,90,-2.1011e-006;Y:30=N:0;}1FFF9148{Y:4=T:28F4CBB0;Y:6=Y:31;Y:32=N:76;Y:2=V:-8.70166,14.7953,3.31152;Y:21=Y:33;Y:30=N:0;Y:29=T:1FFF91D0;Y:1=A:6.30331e-006,90,-2.1011e-006;}2A22AE18{Y:1=A:-4.37063e-008,-91,-4.87595e-007;Y:2=V:-26.0532,0.68985,3.31543;Y:3=B:t;}29591E90{Y:26=Y:36;}29DAF1B8{Y:13=Y:12;Y:14=S:"0";}2918DC60{Y:39=T:2918DC90;S:"Src"=N:73;Y:41=Y:51;Y:42=V:-1.11,1,0.73;Y:43=T:29F92F48;Y:45=Y:44;Y:46=V:1.19,0.46,2.49;Y:47=N:0;}2918DBD8{;}28F4CBB0{N:0=T:28F4CC10;}
Constraints:2A02C2B8{Y:119=N:80;Y:120=N:0;}27C7CBA8{T:287B7590;T:287B75C0;}2A132A58{Y:119=N:79;Y:120=N:0;}29F93038{T:29F93098;T:29F930C8;}287B75C0{Y:119=N:73;Y:120=N:0;}290C3CD8{Y:119=N:76;Y:120=N:0;}29E45060{T:29E450C0;T:29E450F0;}2A02C2E8{Y:119=N:76;Y:120=N:0;}29E451A0{T:290C3CD8;T:290C3D08;}2A132A28{Y:119=N:76;Y:120=N:0;}290C3D08{Y:119=N:74;Y:120=N:0;}2880ABA8{T:2880AC08;T:2880AC38;}287B7590{Y:119=N:76;Y:120=N:0;}2AD722E8{Y:119=N:73;Y:120=N:0;}H29605358{T:2A132998;T:27C7CB50;T:29E45148;T:2880AB78;T:29F93008;T:2A22AE70;T:2880AC90;T:2AD72258;}2A132998{Y:121=T:2A1329C8;Y:78=Y:122;Y:123=N:0;}2AD72318{Y:119=N:76;Y:120=N:0;}2AD72258{Y:121=T:2AD72288;Y:78=Y:124;}29F930C8{Y:119=N:76;Y:120=N:0;}2880AB78{Y:121=T:2880ABA8;Y:78=Y:124;}2880ACE8{T:2A02C2B8;T:2A02C2E8;}2880AC90{Y:121=T:2880ACE8;Y:78=Y:122;Y:123=N:0;}29E45148{Y:121=T:29E451A0;Y:78=Y:122;Y:123=N:0;}2880AC08{Y:119=N:79;Y:120=N:0;}2880AC38{Y:119=N:76;Y:120=N:0;}29E450F0{Y:119=N:76;Y:120=N:0;}29E450C0{Y:119=N:80;Y:120=N:0;}27C7CB50{Y:121=T:27C7CBA8;Y:78=Y:122;Y:123=N:0;}2AD72288{T:2AD722E8;T:2AD72318;}2A22AE70{Y:121=T:29E45060;Y:78=Y:124;}29F93008{Y:121=T:29F93038;Y:78=Y:124;}29F93098{Y:119=N:74;Y:120=N:0;}2A1329C8{T:2A132A28;T:2A132A58;}
[Dict]
1:"LocalAngle"
2:"LocalPos"
3:"Frozen"
4:"PhysicsObjects"
5:"prop_vehicle_prisoner_pod"
6:"Class"
7:"Half-Life 2"
8:"Category"
9:"Members"
10:"Jeep Seat"
11:"Name"
12:"scripts/vehicles/prisoner_pod.txt"
13:"vehiclescript"
14:"limitview"
15:"KeyValues"
16:"VALVe"
17:"Author"
18:"A Seat from VALVe's Jeep"
19:"Information"
20:"models/nova/jeep_seat.mdl"
21:"Model"
22:"VehicleTable"
23:"Seat_Jeep"
24:"VehicleName"
25:"phoenix_storms/FuturisticTrackRamp_1-2"
26:"MaterialOverride"
27:"material"
28:"VehicleMemDupe"
29:"EntityMods"
30:"Skin"
31:"gmod_wire_adv_pod"
32:"SavedParentIdx"
33:"models/jaanus/wiretool/wiretool_range.mdl"
34:"Wires"
35:"WireDupeInfo"
36:"phoenix_storms/fender_white"
37:"gmod_wire_cameracontroller"
38:"Static"
39:"Path"
40:"CamDir"
41:"SrcId"
42:"SrcPos"
43:"Color"
44:"arrowire/arrowire2"
45:"Material"
46:"StartPos"
47:"Width"
48:"Direction"
49:"Active"
50:"Activated"
51:"CamPosition"
52:"Position"
53:"models/hunter/plates/plate1x1.mdl"
54:"prop_physics"
55:"gmod_wire_expression2"
56:"Pitch"
57:"VECTOR"
58:"NORMAL"
59:"_outputs"
60:"Horn"
61:"_inputs"
62:"_name"
63:"models/beer/wiremod/gate_e2.mdl"
64:"@name Car€@inputs Active W A S D R Alt Horn€@outputs CamDir:vector CamPosition:vector Pitch€@persist [Wheel Brake Colour Black Window Position]:vector Spawn€@persist Angle:angle Pitch Roll Spin Drive ColourNum Car P FWheelPos RWheelPos FWheelY RWheelY Type Inertia Skid€@persist [Mat1 Tyre Glass Light ]:string [Entity Chip]:entity Forward Turn Dturn Vector:vector Z OffsetZ CamClk€@persist AdjustP AdjustY AdjustR AdjustX AdjustCamF AdjustCamZ Grip Power€€if(dupefinished() == 1){Spawn = 0}€€€if(Spawn < 11){€    €interval(100)€    Spawn++€    Car =  1€    ColourNum = 1€    Chip=entity()€€### Common €Wheel = vec(0.31,0.31,0.1)€Black = vec(10,10,10)€Window = vec(255,250,230)€€Mat1 = £phoenix_storms/mat/mat_phx_metallic£€Tyre =£phoenix_storms/car_tire£€Glass = £debug/env_cubemap_model£€Light = £models/XQM/Rails/gumball_1£€€holoCreate(Spawn)€€   holoParent(2,1)€   holoParent(3,1)€   holoParent(4,1)€   holoParent(5,1)€   holoParent(6,1)€   holoParent(7,1)€   holoParent(8,1)€   holoParent(9,1)€   holoParent(10,1)€   holoParent(11,1)€€   holoMaterial(2, Tyre)€   holoMaterial(3, Tyre)€   holoMaterial(4, Tyre)€   holoMaterial(5, Tyre)€€€}else{€    €     €if(Alt & ~Alt){Drive = !Drive}€   €€      if(Drive==0 & !tickClk()){€                €                €€CamPosition  =  (Chip:toWorld(vec(25,25,8)))€CamDir = Chip:toWorld(ang(10,-135,0)):forward()€        Brake = vec(100,0,0)€        Forward = 0€        Turn = 0€        Dturn = 0€        Roll = 0€        Pitch = 0€        P = 0€        Angle = ang(0,0,0)€        Vector = Chip:toWorld(vec(0,0,0))€        Inertia = 0€        Z = 0€Entity = holoEntity(1)€€€        ColourNum += D-A€        ColourNum = ColourNum%12€        ColourNum += (ColourNum<1)*12€€        if(ColourNum == 1){Colour = vec(255,255,255)}    #White€        elseif(ColourNum== 2){Colour = vec(135,135,135)}#Silver€        elseif(ColourNum == 3){Colour = vec(0,0,0)}      #Black€        elseif(ColourNum == 4){Colour = vec(255,0,0)}    #Red€        elseif(ColourNum == 5){Colour = vec(255,135,0)}  #Orange€        elseif(ColourNum == 6){Colour = vec(255,255,0)}  #Yellow€        elseif(ColourNum == 7){Colour = vec(0,255,0)}    #Green€        elseif(ColourNum == 8){Colour = vec(0,255,135)}  #Turquoise€        elseif(ColourNum == 9){Colour = vec(0,255,255)}  #Cyan€        elseif(ColourNum == 10){Colour = vec(0,0,255)}   #Blue€        elseif(ColourNum == 11){Colour = vec(135,0,255)} #Magenta€        elseif(ColourNum == 12){Colour = vec(255,0,255)} #Pink€        €   €  holoModel(2, £hqcylinder2£)€  holoScale(2, Wheel)€  holoColor(2, Black)€  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoModel(3, £hqcylinder2£)€  holoScale(3, Wheel)€  holoColor(3, Black)€  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoModel(4, £hqcylinder2£)€  holoScale(4, Wheel)€  holoColor(4, Black)€  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoModel(5, £hqcylinder2£)€  holoScale(5, Wheel)€  holoColor(5, Black)€  holoAng(5,Chip:toWorld(ang(90,90,0)))€€€        Car += W-S€        Car = Car%14  ###### Change these to the number of cars you have€        Car += (Car<1)*14€€if(Car == 1){€€###### Civic€Type = 1€€FWheelPos = 7€RWheelPos = -7€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3)))  holoModel(1, £hqcylinder2£)  holoScale(1, vec(1.9,0.48,0.9))€  holoColor(1, Colour)  holoMaterial(1, Mat1) holoAng(1,Chip:toWorld(ang(0,0,90)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  €€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  €€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))  €€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  €€  holoPos(6, Chip:toWorld(vec(-5.5,0,7.6)))  holoModel(6, £hqcylinder2£)  holoScale(6, vec(0.04,0.35,0.04))€  holoColor(6, Brake)  holoAng(6,Chip:toWorld(ang(90,0,0)))€€  holoPos(7, Chip:toWorld(vec(-9.4,0,4.6)))  holoModel(7, £hqcylinder2£)  holoScale(7, vec(0.1,0.8,0.1))€  holoColor(7, Brake)  holoAng(7,Chip:toWorld(ang(15,0,0)))€€  holoPos(8, Chip:toWorld(vec(10.5,0,2.8)))  holoModel(8, £hqcylinder2£)  holoScale(8, vec(0.22,0.9,0.18))€  holoColor(8, Colour) holoMaterial(8, Mat1) holoAng(8,Chip:toWorld(ang(0,0,0)))€€  holoPos(9, Chip:toWorld(vec(10,0,4)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.1,0.9,0.08))€  holoColor(9, Window)  holoMaterial(9, Mat1)  holoAng(9,Chip:toWorld(ang(-20,0,0)))€€  holoPos(10, Chip:toWorld(vec(-2,0,5)))  holoModel(10, £hqcylinder2£)  holoScale(10, vec(0.5,1.3,0.8))€  holoColor(10, Window)   holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(90,90,0)))€€  holoPos(11, Chip:toWorld(vec(-2,0,7.7)))  holoModel(11, £hqcylinder2£)  holoScale(11, vec(0.05,0.6,0.8))€  holoColor(11, Colour)   holoMaterial(11, Mat1) holoAng(11,Chip:toWorld(ang(90,90,0)))€€AdjustP = 0€AdjustY = 0€AdjustR = 90€AdjustX = 0€AdjustCamF = 2.6€AdjustCamZ = 4.8€OffsetZ = 0€€}elseif(Car == 2){€###### Subaru€Type = 1€€FWheelPos = 8€RWheelPos = -8€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3)))  holoModel(1, £cube£)  holoScale(1, vec(1.9,0.9,0.3))€  holoColor(1, Colour)  holoMaterial(1, Mat1) holoAng(1,Chip:toWorld(ang(0,0,0)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))  holoModel(4, £hqcylinder2£) holoScale(4, Wheel)€  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-10.6,4,3.96)))  holoModel(6, £prism£)  holoScale(6, vec(0.12,0.23,0.15))€  holoColor(6, Brake)  holoAng(6,Chip:toWorld(ang(90,0,0)))€€  holoPos(7, Chip:toWorld(vec(-10.6,-4,3.96)))  holoModel(7, £prism£)  holoScale(7, vec(0.12,0.23,0.15))€  holoColor(7, Brake)  holoAng(7,Chip:toWorld(ang(90,0,0)))€€  holoPos(8, Chip:toWorld(vec(0,-3.8,4)))  holoModel(8, £cube£)  holoScale(8, vec(1.91,0.21,0.07))€  holoColor(8, Window) holoMaterial(8, Mat1)  holoAng(8,Chip:toWorld(ang(1,0,0)))€€  holoPos(9, Chip:toWorld(vec(-10.5,0.1,5.6)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.16,0.04,0.8))€  holoColor(9, Colour)  holoMaterial(9, Mat1) holoAng(9,Chip:toWorld(ang(0,0,90)))€€  holoPos(10, Chip:toWorld(vec(-1,0,4)))  holoModel(10, £cylinder£)  holoScale(10, vec(0.52,1.3,0.8))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(90,90,0)))€€  holoPos(11, Chip:toWorld(vec(0,3.8,4)))  holoModel(11, £cube£)  holoScale(11, vec(1.91,0.21,0.07))€  holoColor(11, Window) holoMaterial(11, Mat1)  holoAng(11,Chip:toWorld(ang(1,0,0)))€€AdjustP = 0€AdjustY = 0€AdjustR = 0€AdjustX = 0€AdjustCamF = 3€AdjustCamZ = 4.4€€}elseif(Car == 3){€###### Evo€Type = 1€€FWheelPos = 8€RWheelPos = -8€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3)))  holoModel(1, £cube£)  holoScale(1, vec(1.9,0.85,0.31))€  holoColor(1, Colour)  holoAng(1,Chip:toWorld(ang(0,0,0)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))  holoModel(4, £hqcylinder2£) holoScale(4, Wheel)  €  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-10.7,4.5,3.3)))  holoModel(6, £prism£)  holoScale(6, vec(0.2,0.11,0.15))€  holoColor(6, Brake) holoMaterial(6, Light)  holoAng(6,Chip:toWorld(ang(130,90,0)))€€  holoPos(7, Chip:toWorld(vec(-10.7,-4.5,3.3)))  holoModel(7, £prism£)  holoScale(7, vec(0.2,0.11,0.15))€  holoColor(7, Brake) holoMaterial(7, Light) holoAng(7,Chip:toWorld(ang(-130,90,0)))€€€  holoPos(8, Chip:toWorld(vec(-10.5,0.1,5.6)))  holoModel(8, £hqcylinder2£)  holoScale(8, vec(0.16,0.04,0.8))€  holoColor(8, Colour)  holoMaterial(8, Mat1) holoAng(8,Chip:toWorld(ang(4,0,90)))€€  holoPos(9, Chip:toWorld(vec(11.2,0,3.1)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.08,0.25,0.4))€  holoColor(9, Black) holoMaterial(9, Mat1) holoAng(9,Chip:toWorld(ang(0,0,90)))€€  holoPos(10, Chip:toWorld(vec(-1,0,4)))  holoModel(10, £hqcylinder£)  holoScale(10, vec(0.5,1.2,0.8))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(90,90,0)))€€  holoPos(11, Chip:toWorld(vec(11,0,3.9)))  holoModel(11, £prism£)  holoScale(11, vec(0.9,0.08,0.13))€  holoColor(11, Window) holoMaterial(11, Mat1)  holoAng(11,Chip:toWorld(ang(180,90,0)))€€€AdjustP = 0€AdjustY = 0€AdjustR = 0€OffsetZ = 0€AdjustX = 0€AdjustCamF = 2.4€AdjustCamZ = 4.4€€}elseif(Car == 4){€###Skyline€Type = 1€€FWheelPos = 7.8€RWheelPos = -7.8€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3.3)))  holoModel(1, £cube£)  holoScale(1, vec(1.86,0.9,0.26))€  holoColor(1, Colour)  holoAng(1,Chip:toWorld(ang(1,0,0)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))  holoModel(4, £hqcylinder2£) holoScale(4, Wheel)  €  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-10.5,4.5,4.1)))  holoModel(6, £hqcylinder2£)  holoScale(6, vec(0.1,0.1,0.1))€  holoColor(6, Brake) holoMaterial(6, Light)  holoAng(6,Chip:toWorld(ang(90,0,0)))€€  holoPos(7, Chip:toWorld(vec(-10.5,-4.5,4.1)))  holoModel(7, £hqcylinder2£)  holoScale(7, vec(0.1,0.1,0.1))€  holoColor(7, Brake) holoMaterial(7, Light) holoAng(7,Chip:toWorld(ang(90,0,0)))€€  holoPos(8, Chip:toWorld(vec(-10.5,3.2,3.9)))  holoModel(8, £hqcylinder2£)  holoScale(8, vec(0.08,0.08,0.1))€  holoColor(8, Brake)  holoMaterial(8, Light) holoAng(8,Chip:toWorld(ang(90,0,0)))€€  holoPos(9, Chip:toWorld(vec(-10.5,-3.2,3.9)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.08,0.08,0.1))€  holoColor(9, Brake) holoMaterial(9, Light) holoAng(9,Chip:toWorld(ang(90,0,0)))€€  holoPos(10, Chip:toWorld(vec(-1,0,4.2)))  holoModel(10, £hqcylinder£)  holoScale(10, vec(1.1,0.44,0.8))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(0,0,90)))€€  holoPos(11, Chip:toWorld(vec(10.6,0,3.8)))  holoModel(11, £hqcylinder2£)  holoScale(11, vec(0.1,0.92,0.1))€  holoColor(11, Window) holoMaterial(11, £phoenix_storms/pack2/interior_top£)  holoAng(11,Chip:toWorld(ang(90,0,0)))€€€AdjustP = 1€AdjustY = 0€AdjustR = 0€OffsetZ = 0.3€AdjustX = 0€AdjustCamF = 2.4€AdjustCamZ = 4.4€€}elseif(Car == 5){€#Mustang€Type = 2€€FWheelPos = 8.2€RWheelPos = -8.2€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3.4)))  holoModel(1, £cube£)  holoScale(1, vec(1.92,0.92,0.24))€  holoColor(1, Colour)  holoAng(1,Chip:toWorld(ang(0,0,0)))€€  holoPos(2, Chip:toWorld(vec(8.2,5,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(8.2,-5,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(-8.2,5,2)))   holoModel(4, £hqcylinder2£) holoScale(4, Wheel) €  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(-8.2,-5,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-11.2,3.9,3.7)))  holoModel(6, £cube£)  holoScale(6, vec(0.08,0.2,0.1))€  holoColor(6, Brake) holoMaterial(6, £phoenix_storms/middle£) holoAng(6,Chip:toWorld(ang(0,0,0)))€€  holoPos(7, Chip:toWorld(vec(-11.2,-3.9,3.7)))  holoModel(7, £cube£)  holoScale(7, vec(0.08,0.2,0.1))€  holoColor(7, Brake)  holoMaterial(7, £phoenix_storms/middle£) holoAng(7,Chip:toWorld(ang(0,0,0)))€€  holoPos(8, Chip:toWorld(vec(11,4.82,3.9)))  holoModel(8, £hqcylinder2£)  holoScale(8, vec(0.1,0.1,0.1))€  holoColor(8, Window)   holoAng(8,Chip:toWorld(ang(90,0,0)))€€  holoPos(9, Chip:toWorld(vec(11,-4.82,3.9)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.1,0.1,0.1))€  holoColor(9, Window)  holoAng(9,Chip:toWorld(ang(90,0,0)))€€  holoPos(10, Chip:toWorld(vec(-3.8,0,4.5)))  holoModel(10, £hqcylinder2£)  holoScale(10, vec(1.1,0.42,0.9))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(-2,0,90)))€€  holoPos(11, Chip:toWorld(vec(12,0,3.8)))  holoModel(11, £dome£)  holoScale(11, vec(0.14,0.6,4))€  holoColor(11, Black) holoMaterial(11, Mat1)  holoAng(11,Chip:toWorld(ang(-89.5,0,0)))€€AdjustP = 0€AdjustY = 0€AdjustR = 0€OffsetZ = 0.4€AdjustX = 0€AdjustCamF = 0€AdjustCamZ = 5€€}elseif(Car == 6){€#Charger€Type = 3€€FWheelPos = 8.2€RWheelPos = -8.2€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3)))  holoModel(1, £cube£)  holoScale(1, vec(1.8,0.92,0.26))€  holoColor(1, Colour)  holoMaterial(1, Mat1) holoAng(1,Chip:toWorld(ang(0,0,0)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoMaterial(2, Tyre)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoMaterial(3, Tyre) holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))   holoModel(4, £hqcylinder2£) holoScale(4, Wheel) €  holoMaterial(4, Tyre) holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoMaterial(5, Tyre) holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-10.5,0,2.6)))  holoModel(6, £hqcylinder2£)  holoScale(6, vec(0.08,0.12,0.94))€  holoColor(6, Brake) holoMaterial(6, Glass) holoAng(6,Chip:toWorld(ang(0,0,90)))€€  holoPos(7, Chip:toWorld(vec(-10.5,0,3.8)))  holoModel(7, £cube£)  holoScale(7, vec(0.08,0.78,0.06))€  holoColor(7, Brake) holoMaterial(7, Light) holoAng(7,Chip:toWorld(ang(0,0,0)))€€  holoPos(8, Chip:toWorld(vec(11.8,2.8,3.2)))  holoModel(8, £cube£)  holoScale(8, vec(0.08,0.38,0.1))€  holoColor(8, Black) holoMaterial(8, Mat1)  holoAng(8,Chip:toWorld(ang(0,0,0)))€€  holoPos(9, Chip:toWorld(vec(11.8,-2.8,3.2)))  holoModel(9, £cube£)  holoScale(9, vec(0.08,0.38,0.1))€  holoColor(9, Black) holoMaterial(7, Mat1) holoAng(9,Chip:toWorld(ang(0,0,0)))€€  holoPos(10, Chip:toWorld(vec(-2.4,0,4.1)))  holoModel(10, £hqcylinder2£)  holoScale(10, vec(0.96,0.44,0.8))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(-5,0,90)))€€  holoPos(11, Chip:toWorld(vec(10.5,0,3.05)))  holoModel(11, £hqcylinder£)  holoScale(11, vec(0.3,0.28,0.92))€  holoColor(11, Colour) holoMaterial(11, Mat1)  holoAng(11,Chip:toWorld(ang(0,0,90)))€€€AdjustP = 0€AdjustY = 0€AdjustR = 0€OffsetZ = 0 €AdjustX = 0              €AdjustCamF = 1 €AdjustCamZ = 5€    €}elseif(Car == 7){€###Chevelle €Type = 2€€FWheelPos = 8.2€RWheelPos = -8.2€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3.4)))  holoModel(1, £cube£)  holoScale(1, vec(2,0.92,0.24))€  holoColor(1, Colour)  holoAng(1,Chip:toWorld(ang(0,0,0)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))   holoModel(4, £hqcylinder2£) holoScale(4, Wheel) €  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-11.8,0,3.6)))  holoModel(6, £hqcylinder2£)  holoScale(6, vec(0.08,0.2,0.9))€  holoColor(6, Brake) holoMaterial(6, Glass) holoAng(6,Chip:toWorld(ang(0,0,90)))€€  holoPos(7, Chip:toWorld(vec(-11.8,0,3.6)))  holoModel(7, £hqcylinder2£)  holoScale(7, vec(0.08,0.8,0.08))€  holoColor(7, Brake) holoMaterial(7, Light) holoAng(7,Chip:toWorld(ang(90,0,0)))€€  holoPos(8, Chip:toWorld(vec(11.5,4,3.7)))  holoModel(8, £hqcylinder2£)  holoScale(8, vec(0.12,0.12,0.1))€  holoColor(8, Window)   holoAng(8,Chip:toWorld(ang(90,0,0)))€€  holoPos(9, Chip:toWorld(vec(11.5,-4,3.7)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.12,0.12,0.1))€  holoColor(9, Window)  holoAng(9,Chip:toWorld(ang(90,0,0)))€€  holoPos(10, Chip:toWorld(vec(-2.4,0,4.4)))  holoModel(10, £hqcylinder2£)  holoScale(10, vec(0.96,0.44,0.9))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(-3,0,90)))€€  holoPos(11, Chip:toWorld(vec(11.8,0,3.7)))  holoModel(11, £cylinder£)  holoScale(11, vec(0.1,0.56,0.1))€  holoColor(11, Black) holoMaterial(11, Mat1)  holoAng(11,Chip:toWorld(ang(0,0,0)))€€AdjustP = 0€AdjustY = 0€AdjustR = 0€OffsetZ = 0.4€AdjustX = 0€AdjustCamF = 0€AdjustCamZ = 5€€}elseif(Car == 8){€###Pontiac €Type = 3€€FWheelPos = 8.2 €RWheelPos = -8 €FWheelY = 5.6€RWheelY = 5.6€€  holoPos(1, Chip:toWorld(vec(0,0,3.4)))  holoModel(1, £cube£)  holoScale(1, vec(2,1,0.26))€  holoColor(1, Colour) holoMaterial(1, Mat1)  holoAng(1,Chip:toWorld(ang(0,0,0)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))   holoModel(4, £hqcylinder2£) holoScale(4, Wheel) €  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-3,0,4.5)))  holoModel(6, £hqcylinder£)  holoScale(6, vec(1,0.46,0.94))€  holoColor(6, Window) holoMaterial(6, Glass) holoAng(6,Chip:toWorld(ang(-2,0,90)))€€  holoPos(7, Chip:toWorld(vec(-11.6,0,3.7)))  holoModel(7, £cube£)  holoScale(7, vec(0.1,0.08,0.9))€  holoColor(7, Brake)  holoMaterial(7, £phoenix_storms/middle£) holoAng(7,Chip:toWorld(ang(0,0,90)))€€  holoPos(8, Chip:toWorld(vec(11.5,5.3,3.7)))  holoModel(8, £hqcylinder2£)  holoScale(8, vec(0.2,0.1,0.1))€  holoColor(8, Window) holoMaterial(8, Light)  holoAng(8,Chip:toWorld(ang(90,0,0)))€€  holoPos(9, Chip:toWorld(vec(11.5,-5.3,3.7)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.2,0.1,0.1))€  holoColor(9, Window) holoMaterial(9, Light) holoAng(9,Chip:toWorld(ang(90,0,0)))€€  holoPos(10, Chip:toWorld(vec(0,0,3.7)))  holoModel(10, £cube£)  holoScale(10, vec(2.04,0.08,0.1))€  holoColor(10, Colour)  holoMaterial(10, Mat1) holoAng(10,Chip:toWorld(ang(0,0,0)))€€  holoPos(11, Chip:toWorld(vec(11.5,0,3.4)))  holoModel(11, £cube£)  holoScale(11, vec(0.1,0.8,0.12))€  holoColor(11, Black) holoMaterial(7, Mat1)  holoAng(11,Chip:toWorld(ang(0,0,0)))€€AdjustP = 0€AdjustY = 0€AdjustR = 0€OffsetZ = 0.4€AdjustX = 0€AdjustCamF = 0€AdjustCamZ = 5€€}elseif(Car == 9){€###### Porche€Type = 4€€FWheelPos = 7 €RWheelPos = -8 €FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3)))  holoModel(1, £hqcylinder2£)  holoScale(1, vec(1.9,0.32,0.9))€  holoColor(1, Colour)  holoAng(1,Chip:toWorld(ang(0,0,90)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))   holoModel(4, £hqcylinder2£) holoScale(4, Wheel) €  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-10,3.7,4.5)))  holoModel(6, £cube£)  holoScale(6, vec(0.09,0.3,0.1))€  holoColor(6, Brake) holoMaterial(6, Light) holoAng(6,Chip:toWorld(ang(55,0,0)))€€  holoPos(7, Chip:toWorld(vec(-10,-3.7,4.5)))  holoModel(7, £cube£)  holoScale(7, vec(0.09,0.3,0.1))€  holoColor(7, Brake) holoMaterial(7, Light) holoAng(7,Chip:toWorld(ang(55,0,0)))€€  holoPos(8, Chip:toWorld(vec(9,3.8,4)))  holoModel(8, £dome£)  holoScale(8, vec(0.2,0.14,0.08))€  holoColor(8, Window) holoMaterial(8, £models/shiny£) holoAng(8,Chip:toWorld(ang(10,-30,0)))€€  holoPos(9, Chip:toWorld(vec(9,-3.8,4)))  holoModel(9, £dome£)  holoScale(9, vec(0.2,0.14,0.08))€  holoColor(9, Window) holoMaterial(9, £models/shiny£) holoAng(9,Chip:toWorld(ang(10,30,0)))€€  holoPos(10, Chip:toWorld(vec(-2.3,0,4.5)))  holoModel(10, £hqcylinder2£)  holoScale(10, vec(0.43,1.15,0.86))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(90,90,0)))€€  holoPos(11, Chip:toWorld(vec(-6.4,0,4.6)))  holoModel(11, £hqcylinder£)  holoScale(11, vec(0.3,1,0.88))€  holoColor(11, Colour) holoMaterial(11, Mat1) holoAng(11,Chip:toWorld(ang(72,0,90)))€€€AdjustP = 0€AdjustY = 0€AdjustR = 90€OffsetZ = 0€AdjustX = 0€AdjustCamF = 1€AdjustCamZ = 4.6€€}elseif(Car == 10){€###### Merc€Type = 4€€FWheelPos = 7.8€RWheelPos = -7.8€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3)))  holoModel(1, £hqcylinder2£)  holoScale(1, vec(1.94,0.34,0.9))€  holoColor(1, Colour)  holoAng(1,Chip:toWorld(ang(0,0,90)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))   holoModel(4, £hqcylinder2£) holoScale(4, Wheel) €  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-9.8,4.3,3.38)))  holoModel(6, £prism£)  holoScale(6, vec(0.2,0.1,0.16))€  holoColor(6, Brake)  holoAng(6,Chip:toWorld(ang(160,0,90)))€€  holoPos(7, Chip:toWorld(vec(-9.8,-4.3,3.38)))  holoModel(7, £prism£)  holoScale(7, vec(0.2,0.1,0.16))€  holoColor(7, Brake)  holoAng(7,Chip:toWorld(ang(160,0,-90)))€€  holoPos(8, Chip:toWorld(vec(10.1,3.8,3.56)))  holoModel(8, £hqcylinder2£)  holoScale(8, vec(0.12,0.2,0.08))€  holoColor(8, Window) holoMaterial(8, £models/shiny£) holoAng(8,Chip:toWorld(ang(15,32,10)))€€  holoPos(9, Chip:toWorld(vec(10.1,-3.8,3.56)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.12,0.2,0.08))€  holoColor(9, Window) holoMaterial(9, £models/shiny£) holoAng(9,Chip:toWorld(ang(15,-32,-10)))€€  holoPos(10, Chip:toWorld(vec(-2.8,0,4)))  holoModel(10, £hqcylinder2£)  holoScale(10, vec(1,0.38,0.86))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(-5,0,90)))€€  holoPos(11, Chip:toWorld(vec(10.2,0,3.5)))  holoModel(11, £hqcylinder2£)  holoScale(11, vec(0.12,0.45,0.08))€  holoColor(11, Window) holoMaterial(11, £phoenix_storms/dome£) holoAng(11,Chip:toWorld(ang(15,0,0)))€€AdjustP = 0€AdjustY = 0€AdjustR = 90€OffsetZ = 0€AdjustX = 0€AdjustCamF = 1€AdjustCamZ = 4.2€€}elseif(Car == 11){€###### Ferrari€Type = 4€€FWheelPos = 8€RWheelPos = -8€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3)))  holoModel(1, £hqcylinder2£)  holoScale(1, vec(1.8,0.4,0.9))€  holoColor(1, Colour) holoAng(1,Chip:toWorld(ang(0,0,90)))€€  holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€  holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,2)))  holoModel(4, £hqcylinder2£)  holoScale(4, Wheel)€  holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0)))€  €  holoPos(6, Chip:toWorld(vec(-9.2,3.2,4.7)))  holoModel(6, £hqcylinder2£)  holoScale(6, vec(0.08,0.08,0.1))€  holoColor(6, Brake)  holoAng(6,Chip:toWorld(ang(92,0,0)))€€  holoPos(7, Chip:toWorld(vec(-9.2,-3.2,4.7)))  holoModel(7, £hqcylinder2£)  holoScale(7, vec(0.08,0.08,0.1))€  holoColor(7, Brake)  holoAng(7,Chip:toWorld(ang(92,0,0)))€€  holoPos(8, Chip:toWorld(vec(0,4,4.4)))  holoModel(8, £hqcylinder2£)  holoScale(8, vec(0.08,0.08,1.6))€  holoColor(8, Window)   holoAng(8,Chip:toWorld(ang(92,0,0)))  €€  holoPos(9, Chip:toWorld(vec(0,-4,4.4)))  holoModel(9, £hqcylinder2£)  holoScale(9, vec(0.08,0.08,1.6))€  holoColor(9, Window)   holoAng(9,Chip:toWorld(ang(92,0,0)))  €€  holoPos(10, Chip:toWorld(vec(-1,0,4.5)))  holoModel(10, £hqcylinder£)  holoScale(10, vec(1.1,0.38,0.8))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(2,0,90)))€€  holoPos(11, Chip:toWorld(vec(-3.6,0,4)))  holoModel(11, £hqcylinder£)  holoScale(11, vec(1,0.3,0.9))€  holoColor(11, Colour)   holoMaterial(11, Mat1) holoAng(11,Chip:toWorld(ang(6,0,90)))€€AdjustP = 0€AdjustY = 0€AdjustR = 90€AdjustX = 0€AdjustCamF = 6€AdjustCamZ = 3.8€OffsetZ = 0€€€}elseif(Car == 12){€###Lambo€Type = 4€FWheelPos = 8 + AdjustX€RWheelPos = -8 + AdjustX€FWheelY = 5€RWheelY = 5€€  holoPos(1, Chip:toWorld(vec(-3,0,3.2)))  holoModel(1, £cube£)  holoScale(1, vec(1.2,0.9,0.31))€  holoColor(1, Colour) holoMaterial(1, Mat1) holoAng(1,Chip:toWorld(ang(2,0,0)))€€  holoPos(2, Chip:toWorld(vec(8,5,2)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel)€     holoMaterial(2, Tyre) holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(8,-5,2)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel)€    holoMaterial(3, Tyre) holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(-8,5,2)))  holoModel(4, £hqcylinder2£)  holoScale(4, Wheel)€ holoMaterial(4, Tyre) holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(-8,-5,2)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel)€  holoMaterial(5, Tyre)  holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-9.8,3.8,4.6)))  holoModel(6, £cube£)  holoScale(6, vec(0.08,0.22,0.1))€  holoColor(6, Brake)  holoMaterial(6, Light) holoAng(6,Chip:toWorld(ang(2,0,0))) €€  holoPos(7, Chip:toWorld(vec(-9.8,-3.8,4.6)))  holoModel(7, £cube£)  holoScale(7, vec(0.08,0.22,0.1))€  holoColor(7, Brake)  holoMaterial(7, Light) holoAng(7,Chip:toWorld(ang(2,0,0)))€€  holoPos(8, Chip:toWorld(vec(10,4,3.45)))  holoModel(8, £cube£)  holoScale(8, vec(0.22,0.17,0.06))€  holoColor(8, Window)   holoMaterial(8, Light) holoAng(8,Chip:toWorld(ang(25,0,0)))  €€  holoPos(9, Chip:toWorld(vec(10,-4,3.45)))  holoModel(9, £cube£)  holoScale(9, vec(0.22,0.17,0.06))€  holoColor(9, Window)  holoMaterial(9, Light) holoAng(9,Chip:toWorld(ang(25,0,0)))  €€  holoPos(10, Chip:toWorld(vec(-1,0,4.5)))  holoModel(10, £hqcylinder£)  holoScale(10, vec(1.35,0.38,0.8))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(2,0,90)))€€  holoPos(11, Chip:toWorld(vec(4,0,3)))  holoModel(11, £hqcylinder£)  holoScale(11, vec(1.3,0.3,0.9))€  holoColor(11, Colour)   holoMaterial(11, Mat1) holoAng(11,Chip:toWorld(ang(4,0,90)))€€AdjustP = 2€AdjustY = 0€AdjustR = 0€AdjustX = 3€€AdjustCamF = 6.9€AdjustCamZ = 3.8€OffsetZ = 0.2€€}elseif(Car == 13){€€FWheelPos = 11 + AdjustX€RWheelPos = -13.5 + AdjustX€FWheelY = 6.2€RWheelY = 5.5€   Type = 5€€  holoPos(1, Chip:toWorld(vec(0,0,3))) holoModel(1, £cube£)  holoScale(1, vec(2.9,0.9,0.2))€  holoColor(1, vec(80,80,80)) holoMaterial(1, Mat1) holoAng(1,Chip:toWorld(ang(0,0,0)))€€  holoPos(2, Chip:toWorld(vec(11,6.2,2.1)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel+ vec(0.2,0.2,0))€   holoMaterial(2, Tyre)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€  holoPos(3, Chip:toWorld(vec(11,-6.2,2.1)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel+ vec(0.2,0.2,0))€   holoMaterial(3, Tyre)  holoAng(3,Chip:toWorld(ang(90,90,0)))€€  holoPos(4, Chip:toWorld(vec(-13.5,5.8,2.1)))   holoModel(4, £hqcylinder2£) holoScale(4, Wheel+ vec(0.2,0.2,0.1))€   holoMaterial(4, Tyre) holoAng(4,Chip:toWorld(ang(90,90,0)))€€  holoPos(5, Chip:toWorld(vec(-13.5,-5.8,2.1)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel + vec(0.2,0.2,0.1))€   holoMaterial(5, Tyre) holoAng(5,Chip:toWorld(ang(90,90,0)))€€  holoPos(6, Chip:toWorld(vec(-16,4,3)))  holoModel(6, £hqcylinder2£)  holoScale(6, vec(0.1,0.1,0.25))€  holoColor(6, Brake) holoMaterial(6, Light) holoAng(6,Chip:toWorld(ang(90,0,0)))€€  holoPos(7, Chip:toWorld(vec(-16,-4,3)))  holoModel(7, £hqcylinder2£)  holoScale(7, vec(0.1,0.1,0.25))€  holoColor(7, Brake) holoMaterial(7, Light) holoAng(7,Chip:toWorld(ang(90,0,0)))€€  holoPos(8, Chip:toWorld(vec(11.5,0,6.4)))  holoModel(8, £cube£)  holoScale(8, vec(0.96,1.1,0.74))€  holoColor(8, Colour) holoMaterial(8, Mat1) holoAng(8,Chip:toWorld(ang(0,0,0)))€€  holoPos(9, Chip:toWorld(vec(11.5,0,13.5)))  holoModel(9, £cube£)  holoScale(9, vec(0.9,1.05,0.7))€  holoColor(9, Colour)  holoMaterial(9, Mat1) holoAng(9,Chip:toWorld(ang(0,0,0)))€€  holoPos(10, Chip:toWorld(vec(12.8,0,14)))  holoModel(10, £cube£)  holoScale(10, vec(0.7,1.1,0.5))€  holoColor(10, Window)  holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(0,0,0)))€€  holoPos(11, Chip:toWorld(vec(16.6,0,7.2)))  holoModel(11, £cube£)  holoScale(11, vec(0.1,0.5,0.46))€  holoColor(11, Window) holoMaterial(11, £phoenix_storms/dome£) holoAng(11,Chip:toWorld(ang(0,0,0)))€€AdjustP = 0€AdjustY = 0€AdjustR = 0€OffsetZ = 1€AdjustX = 0€AdjustCamF = 14€AdjustCamZ = 14€€€}elseif(Car == 14){€#### Monster€€Type = 3€€FWheelPos = 8.4 + AdjustX€RWheelPos = -8.4 + AdjustX€FWheelY = 5.6€RWheelY = 5.6€€€    holoPos(1, Chip:toWorld(vec(0,0,3)))  holoModel(1, £cylinder£)  holoScale(1, vec(1.8,0.9,0.36)) € holoColor(1, Colour)   holoMaterial(1, £models/props_junk/plasticcrate01a£) holoAng(1,Chip:toWorld(ang(0,0,0)))€€holoPos(2, Chip:toWorld(vec(FWheelPos,FWheelY,4)))  holoModel(2, £hqcylinder2£)  holoScale(2, Wheel+ vec(0.24,0.24,0.1))€ 	holoColor(2, Black)  holoAng(2,Chip:toWorld(ang(90,90,0)))€€	holoPos(3, Chip:toWorld(vec(FWheelPos,-FWheelY,4)))  holoModel(3, £hqcylinder2£)  holoScale(3, Wheel+ vec(0.24,0.24,0.1))€  holoColor(3, Black)  holoAng(3,Chip:toWorld(ang(90,90,0))) €€ holoPos(4, Chip:toWorld(vec(RWheelPos,RWheelY,4)))  holoModel(4, £hqcylinder2£) holoScale(4, Wheel+ vec(0.24,0.24,0.1)) € holoColor(4, Black)  holoAng(4,Chip:toWorld(ang(90,90,0))) €€ holoPos(5, Chip:toWorld(vec(RWheelPos,-RWheelY,4)))  holoModel(5, £hqcylinder2£)  holoScale(5, Wheel + vec(0.24,0.24,0.1)) € holoColor(5, Black)  holoAng(5,Chip:toWorld(ang(90,90,0))) €€ holoPos(6, Chip:toWorld(vec(-12.1,5.1,7)))  holoModel(6, £cube£)  holoScale(6, vec(0.1,0.1,0.2)) € holoColor(6, Brake)  holoAng(6,Chip:toWorld(ang(0,0,0))) €€ holoPos(7, Chip:toWorld(vec(-12.1,-5.1,7)))  holoModel(7, £cube£)  holoScale(7, vec(0.1,0.1,0.2))€  holoColor(7, Brake)  holoAng(7,Chip:toWorld(ang(0,0,0)))€€  holoPos(8, Chip:toWorld(vec(12.3,4.6,7)))  holoModel(8, £cube£)  holoScale(8, vec(0.1,0.2,0.15))€  holoColor(8, Window) holoMaterial(8, £models/shiny£) holoAng(8,Chip:toWorld(ang(0,0,0)))€€   holoPos(9, Chip:toWorld(vec(12.3,-4.6,7)))  holoModel(9, £cube£)  holoScale(9, vec(0.1,0.2,0.15)) € holoColor(9, Window)  holoMaterial(9, £models/shiny£) holoAng(9,Chip:toWorld(ang(0,0,0))) €€ holoPos(10, Chip:toWorld(vec(5.1,0,10)))  holoModel(10, £cube£)  holoScale(10, vec(0.6,0.9,0.35))€  holoColor(10, Window)   holoMaterial(10, Glass) holoAng(10,Chip:toWorld(ang(0,0,0))) €€ holoPos(11, Chip:toWorld(vec(0,0,7)))  holoModel(11, £cube£)  holoScale(11, vec(2.1,0.95,0.32))€holoColor(11, Colour)   holoMaterial(11, Mat1) holoAng(11,Chip:toWorld(ang(0,0,0)))€€AdjustP = 0€AdjustY = 0€AdjustR = 0€OffsetZ = 1€AdjustX = 0€AdjustCamF = 6€AdjustCamZ = 8.5€€€}€}€}€  if(Alt & ~Alt){€€€            if(Type == 1){€                Entity:soundPlay(1,0,£vehicles/APC/apc_cruise_loop3.wav£)€                Grip = 0.4€                Power = 0.8€            }elseif(Type == 2){€                Entity:soundPlay(1,0,£vehicles/v8/v8_firstgear_rev_loop1.wav£)€                Grip = 2€                Power = 1.2€            }elseif(Type == 3){€                Entity:soundPlay(1,0,£vehicles/airboat/fan_motor_fullthrottle_loop1.wav£)€                Grip = 2€                Power = 1.2€            }elseif(Type == 4){€                Entity:soundPlay(1,0,£ambient/machines/fluorescent_hum_1.wav£)€                Grip = 1€                Power = 1€             }elseif(Type == 5){€		              Grip = 2.2€                Power = 0.6€                Entity:soundPlay(1,0,£ambient/machines/diesel_1.wav£)€            }€            Vector = Chip:toWorld(vec(0,0,10))€		  Turn = Chip:toWorld(ang(0,0,0)):yaw()€€        }€€   €    if(Drive==1){€        runOnTick(1)€      €           €       if(tickClk()){€           €        ############### Controls  ###€        RangerAngle = Angle - ang(AdjustP,AdjustY,AdjustR)€             FrontL =   rangerOffset(20,Position+RangerAngle:forward()*FWheelPos+RangerAngle:right()*-FWheelY,-RangerAngle:up()):distance()€             FrontR =   rangerOffset(20,Position+RangerAngle:forward()*FWheelPos+RangerAngle:right()*FWheelY,-RangerAngle:up()):distance()€             RearL =   rangerOffset(20,Position+RangerAngle:forward()*RWheelPos+RangerAngle:right()*-RWheelY,-RangerAngle:up()):distance()€             RearR =   rangerOffset(20,Position+RangerAngle:forward()*RWheelPos+RangerAngle:right()*RWheelY,-RangerAngle:up()):distance()€            €            Front = (FrontL + FrontR)/2€            Rear = (RearL + RearR)/2€            Left = (FrontL + RearL)/2€            Right = (FrontR + RearR)/2€            €        €        if(min(FrontL,FrontR,RearL,RearR)<3+OffsetZ){€         if(!(W|S)){€                Forward-=(inrange(Forward,-1,1) ? Forward : sign(Forward))€            }elseif(S& Forward >-240) {€                Forward-=1+3*(Forward>0)€            }elseif(W& Forward <700) {€                Forward+=1.5*Power*(Forward>248 ? 1-(Forward-350)/350 : 1)€            }      €            €                 €                 if(Forward>0){€                   Forward-=Inertia*sign(Inertia)*0.1€                }€                €                if(A|D){€                    €                   Dturn = clamp(Dturn+(A-D)*0.8,-45,45)€                    €                €                if((A-D) & sign(Dturn) != (A-D)){€                    Dturn -= (inrange(Dturn,-1.5,1.5) ? Dturn : sign(Dturn))*2}€                   €                 €            }elseif(Dturn<-0.5|Dturn>0.5){Dturn -= sign(Dturn)*1.5}€            else{Dturn = 0}€            €            €                          €     €        Turn=(Turn+((Dturn*0.04)*((Forward)<140 ? (Forward/140) : 1))-Inertia*0.04)€        €         €            Pitch = clamp(angnorm(Pitch + ((Front-Rear)*0.4)),-45,45)€            Roll = clamp(angnorm(Roll + ((Right-Left)*0.4)),-45,45)€    }else{Forward -= sign(Forward), Pitch = clamp(Pitch + 0.5,-20,20)}€        €        €        ###############€        €        if(Forward <= 250){Gear = 0.35  }€        elseif(Forward <=450){Gear = 0.3 }€        elseif(Forward <=550){Gear = 0.25 }€        elseif(Forward <=600){Gear = 0.2 }€        elseif(Forward >600){Gear = 0.15 }€        soundPitch(1,(Forward*sign(Forward)*Gear)+30)€        €€              if(A&Forward>50|D&Forward>50){€        Inertia =clamp(Inertia+(angnorm($Angle:yaw()*0.0003*Forward*Grip)),-Forward*0.03,Forward*0.03)}€           elseif(Inertia<-3|Inertia>3){Inertia -= sign(Inertia)*3}€           elseif(Inertia<-0.1|Inertia>0.1){Inertia -= sign(Inertia)*0.1}€           else{Inertia = 0}€€     if(!inrange(Inertia,-4,4)& Skid == 0){Skid = 1, Entity:soundPlay(2,0,£vehicles/v8/skid_highfriction.wav£)}€    elseif(inrange(Inertia,-4,4)){Skid=0, soundStop(2)}€    €      €€       Z = (3+OffsetZ + Z) -(clamp((Front+Rear+Left+Right)/4,-8,clamp(12-(Forward*0.04),4,10)))€                €     €            Angle = ang(Pitch,AdjustY+(Turn),Roll+AdjustR+clamp(angnorm(Inertia*0.2),-5,5))€            Vector =  Vector+((Angle-ang(0,Inertia*0.9,0)):forward()*Forward*0.01)€             €        Position = Vector+vec(0,0,Z)€          €        holoPos(1,Position)€        holoAng(1,Angle)€        €        €       €        ######## Camera€       €        if(CamClk == 0){€            CamPosition =  Position   + RangerAngle:forward() *(AdjustCamF) +(RangerAngle:up() *(AdjustCamZ))€            CamDir = RangerAngle:forward()€        }else{€            CamPosition =  Position  + (RangerAngle:forward() *-36) +((RangerAngle:up() *18))€            CamDir = (RangerAngle + ang(10,0,0)):forward() €        }€        €      €    €        ########## Spinning wheels€        €        Spin=angnorm(Spin+(Forward*0.12))€       €        if(AdjustR==90){€         holoAng(2, ang(Spin,Turn+Dturn,90))€         holoAng(3, ang(Spin,Turn+Dturn,90))€         holoAng(4, ang(Spin,Turn,90))€         holoAng(5, ang(Spin,Turn,90))€        }€        elseif(Car==14){€         holoAng(2, Entity:toWorld(ang(Spin,Dturn/2,90)))€         holoAng(3, Entity:toWorld(ang(Spin,Dturn/2,90)))€         holoAng(4, Entity:toWorld(ang(Spin,-Dturn/2,90)))€         holoAng(5, Entity:toWorld(ang(Spin,-Dturn/2,90)))€        }€        €        else{€         holoAng(2, Entity:toWorld(ang(Spin,Dturn,90)))€         holoAng(3, Entity:toWorld(ang(Spin,Dturn,90)))€         holoAng(4, Entity:toWorld(ang(Spin,0,90)))€         holoAng(5, Entity:toWorld(ang(Spin,0,90)))€        }€        €        if(Front|Left|Rear|Right){€            holoPos(2, Position+(vec(FWheelPos,FWheelY,-clamp((FrontL -2.1),-0.2,1))):rotate(RangerAngle))€            holoPos(3, Position+(vec(FWheelPos,-FWheelY,-clamp((FrontR -2.1),-0.2,1))):rotate(RangerAngle))€             holoPos(4,Position+(vec(RWheelPos,RWheelY,-clamp((RearL -2.1),-0.2,1))):rotate(RangerAngle))€            holoPos(5, Position+(vec(RWheelPos,-RWheelY,-clamp((RearR -2.1),-0.2,1))):rotate(RangerAngle))€           €            }€€€€        €        ####€ }   €        €    }else{soundStop(1),soundStop(2),soundStop(3)}€€    €     €        if(R & ~R){CamClk = !CamClk}€        €          if(Horn & ~Horn){€    Entity:soundPlay(3,0,£synth/saw.wav£)€         soundPitch(3,80)}€    elseif(!Horn &  ~Horn){soundStop(3)}€        €        ####### Brake lights€        if(S){€            if(Forward>=0){€                Brake = vec(255,10,10)€            }else{€                Brake = vec(220,220,220)€            }€        }else{€            Brake = vec(100,0,0)€        }€        €        if(S != ~S){holoColor(6, Brake),holoColor(7, Brake)}€        €    €    €"
65:"_original"
66:"Shift"
67:"Inertia"
68:"Spin"
69:"RearL"
70:"phoenix_storms/mat/mat_phx_metallic"
71:"Mat1"
72:"FWheelY"
73:"Left"
74:"Drive"
75:"AdjustR"
76:"Vector"
77:"Dturn"
78:"Type"
79:"models/XQM/Rails/gumball_1"
80:"Light"
81:"CamClk"
82:"RWheelY"
83:"RWheelPos"
84:"Power"
85:"Skid"
86:"OffsetZ"
87:"Front"
88:"AdjustP"
89:"AdjustX"
90:"FrontR"
91:"Spawn"
92:"debug/env_cubemap_model"
93:"Glass"
94:"RearR"
95:"Rear"
96:"phoenix_storms/car_tire"
97:"Tyre"
98:"Window"
99:"FrontL"
100:"Grip"
101:"FWheelPos"
102:"AdjustCamZ"
103:"RangerAngle"
104:"Turn"
105:"Gear"
106:"Angle"
107:"Roll"
108:"Colour"
109:"$Angle"
110:"Brake"
111:"ColourNum"
112:"AdjustCamF"
113:"AdjustY"
114:"Black"
115:"Forward"
116:"Right"
117:"Wheel"
118:"_vars"
119:"Index"
120:"Bone"
121:"Entity"
122:"Weld"
123:"forcelimit"
124:"NoCollide"
Saved:218
