@name Character Poser
@persist Model:string Scale Pos:vector Ang:angle [Parents HoloEntities]:array [Foot1 Foot2 Ref]:entity
@persist Height
@persist Curtime OldCurtime FrameTime Frames:table FPS [CurrentFrame NextFrame]:array OldFrame
if(duped()){reset()}
if(first()){
    #If you don't assign an angle to a bone for a frame, the animation will use the previous bone. All bones are initialized to ang(0,0,0) if not set on the first frame.
    #Create animation here---------------------------
    #Use the line below to sync with other animation e2s
    #FrameTime = curtime()
    FPS = 2
    Scale = 1
    #Frames is a table with arrays that are 1-10 angles, 11 is position local to the entity, 12 is if it should ground feet and hands, 13 is if it should center
    #Wave
    Frames = table(array(ang(),ang(),ang(),ang(),ang(),ang(),ang(0,0,-80),ang(0,0,80),ang(),ang()),array(8=ang(),10=ang(-45,90,-90)),array(10=ang(45,90,-90)),array(10=ang(-45,90,-90)))
    #Wave loop
    #Frames = table(array(7=ang(0,0,-80),8=ang(),10=ang(-45,90,-90)),array(10=ang(45,90,-90)),array(10=ang(-45,90,-90)))
    #[1-head,2-torso,3-left thigh,4-right thigh,5-left calf,6-right calf
    7-left uparm,8-right uparm,9-left forearm,10-right forearm]#
    #------------------------------------------------
    for(I=1,10){
        if(!Frames[1,array]:exists(I)){
            Frames[1,array][I,angle] = ang()
        }
    }
    if(!Frames[1,array]:exists(11)){
        Frames[1,array][11,vector] = vec()
    }
    Curtime = curtime()
    Model = "models/Barney.mdl"
    Pos = entity():pos()
    Ang = entity():angles()
    E = entity():isWeldedTo()
    enableConstraintUndo(0)
    entity():propFreeze(1)
    entity():constraintBreak()
    holoCreate(20,Pos)
    holoAng(20,Ang)
    holoModel(20,Model)
    holoClipEnabled(20,1,1)
    holoClipEnabled(20,2,1)
    holoClip(20,1,vec(0,0,63.4)*Scale,vec(0.5,0,1),0)
    holoClip(20,2,vec(8,0,63.4)*Scale,vec(-0.5,0,1),0)
    holoScale(20,vec(Scale))
    HoloEntities:pushEntity(holoCreate(1))
    holoAng(1,Ang)
    holoModel(1,"icosphere3")
    holoScale(1,vec(0.6,0.4,0.6)*Scale)
    holoColor(1,vec(210,144,117))
    HoloEntities:pushEntity(holoCreate(2,Pos))
    holoAng(2,Ang)
    holoModel(2,Model)
    holoClipEnabled(2,1,1)
    holoClipEnabled(2,2,1)
    holoClipEnabled(2,3,1)
    holoClipEnabled(2,4,1)
    holoClip(2,1,vec(0,0,63.4)*Scale,-vec(0.5,0,1),0)
    holoClip(2,2,vec(0,0,32)*Scale,vec(0,0,1),0)
    holoClip(2,3,vec(0,14,0)*Scale,vec(0,-1,-0.1),0)
    holoClip(2,4,vec(0,-14,0)*Scale,vec(0,1,-0.1),0)
    holoScale(2,vec(Scale))
    holoParent(2,entity())
    
    holoPos(1,HoloEntities[2,entity]:toWorld(vec(0,0,63.4)*Scale))
    holoParent(20,1)
    
    holoCreate(17,Pos)
    holoAng(17,Ang)
    holoModel(17,Model)
    holoClipEnabled(17,1,1)
    holoClipEnabled(17,2,1)
    holoClipEnabled(17,3,1)
    holoClipEnabled(17,4,1)
    holoClip(17,1,vec(0,0,32)*Scale,vec(0,0,-1),0)
    holoClip(17,2,vec(0,10,0)*Scale,vec(0,-1,0),0)
    holoClip(17,3,vec(),vec(0,1,0),0)
    holoClip(17,4,vec(0,0,20)*Scale,vec(0,0,1),0)
    holoScale(17,vec(Scale))
    HoloEntities:pushEntity(holoCreate(3,HoloEntities[2,entity]:toWorld(vec(0.25,3.5,32)*Scale)))
    holoAng(3,Ang)
    holoModel(3,"icosphere3")
    holoParent(17,3)
    holoScale(3,vec(0.725,0.6,0.725)*Scale)
    holoColor(3,vec(76,89,79)*0.5)
    
    holoCreate(5,HoloEntities[2,entity]:toWorld(vec(0,4,20)*Scale))
    holoModel(5,"icosphere3")
    holoParent(5,3)
    holoScale(5,vec(0.55,0.5,0.55)*Scale)
    holoColor(5,vec(76,89,79)*0.8)
    holoCreate(18,Pos)
    holoAng(18,Ang)
    holoModel(18,Model)
    holoClipEnabled(18,1,1)
    holoClipEnabled(18,2,1)
    holoClipEnabled(18,3,1)
    holoClipEnabled(18,4,1)
    holoClip(18,1,vec(0,0,32)*Scale,vec(0,0,-1),0)
    holoClip(18,2,vec(0,-10,0)*Scale,vec(0,1,0),0)
    holoClip(18,3,vec(),vec(0,-1,0),0)
    holoClip(18,4,vec(0,0,20)*Scale,vec(0,0,1),0)
    holoScale(18,vec(Scale))
    HoloEntities:pushEntity(holoCreate(4,HoloEntities[2,entity]:toWorld(vec(0.25,-3.5,32)*Scale)))
    holoAng(4,Ang)
    holoModel(4,"icosphere3")
    holoParent(18,4)
    holoScale(4,vec(0.725,0.6,0.725)*Scale)
    holoColor(4,vec(76,89,79)*0.5)
    HoloEntities:pushEntity(holoEntity(5))
    HoloEntities:pushEntity(holoCreate(6,HoloEntities[2,entity]:toWorld(vec(0,-4,20)*Scale)))
    holoAng(6,Ang)
    holoModel(6,"icosphere3")
    holoParent(6,4)
    holoScale(6,vec(0.55,0.5,0.55)*Scale)
    holoColor(6,vec(76,89,79)*0.8)
    Foot1 = holoCreate(15,Pos)
    holoAng(15,Ang)
    holoModel(15,Model)
    holoClipEnabled(15,1,1)
    holoClipEnabled(15,2,1)
    holoClip(15,1,vec(0,0,20)*Scale,vec(0,0,-1),0)
    holoClip(15,2,vec(),vec(0,1,0),0)
    holoParent(15,5)
    holoScale(15,vec(Scale))
    Foot2 = holoCreate(16,Pos)
    holoAng(16,Ang)
    holoModel(16,Model)
    holoClipEnabled(16,1,1)
    holoClipEnabled(16,2,1)
    holoClip(16,1,vec(0,0,20)*Scale,vec(0,0,-1),0)
    holoClip(16,2,vec(),vec(0,-1,0),0)
    holoParent(16,6)
    holoScale(16,vec(Scale))
    holoCreate(11,Pos)
    holoAng(11,HoloEntities[2,entity]:toWorld(ang(0,0,50)))
    holoModel(11,Model)
    holoClipEnabled(11,1,1)
    holoClipEnabled(11,2,1)
    holoClip(11,1,vec(0,-35,0)*Scale,vec(0,-1,1),0)
    holoClip(11,2,vec(0,14,0)*Scale,vec(0,1,0.1),0)
    holoScale(11,vec(Scale))
    HoloEntities:pushEntity(holoCreate(7,HoloEntities[2,entity]:toWorld(vec(-2,7,57)*Scale)))
    holoAng(7,Ang)
    holoModel(7,"icosphere3")
    holoScale(7,vec(0.6)*Scale)
    holoColor(7,vec(200,200,210))
    holoPos(11,HoloEntities[2,entity]:toWorld(vec(-2,7,57)*Scale)-holoEntity(11):toWorldAxis(vec(-2,7,57)*Scale))
    holoParent(11,7)
    holoCreate(12,Pos)
    holoAng(12,HoloEntities[2,entity]:toWorld(ang(0,0,-50)))
    holoModel(12,Model)
    holoClipEnabled(12,1,1)
    holoClipEnabled(12,2,1)
    holoClip(12,1,vec(0,35,0)*Scale,vec(0,1,1),0)
    holoClip(12,2,vec(0,-14,0)*Scale,vec(0,-1,0.1),0)
    holoScale(12,vec(Scale))
    HoloEntities:pushEntity(holoCreate(8,HoloEntities[2,entity]:toWorld(vec(-2,-7,57)*Scale)))
    holoAng(8,Ang)
    holoModel(8,"icosphere3")
    holoScale(8,vec(0.6)*Scale)
    holoColor(8,vec(200,200,210))
    holoPos(12,HoloEntities[2,entity]:toWorld(vec(-2,-7,57)*Scale)-holoEntity(12):toWorldAxis(vec(-2,-7,57)*Scale))
    holoParent(12,8)
    holoCreate(13,Pos)
    holoAng(13,HoloEntities[2,entity]:toWorld(ang(0,0,50)))
    holoModel(13,Model)
    holoClipEnabled(13,1,1)
    holoClipEnabled(13,2,1)
    holoClip(13,1,vec(0,-35,0)*Scale,vec(0,1,-1),0)
    holoClip(13,2,vec(0,10,0)*Scale,vec(0,1,0),0)
    holoScale(13,vec(Scale))
    HoloEntities:pushEntity(holoCreate(9,HoloEntities[2,entity]:toWorld(vec(-2,18,58)*Scale)))
    holoAng(9,Ang)
    holoModel(9,"icosphere3")
    holoScale(9,vec(0.4)*Scale)
    holoColor(9,vec(50))
    holoPos(13,HoloEntities[2,entity]:toWorld(vec(-2,18,58)*Scale)-holoEntity(13):toWorldAxis(vec(-2,15,49.2)*Scale))
    holoParent(13,9)
    holoCreate(14,Pos)
    holoAng(14,HoloEntities[2,entity]:toWorld(ang(0,0,-50)))
    holoModel(14,Model)
    holoClipEnabled(14,1,1)
    holoClipEnabled(14,2,1)
    holoClip(14,1,vec(0,35,0)*Scale,vec(0,-1,-1),0)
    holoClip(14,2,vec(0,-10,0)*Scale,vec(0,-1,0),0)
    holoScale(14,vec(Scale))
    HoloEntities:pushEntity(holoCreate(10,HoloEntities[2,entity]:toWorld(vec(-2,-18,58)*Scale)))
    holoAng(10,Ang)
    holoModel(10,"icosphere3")
    holoScale(10,vec(0.4)*Scale)
    holoColor(10,vec(50))
    holoPos(14,HoloEntities[2,entity]:toWorld(vec(-2,-18,58)*Scale)-holoEntity(14):toWorldAxis(vec(-2,-15,49.2)*Scale))
    holoParent(14,10)
    
    holoParent(1,2)
    holoParent(3,2)
    holoParent(4,2)
    holoParent(5,3)
    holoParent(6,4)
    holoParent(7,2)
    holoParent(8,2)
    holoParent(9,7)
    holoParent(10,8)
    Parents = array(2,2,2,2,3,4,2,2,7,8)
    Ref = holoCreate(0)
    holoAlpha(0,0)
    function poseAng(Index,Angle:angle){
        switch(Index){
            default,break
            case 1, holoAng(1,HoloEntities[2,entity]:toWorld(Angle)) break
            case 2, holoAng(0,Ang)
            holoPos(2,HoloEntities[2,entity]:toWorld(HoloEntities[2,entity]:boxCenter()*Scale))
            holoAng(2,Ref:toWorld(Angle))
            holoPos(2,HoloEntities[2,entity]:toWorld(HoloEntities[2,entity]:boxCenter()*-Scale)) break
            case 3, holoAng(3,HoloEntities[2,entity]:toWorld(Angle)) break
            case 4, holoAng(4,HoloEntities[2,entity]:toWorld(Angle)) break
            case 5, holoAng(5,HoloEntities[3,entity]:toWorld(Angle)) break
            case 6, holoAng(6,HoloEntities[4,entity]:toWorld(Angle)) break
            case 7, holoAng(7,HoloEntities[2,entity]:toWorld(Angle)) break
            case 8, holoAng(8,HoloEntities[2,entity]:toWorld(Angle)) break
            case 9, holoAng(9,HoloEntities[7,entity]:toWorld(Angle)) break
            case 10, holoAng(10,HoloEntities[8,entity]:toWorld(Angle)) break
        }
    }
    function poseAngW(Index,Angle:angle){
        switch(Index){
            default,break
            case 1, holoAng(1,Angle) break
            case 2, holoPos(2,HoloEntities[2,entity]:toWorld(HoloEntities[2,entity]:boxCenter()*Scale)) holoAng(2,Angle) holoPos(2,HoloEntities[2,entity]:toWorld(HoloEntities[2,entity]:boxCenter()*-Scale)) break
            case 3, holoAng(3,Angle) break
            case 4, holoAng(4,Angle) break
            case 5, holoAng(5,Angle) break
            case 6, holoAng(6,Angle) break
            case 7, holoAng(7,Angle) break
            case 8, holoAng(8,Angle) break
            case 9, holoAng(9,Angle) break
            case 10, holoAng(10,Angle) break
        }
    }
    function ground(){
        holoAng(0,Ang)
        V1 = Ref:toWorldAxis(Ref:toLocalAxis(Pos-holoEntity(15):pos())*vec(0,0,1))
        V2 = Ref:toWorldAxis(Ref:toLocalAxis(Pos-holoEntity(16):pos())*vec(0,0,1))
        if(V1:length()>V2:length()){holoPos(2,HoloEntities[2,entity]:pos()+V2)}
        else{holoPos(2,HoloEntities[2,entity]:pos()+V1)}
    }
    function groundEnds(){
        holoAng(0,Ang)
        Z1 = Ref:toLocalAxis(Pos-holoEntity(15):pos()):z()
        Z2 = Ref:toLocalAxis(Pos-holoEntity(16):pos()):z()
        Z3 = Ref:toLocalAxis(Pos-HoloEntities[9,entity]:toWorld(vec(0,15,0))):z()
        Z4 = Ref:toLocalAxis(Pos-HoloEntities[10,entity]:toWorld(vec(0,-15,0))):z()
        switch(array(Z1,Z2,Z3,Z4):maxIndex()){
            case 1, holoPos(2,HoloEntities[2,entity]:pos()+Ref:toWorldAxis(vec(0,0,Z1))) break
            case 2, holoPos(2,HoloEntities[2,entity]:pos()+Ref:toWorldAxis(vec(0,0,Z2))) break
            case 3, holoPos(2,HoloEntities[2,entity]:pos()+Ref:toWorldAxis(vec(0,0,Z3))) break
            case 4, holoPos(2,HoloEntities[2,entity]:pos()+Ref:toWorldAxis(vec(0,0,Z4))) break
        }
    }
    
    function number lerp(A,B,Percent){local Perc = clamp(Percent,0,1) return A*(1-Perc)+B*Perc}
    function angle lerp(A:angle,B:angle,Percent){local Perc = clamp(Percent,0,1) return A*(1-Perc)+B*Perc}
    function number lerpSin(A,B,Percent){
        local Perc = 0
        if(Percent>=0.5){Perc = 1-sin(clamp(Percent,0,1)*180)/2}
        else{Perc = sin(clamp(Percent,0,1)*180)/2}
        return A*(1-Perc)+B*Perc
    }
    function angle lerpSin(A:angle,B:angle,Percent){
        local Perc = 0
        if(Percent>=0.5){Perc = 1-sin(clamp(Percent,0,1)*180)/2}
        else{Perc = sin(clamp(Percent,0,1)*180)/2}
        return A*(1-Perc)+B*Perc
    }
    holoParent(2,entity())
    runOnTick(1)
    StartTime = systime()
    for(I=1,10){
        if(I!=2){
            holoAng(I,HoloEntities[Parents[I,number],entity]:toWorld(Frames[1,array][I,angle]))
        }
        CurrentFrame[I,angle] = Frames[1,array][I,angle]
    }
    CurrentFrame[11,vector] = Frames[1,array][11,vector]
    NextFrame = CurrentFrame:clone()
    for(I=1,10){
        if(Frames[2,array]:exists(I)){
            NextFrame[I,angle] = Frames[2,array][I,angle]
        }
    }
    if(Frames[2,array]:exists(11)){
        NextFrame[11,vector] = Frames[2,array][11,vector]
    }
    OldFrame = 1
}
Ang = entity():angles()
Pos = entity():pos()
OldCurtime = Curtime
Curtime = curtime()
T = Curtime-OldCurtime
FrameTime += T
FrameLength = 1/FPS
AnimLength = Frames:count()/FPS
FrameTime -= AnimLength*floor(FrameTime/AnimLength)
CF = floor(FrameTime/FrameLength)+1
if(CF!=OldFrame){
    OldFrame = CF
    NF = CF+1
    if(NF>Frames:count()){NF = 1}
    CurrentFrame = NextFrame:clone()
    for(I=1,10){
        if(Frames[NF,array]:exists(I)){
            NextFrame[I,angle] = Frames[NF,array][I,angle]
        }
    }
    if(Frames[2,array]:exists(11)){
        NextFrame[11,vector] = Frames[2,array][11,vector]
    }
}
Lerp = 1-CF+FrameTime*FPS
for(I=1,10){
    if(I==2){
        holoAng(I,entity():toWorld(slerp(quat(CurrentFrame[I,angle]),quat(NextFrame[I,angle]),Lerp):toAngle()))
    }else{
        holoAng(I,HoloEntities[Parents[I,number],entity]:toWorld(slerp(quat(CurrentFrame[I,angle]),quat(NextFrame[I,angle]),Lerp):toAngle()))
    }
}
V = CurrentFrame[11,vector]+(NextFrame[11,vector]-CurrentFrame[11,vector])*Lerp
holoPos(2,entity():toWorld(V))
if(Frames[CF,array][12,number]){
    #Ground feet and hands
    holoAng(0,Ang)
    Z1 = Ref:toLocalAxis(Pos-holoEntity(15):pos()):z()
    Z2 = Ref:toLocalAxis(Pos-holoEntity(16):pos()):z()
    Z3 = Ref:toLocalAxis(Pos-HoloEntities[9,entity]:toWorld(vec(0,15,0))):z()
    Z4 = Ref:toLocalAxis(Pos-HoloEntities[10,entity]:toWorld(vec(0,-15,0))):z()
    switch(array(Z1,Z2,Z3,Z4):maxIndex()){
        case 1, holoPos(2,HoloEntities[2,entity]:pos()+Ref:toWorldAxis(vec(0,0,Z1))) break
        case 2, holoPos(2,HoloEntities[2,entity]:pos()+Ref:toWorldAxis(vec(0,0,Z2))) break
        case 3, holoPos(2,HoloEntities[2,entity]:pos()+Ref:toWorldAxis(vec(0,0,Z3))) break
        case 4, holoPos(2,HoloEntities[2,entity]:pos()+Ref:toWorldAxis(vec(0,0,Z4))) break
    }
}
if(Frames[CF,array][13,number]){
    #Center
    holoPos(2,HoloEntities[2,entity]:toWorld(holoScale(2)*-HoloEntities[2,entity]:boxCenter()))
}
