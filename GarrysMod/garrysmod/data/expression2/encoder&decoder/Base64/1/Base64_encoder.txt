@name Base64

if( first() )
{
    function string asciiTo8Bit(Input:number)
    {
        local Result = ""   
        local S = 128
        local N = Input
        for(I = 1, 8)
        {
            if(N / S >= 1)
            {
                Result += 1   
                N -= S
            }   
            else
            {
                Result += 0   
            }
            
            S /= 2
        }    
        return Result  
    }
    
    function number sixBitToInteger(Input:string)
    {
        local Bits = Input:explode("")
        
        local S = 32
        local Result = 0
        foreach(I, Bit:string = Bits)
        {
            local B = Bit:toNumber()
            
            if(B == 1)
            {
                Result += S    
            }         
            
            S /= 2
        }     

        return Result 
    }
    
    function array bitCollectionTo6BitArray(ByteArr:string)
    {
        local Bits = ByteArr:explode("")

        local Result = array()
        
        local C = 1
        local SBuilder = ""
        foreach(I, Bit:string = Bits)
        {
            SBuilder += Bit
            
            C++
            if(C > 6)
            {
                Result:pushString(SBuilder)
                SBuilder = ""
                C = 1   
            }
        }
        
        return Result
    }
    
    function string toBase64(Input:string)
    {
        if(Input:replaceRE("%s", "") == "")
        {
            return ""   
        }    
        
        local Chars = Input:explode("")
        
        local BitCollection = ""
        foreach(I, Char:string = Chars)
        {
            local Byte = asciiTo8Bit(toByte(Char))
            BitCollection += Byte      
        }
        
        local SixBitArray = bitCollectionTo6BitArray(BitCollection)
        local B64Table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=":explode("")       
         
        local Result = ""   
        foreach(I, SBit:string = SixBitArray)
        {
            local Index = sixBitToInteger(SBit)
            Result += B64Table[Index + 1, string]
        }
        
        return Result + "="
    }
}

print(toBase64("A total of 20 minutes of coding. Code looks like shit."))
