B64Table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=":explode("")
B64TableI = invert(B64Table)

function string string:b64_encode() {
    local Output = ""
    for(I=1,This:length(),3) {
        local Lower = toByte(This[I])
        local Middle = toByte(This[I+1])
        local Upper = toByte(This[I+2])
        Output = format(
            "%s%s%s%s%s",
            Output,
            B64Table[1+Lower>>2, string],
            B64Table[1+(Lower&3)<<4+Middle>>4, string],
            B64Table[Middle ? 1+(Middle&15)<<2+Upper>>6 : 37, string],
            B64Table[Upper ? 1+Upper&63 : 37, string],
        )
    }
    return Output
}

function string string:b64_decode() {
    local Output = ""
    for(I=1,This:length(),4) {
        local Lower = B64TableI[This[I], number]-1
        local MiddleL = B64TableI[This[I+1], number]-1
        local MiddleU = (B64TableI[This[I+2], number]-1)%36
        local Upper = (B64TableI[This[I+3], number]-1)%36
        Output = format(
            "%s%c%c%c",
            Output,
            Lower<<2+MiddleL>>4,
            (MiddleL&15)<<4+MiddleU>>2,
            (MiddleU&3)<<6+Upper,
        )
    }
    if(This:right(2)=="==") {
        return Output:sub(1,-3)
    }
    if(This:right(1)=="=") {
        return Output:sub(1,-2)
    }
    return Output
}