@name Cloudmaker
@inputs 
@outputs Owner:entity ID Animator Weather:string [Colors Parts Limits]:table [Dropositions DropSets]:array Distance
@persist 
@model models/Combine_Helicopter/helicopter_bomb01.mdl
 
if(first() | duped() | dupefinished())
{
    ###WEATHERS:  rainy, normal, thunder###
    Weather = "thunder"
    Owner = owner()
    #Owner = findPlayerByName("Wid")
    #######################################
 
    entity():setAlpha(0)
    entity():setAng(ang(0))
 
    rangerPersist(1)
    rangerHitEntities(0)
 
    runOnTick(1)
 
    ID = 1
 
    Animator = 0    
 
    Colors["cloud_normal" ,vector] = vec(180,180,220)
    Colors["cloud_rainy"  ,vector] = vec(120,120,140)
    Colors["cloud_thunder",vector] = vec(80,80,90)
 
    Colors["drops_normal" ,vector] = vec(180,180,220)
    Colors["drops_rainy"  ,vector] = vec(80,80,140)
    Colors["drops_thunder",vector] = vec(80,80,120)
 
    CL_COLOR = Colors["cloud_" + Weather,vector]
    DR_COLOR = Colors["drops_" + Weather,vector]
 
    DR_CNT = 25
    DR_OFF = vec(-17,-5,0)
 
    ALPHA = 255
 
    ###BASE
 
    Limits["cloud_min",number] = ID
 
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(-8,10,3)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(0.7))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(-12,2,0)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(-5,4,5)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(15,8,6)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(0.7))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(0,13,2)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1.1))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(8,15,0)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1.3))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(17,5,-4)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1.6))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(12,-2,-4)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1.2))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(2,-2,-2)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(-5,-2,0)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(0.8))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(-5,1,-6)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(0.7))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(5,4,4)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1.6))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(7,7,-7)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1.6))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
    ID++
    holoCreate(ID)
    holoPos(ID, entity():toWorld(vec(-5 ,7,-2)))
    holoAng(ID, entity():toWorld(ang(0,0,0)))
    holoScale(ID, vec(1.3))
    holoColor(ID, CL_COLOR, ALPHA)
    holoModel(ID, "hq_sphere")
    holoParent(ID, entity())
 
    Limits["cloud_max",number] = ID
 
    ID++
 
    ###DROPS
 
    Limits["drops_min",number] = ID
 
    Count = round(sqrt(DR_CNT))
 
    for(X = 1, Count)
    {
        for(Y = 1, Count)
        {
            DropSets[ID,number] = randint(0,100)
 
            Pos = (vec(X * 1.2, Y * 0.6, 0) * 5 + DR_OFF + randvec(0,5)):setZ(-10)
            Dropositions[ID,vector] = Pos
 
            holoCreate(ID)
            holoPos(ID, entity():toWorld(Pos))
            holoAng(ID, entity():toWorld(ang(0,0,0)))
            holoScale(ID, vec(0.05,0.05,0.8))
            holoColor(ID, DR_COLOR, ALPHA)
            holoModel(ID, "hq_sphere")
            holoDisableShading(ID, 1)
            holoParent(ID, entity())
            ID++
        }
    }
 
    Limits["drops_max",number] = ID
 
    function number number:under1()
    {
        if(This > 1)
        {
            return This - 1
        }
        else
        {
            return This
        }
    }
 
}
 
while(perf())
{
    if(Animator < 1)
    {
        Animator += 0.01
    }
    else
    {
        Animator = 0
    }
 
    RD = rangerOffset(200, entity():pos(), vec(0,0,-1))
    Distance = RD:distance() - 10
 
    for(A = Limits["drops_min",number], Limits["drops_max",number])
    {
        holoPos(A, entity():toWorld(Dropositions[A,vector] - vec(0, 0, (Animator + DropSets[A,number] / 100):under1() * Distance)))
    }
 
    entity():setPos(Owner:pos() + vec(0,-10,0) + vec(0,0,130 + sin(Animator * 360) * 5))
}