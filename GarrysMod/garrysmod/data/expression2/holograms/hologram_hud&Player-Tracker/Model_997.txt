@name Model_997
@persist R:array PPos:array X Y Z N D Name:string Notif Tar Tra A V
@autoupdate
#Built by GliTcH
runOnTick(1)
E = entity()
if (first()) {  #First/Variables
    print("   [Starting M_997]")
    print("   [Assist]Type .options to view available commands")
    entity():propNotSolid(1)
    entity():setAlpha(0)
    PPos = array()
    Name = owner():name()
    Notif = 1
    Tar = 0
    Tra = 0
    A = 0
    V = 0
    Z = 1
    D = 0
    N = 0
    X = 0
    Y = 0
    R = players()
    holoCreate(59)
    holoScale(59,vec(13,13,0.05))
    holoModel(59,"hq_tube_thin")
}
if (R:count() > 0) { #Tagging/Holopositions
    for(J=1, R:count()) {
        A = A + 25
        if (first()) {
            holoCreate(J)
            holoModel(J,"hq_tube_thick")
            holoScale(J,vec(1.5,1.5,0.025))
            holoColor(J,vec(random(0,255),random(100,255),random(0,255)))
        }
        if (J==Tar | J==Tra) {
        }
        else {
            holoVisible(J,players(),1)
            holoScale(J,vec(1.5,1.5,0.025))
            holoPos(J,entity():pos()+vec(0,0,A))
            holoModel(J,"hq_tube_thick")
        }
        if (J==R:count()) {
            A = 0
        }
    }
    for(I=1, R:count()) {  
    PPos[I,vector] = R[I,entity]:pos()
    }
} 

N = N + 2.2     #Orbit
X = cos(N) * 67
Y = sin(N) * 67
if (Tar > 0) {
}
else {
    entity():setPos(owner():pos()+vec(Y,X,Z))
    entity():setAng(ang(0,0,0))
}

for(P=1,players():count()) {
    if (holoEntity(P)) {
    }
    else {
        print("[Error]creating holo due to gain/loss of players")
        reset()
    }
}

D=D+0.8
for (F=1,R:count()) {
holoAng(F,ang(0,D,0))
}

holoPos(59,owner():pos())

if (owner():health()) {   #Health Notifications
    holoScale(59,vec(owner():health()*0.13,owner():health()*0.13,0.05))
    holoColor(59,vec(100-owner():health(),100+owner():health(),0))
    if (first()) {
    }
    else {
    if (changed(owner():health()) & Notif == 1) {
        if (owner():health() <=  75 & owner():health() > 0) {
            print(Name+", your health has diminished to "+owner():health())
        }
        if (first()) {
        }
        else {
            if (changed(owner():isAlive()) & owner():isAlive() == 0) {
                print("[Please don't partake in dangerous activities]")
            }
        }
    }
    } 
}
if (Tra > 0) {  #Tra/Tar holograms
    Distance = owner():pos():distance(R[Tra,entity]:pos())
    if (R[Tra,entity]:isAlive() == 1) {
        if (V == 0) {
            holoVisible(Tra,players(),0)
            holoVisible(Tra,owner(),1)
        }
        if (V == 1) {
            holoVisible(Tra,players(),1)
        }
        holoModel(Tra, "hq_tube_thin")
        holoScale(Tra,vec(Distance*3.5,Distance*3.5,0.025))
        holoPos(Tra, R[Tra,entity]:pos()+vec(0,0,40))
    }
}
elseif (Tar > 0) {
    if (R[Tar,entity]:isAlive() == 1) {
        holoModel(Tra, "hq_tube_thin")
        holoScale(Tar, vec(R[Tar,entity]:health()*0.035,R[Tar,entity]:health()*0.035,0.025))
        holoPos(Tar, owner():pos()+vec(cos(N)*88,sin(N)*88,5))
        if (changed(R[Tar,entity]:health())) {
            print("["+R[Tar,entity]:name()+"'s health has diminished to "+R[Tar,entity]:health()+"]")
        }
    }
}

runOnChat(1)
if (chatClk(owner())) {     #ChatCommands
    LastSaid = lastSaid():explode(" ")
    if (LastSaid[1,string]:lower() == ".options") {
        print("   .index [lists currently online players]")
        print("   .notification [True/False]")
        print("   .nickname [prefered name]")
        print("   .tag [player/index number]")
        print("   .identify [player/index number]")
        print("   .default")
        print("   .personality [?]")
    }
    if (LastSaid[1,string]:lower() == ".index") {
        for(K=1,R:count()) {
            print("   "+K+"."+R[K,entity]:name())
        }
    }
    if (LastSaid[1,string]:lower() == ".notification") {
        if (LastSaid[2,string]:lower() == "true") {
            Notif = 1
            print("[Setting notifications True]")
        }
        else {
            Notif = 0
            print("[Setting notifications False]")
        }
    }
    if (LastSaid[1,string]:lower() == ".nickname" | LastSaid[1,string]:lower() == ".name") {
        if (LastSaid[2,string]:lower() == "") {
            print("["+Name+", you did not input a name]")
        }
        else {
            Name = LastSaid[2,string]
            print("[New name set as "+Name+"]")
        }
    }
    if (LastSaid[1,string]:lower() == ".tag") {
        if (LastSaid[2,string]:lower() == "") {
            Tar = 0
        }
        else {
            for(L=1,R:count()) {
                if (R[L,entity]:name():lower() == LastSaid[2,string]:lower()) {
                    Tar = L
                    print("[Name recognized, health/armor now visible]")
                    break
                }
                if (R[LastSaid[2,string]:toNumber(),entity]) {
                    Tar = LastSaid[2,string]:toNumber()
                    print("[Index recognized, health/armor now visible]")
                    break
                }
            }
        }
    }
    if (LastSaid[1,string]:lower() == ".identify" | LastSaid[1,string]:lower() == ".id") {
        for(G=1,R:count()) {
            if (R[G,entity]:name():lower() == LastSaid[2,string]:lower()) {
                Tra = G
                print("[Name recognized, target now highlighted]")
                break
            }
            if (R[LastSaid[2,string]:toNumber(),entity]) {
                Tra = LastSaid[2,string]:toNumber()
                print("[Index recognized, target now highlighted]")
                break
            }
        }
    }
    if (LastSaid[1,string]:lower() == ".default") {
        Tar = 0
        Notif = 1
        Name = owner():name()
        Tra = 0
        V = 0
        print("[Default settings applied]")
    }
    if (LastSaid[1,string]:lower() == ".personality") {
        print("[Error]Specified command is not specified")
    }
    if (LastSaid[1,string]:lower() == ".visible" | LastSaid[1,string]:lower() == ".v") {
        if (LastSaid[2,string]:lower() == "true") {
            V = 1
        }
        if (LastSaid[2,string]:lower() == "") {
            V = 0
        }
    }
}