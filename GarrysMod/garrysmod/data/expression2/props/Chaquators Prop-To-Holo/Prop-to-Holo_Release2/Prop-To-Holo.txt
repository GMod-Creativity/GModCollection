@name Prop-to-holo
@persist [Ent Model Color Material Pos Ang]:array #Array
@persist [Base]:entity #Entity
@persist [Version Wep Name ModelStr ColorStr MatStr PosStr AngStr FinalText]:string #String
@persist Ready ArrayAdd Debug Int
interval(50)
if(first())
{
    Int = 1
    Debug = 1
    
    runOnChat(1)
    print("] Welome to Prop-to-holo!")
    print("] All files are saved in garrysmod/garrysmod/data/Expression2/e2shared")
    print("] To save files, type \"-save\". To clear everything selected, type \"-clear\".")
    print("] For the following functions to work, you must have your Gravit   y Gun out.")
    print("] -Press E to select/de-select props.")
    print("] -Press R to select your base prop.")
    print("] When saving files, you must have a base prop selected, or your file will not be saved.")
    
    Wep = "weapon_physcannon"
}

if(!Ready)
{
    #Chat commands
    if(chatClk(owner()))
    {
        CR = owner():lastSaid():explode(" ")
        if(CR[1,string]=="-save")
        {
            hideChat(1)
            if(!CR[2,string]:lower():find(".txt"))
            {
                Name = CR[2,string]+".txt"
            }else
            {
                Name = CR[2,string]
            }
            Ready = 1
            print("] Preparing save")
        }
        if(CR[1,string]=="-clear")
        {
            hideChat(1)
            for(I=1,Ent:count())
            {
                ATE = Ent[I,entity]
                ATE:setColor(Color[I,vector4])
            }
            Ent:clear()
            Model:clear()
            Color:clear()
            Material:clear()
            Pos:clear()
            Ang:clear()
            Base = noentity()
            print("] Everything cleared")
        }
    }
    
    #Selecting
    if(owner():weapon():type()==Wep)
    {
        Pressed = changed(owner():keyUse())||changed(owner():keyReload())
        if(Pressed)
        {
            TE = owner():aimEntity()
            if(owner():keyUse())
            {
                if(Ent:count()>0)
                {
                    for(I=1,Ent:count())
                    {
                        ATE = Ent[I,entity]
                        if(TE == ATE)
                        {
                            ArrayAdd = 0
                            ATE:setColor(Color[I,vector4])
                            Ent:remove(I)
                            Model:remove(I)
                            Color:remove(I)
                            Material:remove(I)
                            Pos:remove(I)
                            Ang:remove(I)
                            print("] Deselecting prop")
                            if(Debug)
                            {
                                hint(Ent:count():toString(),1)
                            }
                            break
                        }else
                        {
                            ArrayAdd = 1
                        }
                    }
                }else
                {
                    ArrayAdd = 1
                }
                if(ArrayAdd)
                {
                    if(Base:isValid())
                    {
                        if(TE:type()=="prop_physics")
                        {
                            Ent:pushEntity(TE)
                            Model:pushString(TE:model())
                            Color:pushVector4(TE:getColor4())
                            if(TE:getMaterial():length()<2)
                            {
								                        Material:pushString(" ")
							                     }else
							                     {
								                        Material:pushString(TE:getMaterial())
							                     }
                            Pos:pushVector(Base:toLocal(TE:pos()))
                            Ang:pushAngle(Base:toLocal(TE:angles()))
                            TE:setColor(0,255,0,200)
                            print("] Selecting prop")
                            if(Debug)
                            {
                                hint(Ent:count():toString(),1)
                            }
                        }
                    }else
                    {
                        print("] You must select a base prop before you can select a prop.")
                    }
                }else
                {
                }
            }
            if(owner():keyReload())
            {
                if(TE!=Base)
                {
                    if(!TE:isPlayer()&!TE:isWeapon()&!TE:isNPC())
                    {
                        Base:setColor(255,255,255,255)
                        Base = TE
                        Base:setColor(255,0,0,200)
                        print("] Selecting base prop")
                    }
                    else
                    {
                        print("] You cannot select props that are players, weapons, or NPCs. You may select E2s, props, etc instead.")
                    }
                }else
                {
                    Base:setColor(255,255,255,255)
                    Base = noentity()
                    print("] Deselecting base prop")
                }
            }
        }
    }
}else
{
    #Readiness... fuck
    if(Int<=Ent:count())
    {
        print("] Preparing entity "+Int+"/"+Ent:count())
        if(Int==1)
        {
            ModelStr = ModelStr+"\""+Model[Int,string]+"\""
            ColorStr = ColorStr+"vec4("+round(Color[Int,vector4],4):toString():replace("[",""):replace("]","")+")"
            MatStr = MatStr+"\""+Material[Int,string]+"\""
            PosStr = PosStr+"vec("+round(Pos[Int,vector],4):toString():replace("[",""):replace("]","")+")"
            AngStr = AngStr+"ang("+round(Ang[Int,angle],4):toString():replace("[",""):replace("]","")+")"
        }else
        {
            ModelStr = ModelStr+",\""+Model[Int,string]+"\""
            ColorStr = ColorStr+","+"vec4("+round(Color[Int,vector4],4):toString():replace("[",""):replace("]","")+")"
            MatStr = MatStr+",\""+Material[Int,string]+"\""
            PosStr = PosStr+","+"vec("+round(Pos[Int,vector],4):toString():replace("[",""):replace("]","")+")"
            AngStr = AngStr+","+"ang("+round(Ang[Int,angle],4):toString():replace("[",""):replace("]","")+")"
        }
        Int++
    }else
    {
        
FinalText = "@name "+Name:replace(".txt","")+"
@model "+Base:model()+"
@persist [P2H_Mod P2H_Color P2H_Mat P2H_Pos P2H_Ang]:array P2H_Int P2H_Offset P2H_Ready
if(first())
{
    P2H_Int = 0
    P2H_Offset = 0
    runOnTick(1)
    P2H_Mod = array("+ModelStr+")
    P2H_Color = array("+ColorStr+")
    P2H_Mat = array("+MatStr+")
    P2H_Pos = array("+PosStr+")
    P2H_Ang = array("+AngStr+")
}

if(!P2H_Ready)
{
    while(holoCanCreate() & perf() & P2H_Int < P2H_Mod:count())
    {
        P2H_Int++
        local P2H_TempInt = P2H_Int+P2H_Offset
        holoCreate(P2H_TempInt,entity():toWorld(P2H_Pos[P2H_Int,vector]),vec(1),entity():toWorld(P2H_Ang[P2H_Int,angle]))
        holoColor(P2H_TempInt,P2H_Color[P2H_Int,vector4])
        holoModel(P2H_TempInt,P2H_Mod[P2H_Int,string])
        holoMaterial(P2H_TempInt,P2H_Mat[P2H_Int,string])
        holoParent(P2H_TempInt,entity())
    }
    P2H_Ready = P2H_Int >= P2H_Mod:count()
}"
        
        fileWrite(">e2shared/"+Name,FinalText)
        print("] Ready! Document saved as \""+Name+"\" in garrysmod/garrysmod/data/Expression2/e2shared")
        for(I=1,Ent:count())
        {
            ATE = Ent[I,entity]
            ATE:setColor(Color[I,vector4])
        }
        Base:setColor(255,255,255,255)
        selfDestruct()
    }
}