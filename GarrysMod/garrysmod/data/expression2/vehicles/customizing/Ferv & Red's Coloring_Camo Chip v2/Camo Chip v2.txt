@name 6-Channel Camo Chip - Release
@persist [GrpA GrpB GrpC GrpD GrpE GrpF Ents]:array
@persist [MatA MatB MatC MatD MatE MatF]:string
@persist [ClrA ClrB ClrC ClrD ClrE ClrF]:vector 
@persist Chassis:entity
@trigger all
#THIS CHIP WAS ORIGINALLY WRITTEN ALMOST ENTIRELY BY FERVIDUSLETUM, SO CREDIT GOES TO HIM!
#ALL I DID (REDREAPER) WAS ADD MORE CHANNELS, PRESETS, AND IMPROVE USABILITY!

#[
This is a "template" of a new camo scheme, left as an example.  If you want to add your own schemes, you can do so with this.
You simply copy and paste this to line 82, where it tells you--right below taht big string!
elseif (Command == "yourcamohere") {
            print("[Camo] yourcamohere")
            MatA = MatB = MatC = MatD = "yourtexturehere"
            ClrA = vec(255,0,0)#Color that it turns red props!  These are retextured
            ClrB = vec(0,0,255)#Color that it turns blue props! These are retextured
            ClrD = vec(255,255,0)#Color that it turns yellow props! These are retextured
            ClrE = vec(0,255,255)#Color that it turns teal props!  These are retextured
            ClrC = vec(0,255,0)#Color that it turns green props! These are NOT retextured
            ClrF = vec(255,0,255)#Color that it turns purple props!  These are NOT retextured
        }]#

#ok, so this one is a bit different from fervs original, but it should still work.
#linking an entity i sno longer necessary, it will autodetect the chassis off whatever it's constrained to.
#You now have up to six possible colors--yellow, teal, and purple are now added.
#Red, blue, yellow and teal will all mat as well
#Green and purple have no mats.
#On old schemes, Yellow is 66% Red and 33% Blue
#on old schemes, Teal is 33% Red and 66% Blue
if (dupefinished()|duped()) { reset() }
if ((first()|(inputClk()&Ents:count()==0))) {
    Chassis = entity():isConstrainedTo(1)
    if(Chassis:isValid()) {print("[Camo] Scanning contraption...")
        Red = vec(255,0,0), Green = vec(0,255,0), Blue = vec(0,0,255), Yellow = vec(255,255,0), Teal = vec(0,255,255), Purple = vec(255,0,255)
    Ents = Chassis:getConstraints()
    Ents:unshiftEntity(Chassis)
    foreach(K,V:entity = Ents) {
        if (V:getColor() == Red) {
            GrpA:unshiftEntity(V)
        } elseif (V:getColor() == Blue) { 
            GrpB:unshiftEntity(V)
        } elseif (V:getColor() == Green) {
            GrpC:unshiftEntity(V)
        } elseif (V:getColor() == Yellow) {
            GrpD:unshiftEntity(V)
        } elseif (V:getColor() == Teal) {
            GrpE:unshiftEntity(V)
        } elseif (V:getColor() == Purple) {
            GrpF:unshiftEntity(V)
        } else {
            continue
        }
    }
print("[Camo] Scanned Contraption!")} else {print("No chassis detected!")
        print("Red/Yellow/Teal/Blue mat")
    print("Purple/Green detail props")}
    runOnChat(1)
    }

if (chatClk(owner())) {
    Chat = owner():lastSaid():lower()
    Split  = Chat:sub(1,Chat:length()):explode(" ")
    Token = Split:string(1)
    Command = Split:string(2)
    Arg1 = Split:string(3)
    
    if (Token == "camo") {
        
if (Command == "blue") {
            print("[Camo] Allied Blue")
            MatA = MatB = MatC = MatD = "models/props_debris/building_template010a"
            ClrA = vec(64,128,255)
            ClrB = vec(76,160,235)
            ClrC = vec(72,72,72)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        
        ##############################ALL YOUR NEW CAMO SCHEMES GO RIGHT BELOW HERE###############################


        elseif (Command == "red") {
            print("[Camo] Soviet Red")
            MatA = MatB = MatC = MatD = "models/props_debris/building_template010a"
            ClrA = vec(200,64,64)
            ClrB = vec(180,55,55)
            ClrC = vec(72,72,72)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        elseif (Command == "yellow") {
            print("[Camo] GDI Gold")
            MatA = MatB = MatC = MatD = "models/props_debris/building_template010a"
            ClrA = vec(255,255,64)
            ClrB = vec(224,224,96)
            ClrC = vec(64,64,64)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        elseif (Command == "teal") {
            print("[Camo] NOD Light Blue")
            MatA = MatB = MatC = MatD = "models/props_debris/building_template010a"
            ClrA = vec(140,230,255)
            ClrB = vec(116,206,255)
            ClrC = vec(64,64,64)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        elseif (Command == "police") {
            print("[Camo] Police")
            MatA = MatB = MatC = MatD = "sprops/textures/sprops_metal5"
            ClrA = vec(255,255,255)
            ClrB = vec(64,64,255)
            ClrC = vec(224,224,224)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        elseif (Command == "tronred") {
            print("[Camo] Cool Tron Red")
            MatA = MatB = MatC = MatD = "models/props_debris/building_template010a"
            ClrA = vec(72,72,72)
            ClrB = vec(66,66,66)
            ClrC = vec(255,0,0)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        elseif (Command == "tronblue") {
            print("[Camo] Cool Tron Blue")
            MatA = MatB = MatC = MatD = "models/props_debris/building_template010a"
            ClrA = vec(72,72,72)
            ClrB = vec(66,66,66)
            ClrC = vec(0,0,255)
        }
        elseif (Command == "trongreen") {
            print("[Camo] Cool Tron Green")
            MatA = MatB = MatC = MatD = "models/props_debris/building_template010a"
            ClrA = vec(72,72,72)
            ClrB = vec(66,66,66)
            ClrC = vec(0,255,0)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        elseif (Command == "prep") {
            print("[Camo] Pre-Production")
            MatA = MatB = MatC = MatD = "phoenix_storms/concrete0"
            ClrA = vec(255,255,255)
            ClrB = vec(224,224,232)
            ClrC = vec(125,125,125)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
       
        elseif (Command == "takei") {
            print("[Camo] Takei")
            MatA = MatB = MatC = MatD = "models/props_debris/building_template010a"
            ClrA = vec(255,153,214)
            ClrB = vec(140,255,220)
            ClrC = vec(245,255,155)
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        elseif (Command == "concrete") {
            print("[Camo] Concrete")
            MatA = MatB = MatC = MatD = "phoenix_storms/construct/concrete_barrier2_00"
            ClrA = vec(128,122,112)*0.5
            ClrB = vec(165,158,147)*0.6
            ClrC = vec(128,122,112)*0.667
            ClrD = ((ClrA+ClrA+ClrB)/3)
            ClrE = ((ClrA+ClrB+ClrB)/3)
            ClrF = (ClrC + ((ClrA+ClrB)*0.25))*0.8
        }
        
        elseif (Command == "undo") {
            print("[Camo] Undo")
            MatA = MatB = MatC = MatD = "sprops/sprops_grid_12x12"
            ClrA = vec(255,0,0)
            ClrB = vec(0,0,255)
            ClrC = vec(0,255,0)
            ClrD = vec(255,255,0)
            ClrE = vec(0,255,255)
            ClrF = vec(255,0,255)
        }
    } else {
        exit()
    }
    
    hideChat(1)
    
    foreach(K,V:entity = GrpA) {
        V:setMaterial(MatA)
        V:setColor(ClrA)
    }
    foreach(K,V:entity = GrpB) {
        V:setMaterial(MatB)
        V:setColor(ClrB)
    }
    foreach(K,V:entity = GrpC) {
        #V:setMaterial(MatC)
        V:setColor(ClrC)
    }
    foreach(K,V:entity = GrpD) {
        V:setMaterial(MatC)
        V:setColor(ClrD)
    }
    foreach(K,V:entity = GrpE) {
        V:setMaterial(MatD)
        V:setColor(ClrE)
    }
    foreach(K,V:entity = GrpF) {
        #V:setMaterial(MatC)
        V:setColor(ClrF)
    }
    
}