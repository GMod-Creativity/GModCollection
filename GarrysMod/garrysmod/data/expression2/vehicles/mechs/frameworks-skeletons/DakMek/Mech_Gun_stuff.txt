@name Mech Gun stuff
@inputs Gun:entity Pod:wirelink Cam:wirelink
@outputs ANG2:angle Test GunAng:angle
@persist AngleOffset:angle RotationSpeed Elevation Depression YawMin YawMax
@trigger
interval(100)
 
#Place this chip on the prop that the gun is ballsocketed to
#Make sure the arrow is pointing forward on the chip.
 
if(first()|dupefinished()){
AngleOffset=ang(0,0,0) #edit the third value here to change the gun's rotation, 180 will flip it over.
RotationSpeed = 25
Elevation = 15
Depression = 15
YawMin = 15
YawMax = 15
}
 
 
Active = Pod["Active",number]
   
if(Active==1){
    CAM1 = Cam["CamPos", vector]
    CAM2 = Cam["HitPos", vector]
    CAMANG = Cam["CamAng", angle]
    GunPos = Gun:massCenter()
    GunAng = (rangerOffset(9999999999,CAM2,CAMANG:forward()):pos() - GunPos):toAngle()
    ANGLE = clamp(Gun:toLocal(GunAng),ang(-RotationSpeed),ang(RotationSpeed))
    CLAMPANG = clamp(entity():toLocal(Gun:toWorld(ANGLE)),ang(-min(Elevation,abs(CAMANG:pitch())) ,-YawMin,0),ang(min(Depression,abs(CAMANG:pitch())),YawMax,0))
    Gun:applyAngForce((Gun:toLocal(entity():toWorld(CLAMPANG+ AngleOffset)) * 250 - Gun:angVel() * 30) * shiftL(ang(Gun:inertia())))
}
 
if(Active==0){
    ANG=entity():toWorld(ang(0,0,0)+AngleOffset)
    Q=quat(ANG)/quat(Gun)
    Torque=Gun:toLocal(rotationVector(Q) + Gun:pos())
    Torque=((Torque*250) -Gun:angVelVector()* 50)*Gun:inertia()
    Gun:applyTorque(Torque)
    Gun:applyTorque(-Gun:angVelVector()*pi()/180*Gun:inertia()*1550.1*1/2)
}