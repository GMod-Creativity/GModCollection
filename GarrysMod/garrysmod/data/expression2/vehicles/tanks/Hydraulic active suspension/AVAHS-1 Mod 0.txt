@name AVAHS-1 Mod 0
@inputs LA LB LC LD LE RA RB RC RD RE
@outputs OLA OLB OLC OLD OLE ORA ORB ORC ORD ORE
@persist Height Pitch Roll Hop Z PM RM ZM DZM M RLim
@persist 
@trigger all

interval(50)
if(dupefinished())
    {
        reset()
    }

if(first())
    {
        print("Suspension Initializing...")
 print("Red's active hydraulic suspension")
        Height = 42 #Shock height
        PM = 0.25 #Pitch multiplier
        RM = 0.4 #Roll multiplier
        ZM = 0.025 #up/down multiplier
        DZM = 0.1 #delta Z mul
        M = 1 #Multiplier of compensation
        RLim = 10 #Degrees to roll compensate for
        print("Suspension Initialized!")
        
    }

Z = entity():velL():z() #Upwards
Hop = -((Z*ZM) + ($Z*DZM))
Pitch = entity():angVel():pitch() #Pitch velocity
Roll = clamp((entity():angles():roll()),-RLim,RLim)

LAO = Height + (Pitch*PM*2) + (Roll*-RM) + (Hop)
LBO = Height + (Pitch*PM*1) + (Roll*-RM) + (Hop)
LCO = Height + (Roll*-RM) + (Hop)
LDO = Height + (Pitch*PM*-1) + (Roll*-RM) + (Hop)
LEO = Height + (Pitch*PM*-2) + (Roll*-RM) + (Hop)

RAO = Height + (Pitch*PM*2) + (Roll*RM) + (Hop)
RBO = Height + (Pitch*PM*1) + (Roll*RM) + (Hop)
RCO = Height + (Roll*RM) + (Hop)
RDO = Height + (Pitch*PM*-1) + (Roll*RM) + (Hop)
REO = Height + (Pitch*PM*-2) + (Roll*RM) + (Hop)

OLA = LA + ((LAO-LA)*M)
OLB = LB + ((LBO-LB)*M)
OLC = LC + ((LCO-LC)*M)
OLD = LD + ((LDO-LD)*M)
OLE = LE + ((LEO-LE)*M)
ORA = RA + ((RAO-RA)*M)
ORB = RB + ((RBO-RB)*M)
ORC = RC + ((RCO-RC)*M)
ORD = RD + ((RDO-RD)*M)
ORE = RE + ((REO-RE)*M)