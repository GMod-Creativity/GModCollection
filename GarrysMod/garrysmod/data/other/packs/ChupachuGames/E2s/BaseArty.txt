@name BaseArty
@inputs P:entity 
@outputs Active Fire Targ:entity Targpos:vector
@persist E:entity O:entity Ply:array Maxplayers P:entity
@trigger 

interval(150)

if(dupefinished()){reset()}
if(first()){E=entity(),O=owner(),Activated=1}

findByClass("player")
#findExcludePlayer(O)
findExcludePlayer("tails")
findExcludePlayer("brane")
Ply = findToArray()

Maxplayers = Ply:count()
#print(Maxplayers)

if(Maxplayers >=1){
C=0
while(C<Ply:count()){
if((Ply[C,entity]:pos() - E:pos()):length() > 1500&(Ply[C,entity]:pos() - E:pos()):length() < 3000&Ply[C,entity]:isAlive()){Targ=Ply[C,entity],Fire=1}

C++
}


holoPos(1,O:pos())
}
Targpos=Targ:pos()

if((Targ:pos() - E:pos()):length() > 3000|(Targ:pos() - E:pos()):length() < 1500|!Targ:isAlive()){Fire=0}
if(changed(Fire)&Fire){timer("warn",1000)}
if(Fire){timer("attack",2000)}
else{P:propBreak(),stoptimer("attack"),stoptimer("warn")}
if(clk("warn")){stoptimer("warn"),timer("warn",2000),Targ:soundPlay(1,100,"npc/env_headcrabcanister/incoming.wav")}
if(clk("attack")){stoptimer("attack"),P=propSpawn("models/props_phx/cannonball_solid.mdl",Targ:pos(),1),P:propBreak()}

