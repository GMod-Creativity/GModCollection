@name Hip-Biased Move Chip
# Entities
@inputs Hip:entity Left:entity Right:entity Spc
# Controls
@inputs On For Back TRight TLeft Sprint
# Debug
@outputs Fltdbg Vecdbg:vector
# Offsets
@persist Offsetl:vector Offsetr:vector Hiptrg:vector Hoff Voff Foff Ideall:vector Idealr:vector
@persist Yoffl Yoffr Zoff Turnposa:vector Turnposb:vector Turnvec:vector
@persist Xoffl Xoffr
# Passed Information for Delta
@persist Entpos:vector Leg
# Forces
@persist Forcel:vector Forcer:vector Trig Mul Spr Snap Vtch Ltch Htch Pshd Strp
@trigger all

interval(20)

Offsetl = entity():toLocal(Left:massCenter())
Offsetr = entity():toLocal(Right:massCenter())
Foff = (Offsetl:x() + Offsetr:x()) / 2
Voff = (Offsetl:z() + Offsetr:z()) / 2
Hoff = (Offsetl:y() + Offsetr:y()) / 2

Entpos = entity():pos()

if(first())
{
    Hiptrg = vec((Offsetl:x() + Offsetr:x()) / 2, (Offsetl:y() + Offsetr:y()) / 2, (Offsetl:z() + Offsetr:z()) / 2)
    Yoffl = Offsetl:y()
    Yoffr = Offsetr:y()
    Zoff = (Offsetl:z() + Offsetr:z()) / 2
    Xoffl = Offsetl:x()
    Xoffr = Offsetr:x()
    
# Trigger Distance
    Trig = 20
# Foot Force Multiplier
    Mul = 0.5
# Turning Multiplier
    Snap = 1.4
# Vertical, Lower and Horizontal Offsets
    Vtch = 3
    Ltch = 3
    Htch = 2
# Horizontal (Yaw) Stabilizer
    Strp = 1/70
# Hip Stab
    Pshd = 4
}
# Sprint Multiplier
Spr = 1 + 0.75 * Sprint

if(On)
{
    # Hip Snap
    Hip:applyForce(Hip:mass() * Pshd * (entity():forward() * (Foff + $Foff * 5 - Hiptrg:x()) + entity():up() * (Voff + $Voff * 5 - Hiptrg:z()) + entity():right() * -1 * (Hoff + $Hoff * 5 - Hiptrg:y())))
    # Turning
    Turnposa = entity():right() * -200
    Turnposb = entity():right() * 200
    Turnvec = entity():forward()
    if(abs(TRight - TLeft))
    {
        Hip:applyOffsetForce(Turnposb, Turnvec * Hip:mass() * (TRight - TLeft) * Snap)
        Hip:applyOffsetForce(Turnposa, Turnvec * Hip:mass() * (TLeft - TRight) * Snap)
    }
    Hip:applyOffsetForce(Turnposb, Turnvec * Hip:mass() * entity():angVel():yaw() * Strp)
    Hip:applyOffsetForce(Turnposa, Turnvec * Hip:mass() * entity():angVel():yaw() * -Strp)

    # Leg Toggles
    if((Offsetl:x() - Xoffl > Trig) | (Offsetr:x() - Xoffr < -Trig))
    {
        Leg = 1
    }
    if((Offsetr:x() - Xoffr > Trig) | (Offsetl:x() - Xoffr < -Trig))
    {
        Leg = 0
    }
    
    if(For & (Leg == 1))
    {
        Ideall = vec(-1 * Xoffl + 0, -1 * Yoffl, -1 * Zoff + Trig * Ltch)
        Idealr = vec(-1 * Xoffr + -Trig * Htch, -1 * Yoffr, -1 * Zoff - Trig * Vtch)
    }
    if(Back & (Leg == 1))
    {
        Idealr = vec(-1 * Xoffr + 0, -1 * Yoffr, -1 * Zoff + Trig * Ltch)
        Ideall = vec(-1 * Xoffl + Trig * Htch, -1 * Yoffl, -1 * Zoff - Trig * Vtch)
    }
    if(For & (Leg == 0))
    {
        Ideall = vec(-1 * Xoffl + -Trig * Htch, -1 * Yoffl, -1 * Zoff - Trig * Vtch)
        Idealr = vec(-1 * Xoffr + 0, -1 * Yoffr, -1 * Zoff + Trig * Ltch)
    }
    if(Back & (Leg == 0))
    {
        Ideall = vec(-1 * Xoffl + 0, -1 * Yoffl, -1 * Zoff + Trig * Ltch)
        Idealr = vec(-1 * Xoffr + Trig * Htch, -1 * Yoffr, -1 * Zoff - Trig * Vtch)
    }
    #WARNING: This particular IF fucks up a lot - good with rayman
    #not so good with any sort of legitimate construct
    #if(!For)
    #{
    #    Ideall = vec(0, -1 * Yoffl, -1 * Zoff)
    #    Idealr = vec(0, -1 * Yoffr, -1 * Zoff)
    #}
    
    Forcel = entity():pos() - entity():toWorld(Offsetl + $Offsetl * 5 + Ideall)
    Forcer = entity():pos() - entity():toWorld(Offsetr + $Offsetr * 5 + Idealr)
    
    if(Spc){
        Hip:applyForce(Pshd * Hip:mass() * (entity():up()))
        
        }
    if(For | Back)
    {
        Left:applyForce(Forcel * Left:mass() * (Mul * Spr))
        Right:applyForce(Forcer * Right:mass() * (Mul * Spr))
    }
}
