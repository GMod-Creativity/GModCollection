
### ### ### ### ### ###
### Made By Perli55 ###
### ### ### ### ### ###

@name The Game: Memory
@inputs EGP:wirelink P1:entity P2:entity
@outputs Max Rand T X Y Cur:vector2 Turn 
@outputs Pla:entity Can:array Temp Temp2 S1 S2 
@persist Mats:array Poses:array In:array
if (duped()) {reset()}
if (first()) {
    EGP:egpClear()

    EGP:egpBox(21,vec2(256,256),vec2(512,512))
    EGP:egpColor(21,vec(150,150,150))
    
    In=array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
    for (A=1,20) {
        Rand=randint(1,20)
        In:pushNumber(In[Rand,number])
        In:remove(Rand)
        Can:pushNumber(1)
    }
    
    X=64
    Y=160
    for (A=1,20) {
        T++
        EGP:egpBox(In[T,number],vec2(X,Y),vec2(64,64))
        X+=96
        if (X>512) {X=64,Y+=96}
        EGP:egpColor(In[T,number],vec(30,30,30)+randvec(0,50))
    }
    
    T=0
    for (A=1,20) {
        T++
        Poses:pushVector2(EGP:egpPos(T))
    }
    
    Mats=array(
    "matsys_regressiontest/background",
    "matsys_regressiontest/background",
    "hlmv/background",
    "hlmv/background",
    "editor/ai_sound",
    "editor/ai_sound",
    "editor/env_shake",
    "editor/env_shake",
    "console/intro",
    "console/intro",
    "effects/combinedisplay001b",
    "effects/combinedisplay001b",
    "vgui/ui_logo",
    "vgui/ui_logo",
    "models/effects/portalrift_sheet",
    "models/effects/portalrift_sheet",
    "effects/breenscreen_static01_",
    "effects/breenscreen_static01_",
    "effects/alyxmonitor_idle",
    "effects/alyxmonitor_idle"
    )
    
    EGP:egpText(23,"Player 1 Has o Point(s)",vec2(15,30))
    EGP:egpSize(23,30)
    EGP:egpColor(23,vec(255,255,0))
    EGP:egpText(24,"Player 2 Has o Point(s)",vec2(15,70))
    EGP:egpSize(24,30)
    EGP:egpColor(24,vec(200,0,200))
    EGP:egpText(25,"Memory",vec2(330,40))
    EGP:egpSize(25,45)
    EGP:egpColor(25,vec(0,255,255))
    
    Max=egpMaxUmsgPerSecond()
    if (Max>30) {Max=30}
    Turn=1
}
interval(1000/Max)

Cur=EGP:egpCursor(Pla)
if (Cur!=vec2(-1,-1)) {EGP:egpPoly(26,Cur,Cur+vec2(32,0),Cur+vec2(24,8),Cur+vec2(40,24),Cur+vec2(24,40),Cur+vec2(8,24),Cur+vec2(0,32))}
else {EGP:egpPoly(26,vec2(-10,-10),vec2(),vec2(-10,10))}

if (changed(Turn)|changed(P1)|changed(P2)) {
    if (Turn==1) {Pla=P1,EGP:egpColor(26,vec(255,255,0))}
    elseif (Turn==2) {Pla=P2,EGP:egpColor(26,vec(200,0,200))}
    else {Pla=noentity()}
}

if (Pla) {
    T=0
    for (A=1,20) {
        T++
        if (inrange(Cur,Poses[T,vector2]+vec2(-32,-32),Poses[T,vector2]+vec2(32,32))&Can[T,number]==1) {
            EGP:egpAlpha(T,150)
            if (Pla:keyAttack1()) {
                EGP:egpMaterial(T,Mats[T,string])
                EGP:egpAlpha(T,255)
                EGP:egpColor(T,vec(255,255,255))
                if (!Temp) {Temp=T,Can[T,number]=0.1}
                else {Temp2=T,Can[T,number]=0.1
                    if (Turn==1) {timer("to2",1500)}
                    elseif (Turn==2) {timer("to1",1500)}
                    Turn=3
                    }
                }
            } else {EGP:egpAlpha(T,255)}
    }
}

if (clk("to2")) {
    if (EGP:egpMaterial(Temp)==EGP:egpMaterial(Temp2)) {
        S1++
        EGP:egpPos(Temp,vec2(-100,-100))
        EGP:egpPos(Temp2,vec2(-100,-100))
        EGP:egpMaterial(Temp,"")
        EGP:egpMaterial(Temp2,"")
        EGP:egpColor(Temp,vec(30,30,30)+randvec(0,50))
        EGP:egpColor(Temp2,vec(30,30,30)+randvec(0,50))
        EGP:egpSetText(23,"Player 1 Has "+S1:toString()+" Point(s)")
    } else {
        EGP:egpMaterial(Temp,"")
        EGP:egpMaterial(Temp2,"")
        EGP:egpColor(Temp,vec(30,30,30)+randvec(0,50))
        EGP:egpColor(Temp2,vec(30,30,30)+randvec(0,50))
        Can[Temp,number]=1
        Can[Temp2,number]=1
    }
    Turn=2
    Temp=0
    Temp2=0
} elseif (clk("to1")) {
    if (EGP:egpMaterial(Temp)==EGP:egpMaterial(Temp2)) {
        S2++
        EGP:egpPos(Temp,vec2(-100,-100))
        EGP:egpPos(Temp2,vec2(-100,-100))
        EGP:egpMaterial(Temp,"")
        EGP:egpMaterial(Temp2,"")
        EGP:egpColor(Temp,vec(30,30,30)+randvec(0,50))
        EGP:egpColor(Temp2,vec(30,30,30)+randvec(0,50))
        EGP:egpSetText(24,"Player 2 Has "+S2:toString()+" Point(s)")
    } else {
        EGP:egpMaterial(Temp,"")
        EGP:egpMaterial(Temp2,"")
        EGP:egpColor(Temp,vec(30,30,30)+randvec(0,50))
        EGP:egpColor(Temp2,vec(30,30,30)+randvec(0,50))
        Can[Temp,number]=1
        Can[Temp2,number]=1
    }
    Turn=1
    Temp=0
    Temp2=0
}

if ((S1+S2)==10) {
    if (changed((S1+S2)==10)) {
        if (S1>S2) {
            EGP:egpText(27,P1:name():sub(1,13)+" Is The Winner :)",vec2(15,250))
            EGP:egpSize(27,35)
            EGP:egpColor(27,vec(255,255,0))
            }
        elseif (S2>S1) {
            EGP:egpText(27,P2:name():sub(1,13)+" Is The Winner :)",vec2(15,250))
            EGP:egpSize(27,35)
            EGP:egpColor(27,vec(200,0,200))
            }
        else {
            EGP:egpText(27,"It's A Tie :)",vec2(15,250))
            EGP:egpSize(27,35)
            EGP:egpColor(27,vec(0,255,0))
        }
        timer("reset",3000)
        Turn=3
    }
    if (clk("reset")) {reset()}
}

if (changed(P1)) {
    P1:setMaterial("models/shiny")
    P1:setColor(vec(255,255,0))
} elseif (changed(P2)) {
    P2:setMaterial("models/shiny")
    P2:setColor(vec(255,0,255))
}

if (changed(EGP:entity())&EGP:entity()) {reset()}
