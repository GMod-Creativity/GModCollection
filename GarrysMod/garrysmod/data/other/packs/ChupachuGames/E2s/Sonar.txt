@name Sonar
@inputs EGP:wirelink
@outputs 
@persist Ranger:ranger X
@trigger 

interval(35)
if(first()){
    #entity():propNotSolid(1)
    timer("reset",4500)
    X=6
holoCreate(1)}
holoPos(1,owner():toWorld(vec(0,0,50)))
holoAng(1, holoEntity(1):angles()+ang(0,4,0))
rangerFilter(owner())
rangerFilter(entity())
Ranger=rangerOffset(80000,holoEntity(1):pos(),holoEntity(1):forward())
rangerFilter(owner())
rangerFilter(entity())

holoCreate(2)
holoPos(2,Ranger:position())

RangerDist=Ranger:position() - holoEntity(1):pos()

EGP:egpBox(1,vec2(512/2),vec2(25))
EGP:egpBox(2,vec2(0,256),vec2(RangerDist:length()/2,25))
#EGP:egp

#entity():setPos(owner():pos())

holoCreate(3)
holoPos(3,owner():toWorld(vec(0,0,20)))
holoScale(3,vec(0.33))
holoAng(3,holoEntity(1):angles())
holoCreate(4)
holoAng(4,holoEntity(1):angles())
holoPos(4,holoEntity(3):toWorld(vec(RangerDist:length()/50,0,0)))
holoScale(4,vec(0.33))
if(clk("reset")){reset()}
if(first()){
    holoAlpha(1,0)
holoCreate(X)
holoScale(X,vec(0.33))}
if(RangerDist:length()<78000){
    
    holoCreate(X)
    holoVisible(X,players(),0)
    holoVisible(X,owner(),1)
    holoScale(X,vec(0.33))
    holoPos(X,holoEntity(4):toWorld(vec()))
    holoParent(X,entity())
    #findByClass()
    #if(
    holoColor(X,vec(50,255,50))
    if(Ranger:hitWorld()|Ranger:hitSky()){
        holoColor(X,vec(50,50,255))
    }
    else{
    findByClass("player")
    T=findClosest(Ranger:position())
    if(T:type()=="player"&(T:pos()-Ranger:position()):length()<100){
        holoColor(X,vec(255,50,50))
    }
}
    X+=1
}










#holoParent(X,entity())
