@name Yellow Pikmin
@persist 
@outputs Ang:angle
@model models/hunter/blocks/cube025x025x025.mdl
#interval(300)
runOnTick(1)
E = entity()
Chippos=entity():pos()
findByClass("player")
Target=findClosest(E:pos())
E:setAlpha(0)
if(first()){
holoCreate(1)
holoParent(1,5)
holoParent(1,4)
holoParent(1,3)
holoParent(1,2)
holoParent(1,6)
holoPos(1,Chippos + vec(0,0,-5))
holoModel(1,"models/props_phx/misc/potato_launcher_explosive.mdl")
holoMaterial(1,"models/debug/debugwhite")
holoScale(1,vec(1))
holoColor(1,vec(255,255,0))
holoAng(1,E:angles())
holoParent(1,entity())
holoCreate(2)
holoParent(2,5)
holoParent(2,4)
holoParent(2,3)
holoParent(2,6)
holoParent(2,1)
holoModel(2,"models/props_phx/misc/potato.mdl")
holoMaterial(2,"models/debug/debugwhite")
holoScale(2,vec(2))
holoPos(2,entity():pos()+vec(-3,-0,8)) #0.3,-2.3,8
holoAng(2,entity():angles()+ang(0,90,0))
holoColor(2,vec(255,255,0))
holoParent(2,entity())
holoCreate(3)
holoParent(3,5)
holoParent(3,4)
holoParent(3,6)
holoParent(3,2)
holoParent(3,1)
holoParent(3,entity())
holoPos(3,entity():pos()+vec(-5,2,10))
holoAng(3,entity():angles()+ang(90,90,0))
holoScale(3,vec(0.5))
holoMaterial(3,"models/debug/debugwhite")
holoModel(3,"models/props_phx/misc/potato.mdl")
holoParent(3,1)
holoParent(3,E)
holoCreate(4)
holoParent(4,5)
holoParent(4,6)
holoParent(4,3)
holoParent(4,2)
holoParent(4,1)
holoParent(4,entity())
holoPos(4,entity():pos()+vec(-5,2,10))
holoAng(4,entity():angles()+ang(90,180,0))
holoScale(4,vec(0.23))
holoMaterial(4,"models/debug/debugwhite")
holoModel(4,"models/props_phx/misc/potato.mdl")
holoColor(4,vec(0,0,0))
holoMaterial(4,"pheonix_storms/black_chrome")
holoParent(4,E)
holoCreate(5)
holoParent(5,6)
holoParent(5,4)
holoParent(5,3)
holoParent(5,2)
holoParent(5,1)
holoParent(5,entity())
holoPos(5,entity():pos()+vec(-5,-2,10))
holoAng(5,entity():angles()+ang(90,90,0))
holoScale(5,vec(0.5))
holoMaterial(5,"models/debug/debugwhite")
holoModel(5,"models/props_phx/misc/potato.mdl")
holoParent(5,E)
holoCreate(6)
holoParent(6,5)
holoParent(6,4)
holoParent(6,3)
holoParent(6,2)
holoParent(6,1)
holoParent(6,entity())
holoPos(6,entity():pos()+vec(-5,-2,10))
holoAng(6,entity():angles()+ang(90,180,0))
holoScale(6,vec(0.23))
holoMaterial(6,"models/debug/debugwhite")
holoModel(6,"models/props_phx/misc/potato.mdl")
holoColor(6,vec(0,0,0))
holoMaterial(6,"pheonix_storms/black_chrome")
holoParent(6,E)
holoCreate(7)
holoModel(7,"models/sprops/misc/fittings/bend_long_90_1_5.mdl")
holoColor(7,vec(255,255,0))
holoMaterial(7,"models/debug/debugwhite")
holoAng(7,E:angles()+ang(-90,90,0))
holoPos(7,E:pos()+vec(0,-2,12))
holoScale(7,vec(2))
holoParent(7,E)
holoCreate(8)
holoModel(8,"models/sprops/mechanics/misc/cam_b0.mdl")
holoAng(8,E:angles()+ang(90,90,0))
holoPos(8,E:pos()+vec(0,-6.8,14))
holoColor(8,vec(0,255,0))
holoParent(8,E)
}
#holoScale(1,vec(2,2,2))
#holoColor(1,vec(20,100,255))
#The colour follows the order of Red,Green,Blue.
#Vector can either be for scaling or colouring and ETC.
#For scaling: (Length, Breadth, Height)
#holoMaterial(1,"")
#holoPos(1,Chippos+vec(0,0,-30))
#holoModel(1,"models/props_wasteland/light_spotlight01_lamp.mdl")

#runOnTick(1)

E:setMass(50)
#if ((entity():pos()-owner():pos()):length()>200){applyForce
    applyForce(((Target:shootPos()+vec(150,20,-50)-E:pos())*10-E:vel())*E:mass())
if ((entity():pos()-Target:pos()):length()<150){applyForce((E:pos()-E:pos())*3-E:vel()*E:mass())}
P = E:elevation(Target:pos()+vec(-50,0,0))
Y = E:bearing(Target:pos())
R = E:angles():roll()
Ang = (-ang(P,Y,R)*100)
entity():applyAngForce(Ang + $Ang*5)



