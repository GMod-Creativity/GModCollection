@name Elevator
@inputs F1 F2 F3 F4 Stop #In Lift
@inputs C1 C2 C3 C4 #Call
@outputs Lift:entity LPDefX LPDefY LPCurZ LADefYaw LZ LT #LiftCoords
@outputs F1Z F2Z F3Z F4Z #Floor Levels
@outputs Door1 Door2 Door3 Door4 DoorL #Doors
@outputs Moving AtFloor #States

#Interval
interval(20)
LPCurZ=Lift:pos():z()

#Startup
if(first()){
    Lift=entity():isWeldedTo()
    Lift:setMass(2000)
    Lift:setAng(ang(vec(0,Lift:angles():yaw(),0)))
    LPDefX=Lift:pos():x()
    LPDefY=Lift:pos():y()
    LADefYaw=Lift:angles():yaw()
    LZ=Lift:pos():z()
    LT=LZ
    F1Z=Lift:pos():z()
    F2Z=Lift:pos():z()+98
    F3Z=Lift:pos():z()+196
    F4Z=Lift:pos():z()+294
}

#Buttons
if(F1|C1){
    LT=F1Z
    Moving=1
}
if(F2|C2){
    LT=F2Z
    Moving=1
}
if(F3|C3){
    LT=F3Z
    Moving=1
}
if(F4|C4){
    LT=F4Z
    Moving=1
}
if(Stop){
    Moving=0
}else{
    Moving=1
}

#LiftControl
if(LZ<LT & Moving==1){
    LZ+=0.2*5
}
if(LZ>LT & Moving==1){
    LZ-=0.2*5
}
if(LZ==LT & floor(Lift:pos():z())==floor(LZ)){
    AtFloor=1
    Moving=0
}
else{
    AtFloor=0
}


if(Moving==1){
    Lift:propFreeze(0)
    Lift:setAng(ang(vec(0,LADefYaw,0)))
    Lift:applyForce(((vec(LPDefX,LPDefY,LZ)-Lift:pos())*40-Lift:vel())*Lift:mass())
}else{
    Lift:propFreeze(1)
}

#DoorControl(Later)
if(LZ==LT){
    if(LT==F1Z){
        Door1=25
    }
    if(LT==F2Z){
        Door2=25
    }
    if(LT==F3Z){
        Door3=25
    }
    if(LT==F4Z){
        Door4=25
    }
    DoorL=25
}else{
    Door1=0
    Door2=0
    Door3=0
    Door4=0
    DoorL=0
}
