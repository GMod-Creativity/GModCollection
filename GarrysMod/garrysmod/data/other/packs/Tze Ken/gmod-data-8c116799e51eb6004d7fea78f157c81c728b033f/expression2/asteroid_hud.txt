@name Roid HUD
@persist E:wirelink
@outputs Find:array I
@trigger
@autoupdate
if(first() | duped() | dupefinished()){
    runOnTick(1)

    function vector anchor(){
        #return entity():pos() #emmiter
        return entity():owner():shootPos() #hud
    }
    
    function void drawSun(){
        Entity = Find[I, entity]
        
        E:egp3DTracker(I * 3, vec(0,0,0))
        E:egpParent(I * 3, Entity)
        E:egpBoxOutline(I * 3 + 1, vec2(0, 0), vec2(200, 200))
        E:egpParent(I * 3 + 1, I * 3)
        E:egpColor(I * 3 + 1, vec4(255,255,0,120))
        E:egpText(I * 3 + 2, "SUN", vec2(-100, 100))
        E:egpFont(I * 3 + 2, "",14)
        E:egpParent(I * 3 + 2, I * 3)
        E:egpColor(I * 3 + 2, vec4(255,255,0,120))
    }
    
    function void drawRoid(){
        Entity = Find[I, entity]
        #Size=Find[I, entity]:model():replace("models/ce_ls3additional/asteroids/asteroid_",""):replace(".mdl",""):toNumber()*1.4
        Size=Entity:boxSize():x()/2
        
        # Limit drawn roids by size
        if(Size > 550){
            E:egp3DTracker(I * 3, vec(0,0,0))
            E:egpParent(I * 3, Entity)
            
            E:egpBoxOutline(I * 3 + 1, vec2(0, 0), vec2(Size, Size) * egpScrW(owner()) / anchor():distance(Entity:pos()))
            E:egpParent(I * 3 + 1, I * 3)
            E:egpColor(I * 3 + 1, vec4(255,128,0,120))
            
            E:egpText(I * 3 + 2, "ROID "+floor(Size), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
            E:egpFont(I * 3 + 2, "",14)
            E:egpParent(I * 3 + 2, I * 3)
            E:egpColor(I * 3 + 2, vec4(255,128,0,120))
        }
    }
    
    function void drawTib(){
        Entity = Find[I, entity]

        SizeZ=Entity:boxSize():z()/2
        SizeXY=Entity:boxSize():x()/2
        Color=Entity:getSkin() ? vec4(0,255,0,120) : vec4(0,120,255,120)
        
        E:egp3DTracker(I * 3, Entity:toLocal(Entity:pos() + +vec(0,0,SizeZ)))
        E:egpParent(I * 3, Entity)
        
        E:egpBoxOutline(I * 3 + 1, vec2(0, 0), vec2(SizeXY, SizeZ) * egpScrW(owner()) / anchor():distance(Entity:pos()))
        E:egpParent(I * 3 + 1, I * 3)
        E:egpColor(I * 3 + 1, Color)
        
        E:egpText(I * 3 + 2, "CRYSTAL "+floor(SizeZ), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
        E:egpFont(I * 3 + 2, "",14)
        E:egpParent(I * 3 + 2, I * 3)
        E:egpColor(I * 3 + 2, Color)
    }
    
    function void drawGyro(){
        Entity = Find[I, entity]

        SizeL=200
        DistEval=anchor():distance(Entity:pos()) < 2000 ? anchor():distance(Entity:pos())*2 : anchor():distance(Entity:pos())/2
        
        E:egp3DTracker(I * 3, vec(0,0,0))
        E:egpParent(I * 3, Entity)    
        E:egpBoxOutline(I * 3 + 1, vec2(0, 0), vec2(SizeL, SizeL) * egpScrW(owner()) / DistEval)
        E:egpParent(I * 3 + 1, I * 3)
        E:egpColor(I * 3 + 1, vec4(255,255,255,120))
        
        E:egpText(I * 3 + 2, "SHIPCORE "+floor(Entity:id()*SizeL/10), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
        E:egpFont(I * 3 + 2, "",14)
        E:egpParent(I * 3 + 2, I * 3)
        E:egpColor(I * 3 + 2, vec4(255,255,255,120))
    }
    
    function void drawMiner(){
        Entity = Find[I, entity]

        SizeL=148
        DistEval=anchor():distance(Entity:pos()) < 2000 ? anchor():distance(Entity:pos())*2 : anchor():distance(Entity:pos())/2
        Type=Entity:type()
        
        E:egp3DTracker(I * 3, vec(0,0,0))
        E:egpParent(I * 3, Entity)    
        E:egpBoxOutline(I * 3 + 1, vec2(0, 0), vec2(SizeL, SizeL) * egpScrW(owner()) / DistEval)
        E:egpParent(I * 3 + 1, I * 3)
        if(Type=="sa_mining_laser"){
            E:egpColor(I * 3 + 1, vec4(0,255,128,120))
        }
        elseif(Type=="sa_ice_mining_laser"){
            E:egpColor(I * 3 + 1, vec4(0,128,255,150))
        }
        elseif(Type=="sa_mining_drill"){
            E:egpColor(I * 3 + 1, vec4(0,255,0,120))
        }
        
        E:egpText(I * 3 + 2, "MINER "+floor(Entity:id()*SizeL/10), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
        E:egpFont(I * 3 + 2, "",14)
        E:egpParent(I * 3 + 2, I * 3)
        if(Type=="sa_mining_laser"){
            E:egpColor(I * 3 + 2, vec4(0,255,128,120))
        }
        elseif(Type=="sa_ice_mining_laser"){
            E:egpColor(I * 3 + 2, vec4(0,128,255,150))
        }
        elseif(Type=="sa_mining_drill"){
            E:egpColor(I * 3 + 2, vec4(0,255,128,120))
        }
    }
    
    function void drawScanner(){
        Entity = Find[I, entity]

        SizeL=100
        DistEval=anchor():distance(Entity:pos()) < 2000 ? anchor():distance(Entity:pos())*2 : anchor():distance(Entity:pos())/2
        
        E:egp3DTracker(I * 3, vec(0,0,0))
        E:egpParent(I * 3, Entity)    
        E:egpBoxOutline(I * 3 + 1, vec2(0, 0), vec2(SizeL, SizeL) * egpScrW(owner()) / DistEval)
        E:egpParent(I * 3 + 1, I * 3)
        E:egpColor(I * 3 + 1, vec4(200,200,200,120))
        
        E:egpText(I * 3 + 2, "SCANNER "+floor(Entity:id()*SizeL/10), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
        E:egpFont(I * 3 + 2, "",14)
        E:egpParent(I * 3 + 2, I * 3)
        E:egpColor(I * 3 + 2, vec4(200,200,200,120))
    }
    
    function void drawRefs(){
        Entity = Find[I, entity]

        SizeL=200
        DistEval=anchor():distance(Entity:pos()) < 2000 ? anchor():distance(Entity:pos())*2 : anchor():distance(Entity:pos())/2
        
        E:egp3DTracker(I * 3, vec(0,0,0))
        E:egpParent(I * 3, Entity)    
        E:egpBoxOutline(I * 3 + 1, vec2(0, 0), vec2(SizeL, SizeL) * egpScrW(owner()) / DistEval)
        E:egpParent(I * 3 + 1, I * 3)
        E:egpColor(I * 3 + 1, vec4(255,0,0,120))
        
        E:egpText(I * 3 + 2, "REF "+floor(Entity:id()*SizeL/10), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
        E:egpFont(I * 3 + 2, "",14)
        E:egpParent(I * 3 + 2, I * 3)
        E:egpColor(I * 3 + 2, vec4(255,0,0,120))
    }
    
    function void drawE2(){
        Entity = Find[I, entity]

        if(Entity:model():find("expression")|Entity:model():find("gate")){
            SizeL=Entity:boxSize():x()
        }
        else{
            SizeL=10
        }
        DistEval=anchor():distance(Entity:pos()) < 2000 ? anchor():distance(Entity:pos())*2 : anchor():distance(Entity:pos())/10
        
        E:egp3DTracker(I * 3, vec(0,0,0))
        E:egpParent(I * 3, Entity)    
        E:egpBox(I * 3 + 1, vec2(0, 0), vec2(SizeL, SizeL) * egpScrW(owner()) / DistEval)
        E:egpParent(I * 3 + 1, I * 3)
        E:egpColor(I * 3 + 1, vec4(255,0,0,120))
        
        if(anchor():distance(Entity:pos()) < 2000){
            E:egpText(I * 3 + 2, "E2 "+Entity:id(), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
            E:egpFont(I * 3 + 2, "",14)
            E:egpParent(I * 3 + 2, I * 3)
            E:egpColor(I * 3 + 2, vec4(255,0,0,120))
        }
        else{
            E:egpRemove(I * 3 + 2)
        }
    }
    
    function void drawLemon(){
        Entity = Find[I, entity]

        SizeL=Entity:boxSize():x()
        DistEval=anchor():distance(Entity:pos()) < 2000 ? anchor():distance(Entity:pos())*2 : anchor():distance(Entity:pos())/4
        
        E:egp3DTracker(I * 3, vec(0,0,0))
        E:egpParent(I * 3, Entity)    
        E:egpBox(I * 3 + 1, vec2(0, 0), vec2(SizeL, SizeL) * egpScrW(owner()) / DistEval)
        E:egpParent(I * 3 + 1, I * 3)
        E:egpColor(I * 3 + 1, vec4(255,255,0,120))
        
        if(anchor():distance(Entity:pos()) < 2000){
            E:egpText(I * 3 + 2, "LEMON "+Entity:id(), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
            E:egpFont(I * 3 + 2, "",14)
            E:egpParent(I * 3 + 2, I * 3)
            E:egpColor(I * 3 + 2, vec4(255,255,0,120))
        }
        else{
            E:egpRemove(I * 3 + 2)
        }
    }
    
    function void drawPlayer(){
        Entity = Find[I, entity]

        SizeL=Entity:boxSize():x()
        Col=teamColor(Entity:team())
        DistEval=anchor():distance(Entity:pos()) < 2000 ? anchor():distance(Entity:pos())*2 : anchor():distance(Entity:pos())/2
        

        E:egp3DTracker(I * 3, Entity:toLocal(Entity:pos()+vec(0,0,36)))
        E:egpParent(I * 3, Entity)    
        E:egpBoxOutline(I * 3 + 1, vec2(0, 0), vec2(SizeL, SizeL*2) * egpScrW(owner()) / DistEval)
        E:egpParent(I * 3 + 1, I * 3)
        E:egpColor(I * 3 + 1, vec4(Col:x(),Col:y(),Col:z(),180))
        
        E:egpText(I * 3 + 2, Entity:name(), vec2(-E:egpSize(I * 3 + 1):x()/2,E:egpSize(I * 3 + 1):y()/2+2))
        E:egpFont(I * 3 + 2, "",14)
        E:egpParent(I * 3 + 2, I * 3)
        E:egpColor(I * 3 + 2, vec4(Col:x(),Col:y(),Col:z(),200))
    }
    
    function void findUpdate(){
        Entity = Find[I, entity]

        findInSphere(entity():pos(),1500000)
        Find=findToArray()
        ArrSize=Find:count()
    }
}

if(first()|dupefinished()) {
    E=entity():isWeldedTo():wirelink()
    E:egpClear()
    findIncludeClass("base_sb_star2")
    findIncludeClass("sa_mining_laser")
    findIncludeClass("sa_mining_drill")
    findIncludeClass("sa_ice_mining_laser")
    #findIncludeClass("sa_asteroid_scanner")
    findIncludeClass("sa_ice_refinery")
    findIncludeClass("sa_roid")
    #findIncludeClass("gmod_wire_expression2")
    #findIncludeClass("sa_crystal")
    findIncludeClass("sa_crystaltower")
    #findIncludeClass("lemongate")
    findIncludeClass("gyropod_advanced")
    findIncludeClass("wireless_gyropod")
    findIncludeClass("player")
    findExcludeEntity(entity():owner())
    findUpdate()
    I = 1
}

#Render Find
E:egpRemove(I * 3)
E:egpRemove(I * 3 + 1)
E:egpRemove(I * 3 + 2)
if(I <= Find:count() + 10){
    Type = Find[I, entity]:type()
    switch(Type){
        case "base_sb_star2",
            drawSun()
            break
        case "sa_roid",
            drawRoid()
            break
        case "sa_crystaltower",
        case "sa_crystal",
            drawTib()
            break
        case "sa_asteroid_scanner",
            drawScanner()
            break
        case "sa_ice_refinery",
            drawRefs()
            break
        case "gmod_wire_expression2",
            drawE2()
            break
        case "lemongate",
            drawLemon()
            break
        case "gyropod_advanced",
        case "wireless_gyropod",
            drawGyro()
            break
        case "player",
            drawPlayer()
            break
        case "sa_mining_laser",
        case "sa_mining_drill",
        case "sa_ice_mining_laser",
            drawMiner()
            break
    }   
    I++
}

#Find Update
if(I > Find:count()+10){
    #runOnTick(0)
    #interval(1000)
    findUpdate()
    I = 1
}
