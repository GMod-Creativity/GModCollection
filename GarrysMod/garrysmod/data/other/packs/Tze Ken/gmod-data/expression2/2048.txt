@name 2048
@inputs [Pod EGP]:wirelink
@outputs T:table W A S D Space True Score BestScore
@trigger 

if(first()|dupefinished()){
    runOnTick(1)
    EGP:egpClear()
    EGP:egpBox(1,vec2(256,256),vec2(512,512))
    EGP:egpColor(1,vec(250,248,239))
    EGP:egpRoundedBox(2,vec2(256,288),vec2(416,416))
    EGP:egpColor(2,vec(187,173,160))
    EGP:egpBox(3,vec2(424.064,40),vec2(79.872,45.76))
    EGP:egpColor(3,vec(187,173,160))
    EGP:egpText(4,"BEST",vec2(424.064,25))
    EGP:egpAlign(4,1)
    EGP:egpSize(4,13)
    EGP:egpColor(4,vec(238,228,218))
    EGP:egpText(5,BestScore:toString(),vec2(424.064,37))
    EGP:egpAlign(5,1)
    EGP:egpSize(5,20)
    EGP:egpColor(5,vec(255,255,255))
    EGP:egpBox(6,vec2(324.064,40),vec2(79.872,45.76))
    EGP:egpColor(6,vec(187,173,160))
    EGP:egpText(7,"SCORE",vec2(324.064,25))
    EGP:egpAlign(7,1)
    EGP:egpSize(7,13)
    EGP:egpColor(7,vec(238,228,218))
    EGP:egpText(8,Score:toString(),vec2(324.064,37))
    EGP:egpAlign(8,1)
    EGP:egpSize(8,20)
    EGP:egpColor(8,vec(255,255,255))
    EGP:egpText(9,"2048",vec2(115,6))
    EGP:egpColor(9,vec(119,110,101))
    EGP:egpSize(9,63)
    EGP:egpAlign(9,1)
    
    function vector2 toCoord(V:vector2){
        return vec2(V:x()*101.504+3.488,V:y()*101.504+32.992)
    }
    function void doKletka(N:number,V:vector2){
        EGP:egpBox(N,V,vec2(89.024,89.024))   
        EGP:egpColor(N,vec(204,192,179))
    }
    
    for(I=1,4){for(J=1,4){
        doKletka(I*10+J,toCoord(vec2(I,J)))
    }}
    function void refresh(V:vector2){
        if(T[V:x()+"-"+V:y(),number] == 0){
            EGP:egpText(V:x()*10+V:y()+40,"",toCoord(V))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            EGP:egpColor(V:x()*10+V:y(),vec(204,192,179))
            }
        elseif(T[V:x()+"-"+V:y(),number] == 2){
            EGP:egpColor(V:x()*10+V:y(),vec(238,228,218))
            EGP:egpText(V:x()*10+V:y()+40,"2",toCoord(V)+vec2(0,-28))
            EGP:egpSize(V:x()*10+V:y()+40,50)
            EGP:egpColor(V:x()*10+V:y()+40,vec(119,110,101))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 4){
            EGP:egpColor(V:x()*10+V:y(),vec(237,224,200))
            EGP:egpText(V:x()*10+V:y()+40,"4",toCoord(V)+vec2(0,-28))
            EGP:egpSize(V:x()*10+V:y()+40,50)
            EGP:egpColor(V:x()*10+V:y()+40,vec(119,110,101))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 8){
            EGP:egpColor(V:x()*10+V:y(),vec(242,177,121))
            EGP:egpText(V:x()*10+V:y()+40,"8",toCoord(V)+vec2(0,-28))
            EGP:egpSize(V:x()*10+V:y()+40,50)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 16){
            EGP:egpColor(V:x()*10+V:y(),vec(245,149,99))
            EGP:egpText(V:x()*10+V:y()+40,"16",toCoord(V)+vec2(0,-28))
            EGP:egpSize(V:x()*10+V:y()+40,50)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 32){
            EGP:egpColor(V:x()*10+V:y(),vec(246,124,95))
            EGP:egpText(V:x()*10+V:y()+40,"32",toCoord(V)+vec2(0,-28))
            EGP:egpSize(V:x()*10+V:y()+40,50)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 64){
            EGP:egpColor(V:x()*10+V:y(),vec(246,94,59))
            EGP:egpText(V:x()*10+V:y()+40,"64",toCoord(V)+vec2(0,-28))
            EGP:egpSize(V:x()*10+V:y()+40,50)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 128){
            EGP:egpColor(V:x()*10+V:y(),vec(237,207,114))
            EGP:egpText(V:x()*10+V:y()+40,"128",toCoord(V)+vec2(0,-25))
            EGP:egpSize(V:x()*10+V:y()+40,45)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 256){
            EGP:egpColor(V:x()*10+V:y(),vec(237,204,97))
            EGP:egpText(V:x()*10+V:y()+40,"256",toCoord(V)+vec2(0,-25))
            EGP:egpSize(V:x()*10+V:y()+40,45)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 512){
            EGP:egpColor(V:x()*10+V:y(),vec(237,200,80))
            EGP:egpText(V:x()*10+V:y()+40,"512",toCoord(V)+vec2(0,-25))
            EGP:egpSize(V:x()*10+V:y()+40,45)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 1024){
            EGP:egpColor(V:x()*10+V:y(),vec(237,197,63))
            EGP:egpText(V:x()*10+V:y()+40,"1024",toCoord(V)+vec2(0,-22))
            EGP:egpSize(V:x()*10+V:y()+40,40)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
        elseif(T[V:x()+"-"+V:y(),number] == 2048){
            EGP:egpColor(V:x()*10+V:y(),vec(237,194,46))
            EGP:egpText(V:x()*10+V:y()+40,"2048",toCoord(V)+vec2(0,-22))
            EGP:egpSize(V:x()*10+V:y()+40,40)
            EGP:egpColor(V:x()*10+V:y()+40,vec(255,255,255))
            EGP:egpAlign(V:x()*10+V:y()+40,1)
            }
    }
    function void doFishka(){
        True = 1
        for(I=1,4){for(J=1,4){
            if(T[I+"-"+J,number] == 0){
                True = 0
                break
            }
        }}
        while(True == 0){
            Pos = vec2(floor(random(1,5)),floor(random(1,5)))
            if(T[Pos:x()+"-"+Pos:y(),number] == 0){
                True = 1
                T[Pos:x()+"-"+Pos:y(),number] = random(0,1)<0.9 ? 2 : 4
                refresh(Pos)
            }else{}
        }
        soundPlay(1,0,"tools/ifm/beep.wav")
    }
    function void refreshAll(){
        for(I=1,4){for(J=1,4){
            refresh(vec2(I,J))
        }}
    }
    function void check(V:vector2, N:string){
        if(T[V:x()+"-"+V:y(),number] != 0){
            if(N == "Up"){
                if(T[V:x()+"-"+(V:y()-1),number] == 0){
                    T[V:x()+"-"+(V:y()-1),number] = T[V:x()+"-"+V:y(),number]
                    T[V:x()+"-"+V:y(),number] = 0
                    refresh(V)
                    refresh(V+vec2(0,-1))
                }elseif(T[V:x()+"-"+(V:y()-1),number] == T[V:x()+"-"+V:y(),number] && !T[V:x()+"-"+(V:y()-1)+"-changed",number] && !T[V:x()+"-"+V:y()+"-changed",number]){
                    T[V:x()+"-"+(V:y()-1),number] = T[V:x()+"-"+(V:y()-1),number]*2
                    Score += T[V:x()+"-"+(V:y()-1),number]
                    if(Score > BestScore){BestScore = Score}
                    T[V:x()+"-"+V:y(),number] = 0
                    T[V:x()+"-"+(V:y()-1)+"-changed",number] = 1
                    refresh(V)
                    refresh(V+vec2(0,-1))
                }
            }elseif(N == "Right"){
                if(T[(V:x()+1)+"-"+V:y(),number] == 0){
                    T[(V:x()+1)+"-"+V:y(),number] = T[V:x()+"-"+V:y(),number]
                    T[V:x()+"-"+V:y(),number] = 0
                    refresh(V)
                    refresh(V+vec2(1,0))
                }elseif(T[(V:x()+1)+"-"+V:y(),number] == T[V:x()+"-"+V:y(),number] && !T[(V:x()+1)+"-"+V:y()+"-changed",number] && !T[V:x()+"-"+V:y()+"-changed",number]){
                    T[(V:x()+1)+"-"+V:y(),number] = T[(V:x()+1)+"-"+V:y(),number]*2
                    Score += T[(V:x()+1)+"-"+V:y(),number]
                    if(Score > BestScore){BestScore = Score}
                    T[V:x()+"-"+V:y(),number] = 0
                    T[(V:x()+1)+"-"+V:y()+"-changed",number] = 1
                    refresh(V)
                    refresh(V+vec2(1,0))
                }
            }elseif(N == "Down"){
                if(T[V:x()+"-"+(V:y()+1),number] == 0){
                    T[V:x()+"-"+(V:y()+1),number] = T[V:x()+"-"+V:y(),number]
                    T[V:x()+"-"+V:y(),number] = 0
                    refresh(V)
                    refresh(V+vec2(0,+1))
                }elseif(T[V:x()+"-"+(V:y()+1),number] == T[V:x()+"-"+V:y(),number] && !T[V:x()+"-"+(V:y()+1)+"-changed",number] && !T[V:x()+"-"+V:y()+"-changed",number]){
                    T[V:x()+"-"+(V:y()+1),number] = T[V:x()+"-"+(V:y()+1),number]*2
                    Score += T[V:x()+"-"+(V:y()+1),number]
                    if(Score > BestScore){BestScore = Score}
                    T[V:x()+"-"+V:y(),number] = 0
                    T[V:x()+"-"+(V:y()+1)+"-changed",number] = 1
                    refresh(V)
                    refresh(V+vec2(0,+1))
                }
            }elseif(N == "Left"){
                if(T[(V:x()-1)+"-"+V:y(),number] == 0){
                    T[(V:x()-1)+"-"+V:y(),number] = T[V:x()+"-"+V:y(),number]
                    T[V:x()+"-"+V:y(),number] = 0
                    refresh(V)
                    refresh(V+vec2(-1,0))
                }elseif(T[(V:x()-1)+"-"+V:y(),number] == T[V:x()+"-"+V:y(),number] && !T[(V:x()-1)+"-"+V:y()+"-changed",number] && !T[V:x()+"-"+V:y()+"-changed",number]){
                    T[(V:x()-1)+"-"+V:y(),number] = T[(V:x()-1)+"-"+V:y(),number]*2
                    Score += T[(V:x()-1)+"-"+V:y(),number]
                    if(Score > BestScore){BestScore = Score}
                    T[V:x()+"-"+V:y(),number] = 0
                    T[(V:x()-1)+"-"+V:y()+"-changed",number] = 1
                    refresh(V)
                    refresh(V+vec2(-1,0))
                }
            }
        }
    }
    function void changedrefresh(){
        for(I=1,4){for(J=1,4){
            T[I+"-"+J+"-changed",number] = 0
        }}
    }
    function void cleanUp(){
        for(I=1,4){for(J=1,4){
            T[I+"-"+J,number] = 0
        }}
        Score = 0
        EGP:egpText(8,Score:toString(),vec2(324.064,37))
        changedrefresh()
        doFishka()
        doFishka()
        refreshAll()
    }
    function void record(){
        for(I=1,4){for(J=1,4){
            T[I+"-"+J+"-old",number] = T[I+"-"+J,number]
        }}
    }
    function number checkAll(){
        True = 0
        for(I=1,4){for(J=1,4){
            if(T[I+"-"+J+"-old",number] != T[I+"-"+J,number]){
                True = 1
                break
                }
        }}
        return True
    }
    doFishka()
    doFishka()  
    refreshAll()
    changedrefresh()
    if(dupefinished()){cleanUp()}
}

W = Pod:entity():driver():keyPressed("W")
S = Pod:entity():driver():keyPressed("S")
A = Pod:entity():driver():keyPressed("A")
D = Pod:entity():driver():keyPressed("D")
Space = Pod:entity():driver():keyPressed("SPACE")

if(changed(W)&&W){
    record()
    for(I=1,4){for(J=2,4){
        for(K=1,J-1){check(vec2(I,J-K+1),"Up")}
    }}
    EGP:egpText(5,BestScore:toString(),vec2(424.064,37))
    EGP:egpText(8,Score:toString(),vec2(324.064,37))
    if(checkAll()){doFishka()}
    changedrefresh()
}
elseif(changed(S)&&S){
    record()
    for(I=1,4){for(J=2,4){
        for(K=1,J-1){check(vec2(I,4-J+K),"Down")}
    }}
    EGP:egpText(5,BestScore:toString(),vec2(424.064,37))
    EGP:egpText(8,Score:toString(),vec2(324.064,37))
    if(checkAll()){doFishka()}
    changedrefresh()
}
elseif(changed(A)&&A){
    record()
    for(I=1,4){for(J=2,4){
        for(K=1,J-1){check(vec2(J-K+1,I),"Left")}
    }}
    EGP:egpText(5,BestScore:toString(),vec2(424.064,37))
    EGP:egpText(8,Score:toString(),vec2(324.064,37))
    if(checkAll()){doFishka()}
    changedrefresh()
}
elseif(changed(D)&&D){
    record()
    for(I=1,4){for(J=2,4){
        for(K=1,J-1){check(vec2(4-J+K,I),"Right")}
    }}
    EGP:egpText(5,BestScore:toString(),vec2(424.064,37))
    EGP:egpText(8,Score:toString(),vec2(324.064,37))
    if(checkAll()){doFishka()}
    changedrefresh()
}
elseif(changed(Space)&&Space){cleanUp()}
