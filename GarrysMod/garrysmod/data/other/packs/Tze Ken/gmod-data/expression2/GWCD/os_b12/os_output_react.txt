@name Reactionary Output
@inputs Group:string Console:wirelink
@outputs Update ToWrite:string DisplayType WX WY
@persist CLS Args Write:string

if(Group != "")
{
    gSetGroup(Group)
    Clock = gGetNum("DisplayClock")
    if(Clock == 0) { Clock = 200 }
    interval(Clock)

    DisplayType = gGetNum("DisplayType")
    if(DisplayType == 0) { DisplayType = 1, gSetNum("DisplayType", DisplayType) }

    CLS = gGetNum("DisplayCLS")
    if(CLS)
    {
        Write = ""
        Console:writeCell(2041, 1)
        gSetNum("DisplayCLS", 0)
    }

    Update = gGetNum("DisplayUpdate")
    if(Update) 
    {
        if(DisplayType == 1) #Default display - Add new text to the front
        {
            ToWrite = gGetStr("DisplayToWrite")
            Write = ToWrite + toChar(13) + Write
            Write = Write:left(540)
            Console:writeCell(2041, 1)
            Console:writeString(Write, 0, 0)
        }
        elseif(DisplayType == 2) #Display the string at the specified coordinates
        {
            ToWrite = gGetStr("DisplayToWrite")
            WX = gGetNum("DisplayWX")
            WY = gGetNum("DisplayWY")
            Console:writeString(ToWrite, WX, WY)
        }
        elseif(DisplayType == 3) #Display the string at the specified coordinates in cell format
        {
            WX = gGetNum("DisplayWX")
            WY = gGetNum("DisplayWY")
            Args = gGetNum("DisplayArgs")
            if(Args == 0) { Args = 999 }
            Console:writeCell((60 * WY) + WX, Args) #Keep in mind when using this display mode that it doesn't take the default left parameter, it does the X and Y for you! You can still do everything you could do before, this just makes it more convienient for the most common use.
        }
        gSetNum("DisplayUpdate", 0)
    }
}
