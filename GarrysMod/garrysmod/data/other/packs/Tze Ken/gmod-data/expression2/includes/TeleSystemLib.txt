#Tele System Lib
#models/slyfo_2/miscequipmentsolar.mdl
#[
Teleport E + constraints to pos & angle
teleportContraption(Pos:vector, Angle:angle, E:entity)
teleportContraption(Pos:vector, Angle:angle, E:entity, HoloEntityNumber:number)
teleportContraptionFixed(Pos:vector, Angle:angle, E:entity, HoloEntityNumber:number, Offsets:array, OffsetsAng:array)

#]#
@persist TELESYSTEMLIB_SUN:entity ROTATESOLAR:number
if(first())
{
    findIncludeClass("sa_sun")
    findInSphere(vec(0,0,0),9999999999999999999)
    TELESYSTEMLIB_SUN = findToArray()[1,entity]
    findClearWhiteClassList()
    ROTATESOLAR = 1
    holoCreate(12345)
    holoAlpha(12345,0)
    function teleportContraption(Pos:vector, Angle:angle, E:entity)
    {
        HoloEntityNumber = 12345
        Constraints = E:getConstraints()
        I = 0
        Offsets = array()
        OffsetsAng = array()
        while(I<Constraints:count())
        {
            I++
            Offsets:pushVector(E:toLocal(Constraints[I,entity]:pos()))
            OffsetsAng:pushAngle(E:toLocal(Constraints[I,entity]:angles()))
        }
        
        I = 0
        E:setPos(Pos)
        E:setAng(Angle)
        holoPos(HoloEntityNumber,Pos)
        holoAng(HoloEntityNumber,Angle)
        while(I<Constraints:count())
        {
            I++
            NewPosition = holoEntity(HoloEntityNumber):toWorld(Offsets[I,vector])
            NewAngle = holoEntity(HoloEntityNumber):toWorld(OffsetsAng[I,angle])
            Constraints[I,entity]:setPos(NewPosition)
            Constraints[I,entity]:setAng(NewAngle)
            if(Constraints[I,entity]:model()=="models/slyfo_2/miscequipmentsolar.mdl")
            {
                Constraints[I,entity]:setAng((TELESYSTEMLIB_SUN:pos()-NewPosition):normalized():toAngle()+ang(50,0,0))
            }
        }
    }
    
    function teleportContraption(Pos:vector, Angle:angle, E:entity, HoloEntityNumber:number)
    {
        Constraints = E:getConstraints()
        I = 0
        Offsets = array()
        OffsetsAng = array()
        while(I<Constraints:count())
        {
            I++
            Offsets:pushVector(E:toLocal(Constraints[I,entity]:pos()))
            OffsetsAng:pushAngle(E:toLocal(Constraints[I,entity]:angles()))
        }
        
        I = 0
        E:setPos(Pos)
        E:setAng(Angle)
        holoPos(HoloEntityNumber,Pos)
        holoAng(HoloEntityNumber,Angle)
        while(I<Constraints:count())
        {
            I++
            NewPosition = holoEntity(HoloEntityNumber):toWorld(Offsets[I,vector])
            NewAngle = holoEntity(HoloEntityNumber):toWorld(OffsetsAng[I,angle])
            Constraints[I,entity]:setPos(NewPosition)
            Constraints[I,entity]:setAng(NewAngle)
            if(Constraints[I,entity]:model()=="models/slyfo_2/miscequipmentsolar.mdl")
            {
                Constraints[I,entity]:setAng((TELESYSTEMLIB_SUN:pos()-NewPosition):normalized():toAngle()+ang(50,0,0))
            }
        }
    }
    
    function teleportContraptionFixed(Pos:vector, Angle:angle, E:entity, HoloEntityNumber:number, Offsets:array, OffsetsAng:array)
    {
        I = 0
        holoPos(HoloEntityNumber,Pos)
        holoAng(HoloEntityNumber,Angle)
        E:setPos(Pos)
        E:setAng(Angle)
        
        while(I<Constraints:count())
        {
            I++
            NewPosition = holoEntity(HoloEntityNumber):toWorld(Offsets[I,vector])
            NewAngle = holoEntity(HoloEntityNumber):toWorld(OffsetsAng[I,angle])
            Constraints[I,entity]:setPos(NewPosition)
            Constraints[I,entity]:setAng(NewAngle)
            if(Constraints[I,entity]:model()=="models/slyfo_2/miscequipmentsolar.mdl")
            {
                Constraints[I,entity]:setAng((TELESYSTEMLIB_SUN:pos()-NewPosition):normalized():toAngle()+ang(50,0,0))
            }
        }
    }
}
