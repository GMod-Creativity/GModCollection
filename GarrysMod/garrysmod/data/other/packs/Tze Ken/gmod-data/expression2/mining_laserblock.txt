@name Laser Block
@inputs 
@outputs Laser:entity Panel:entity AimAng:angle PivotPos:vector
@persist I TargetOwner:entity Type:string Lasers:array
@trigger 

if(first()|dupefinished()){
    TargetOwner=findPlayerByName("Noone")
    Type="sa_mining_laser"
    findByClass(Type)
    Laser=find()
    Panel=entity()
    Panel:setMass(1000)
    Panel:setAlpha(255)
    noCollideAll(Panel,1)
}

if(Laser:owner():name()!=TargetOwner:name()){
    findByClass(Type)
    Lasers=findToArray()
    I++
    if(I>Lasers:count()){
        I=0
    }
    Laser=Lasers:entity(I)
}

interval(20)
if(TargetOwner:aimEntity()!=entity()){
    if(Laser:type()=="sa_mining_icelaser"){
        AimAng=-Laser:angles()
        Panel:applyAngForce(angnorm(-Panel:angles()-AimAng)*(Panel:boxSize():length()^2.6)-Panel:angVel()*(Panel:boxSize():length()^2.2))
    
        PivotPos=Laser:pos()+Laser:angles():up()*30
        Panel:applyForce(((PivotPos-Panel:pos())*40-Panel:vel())*Panel:mass())
    }
    
    if(Laser:type()=="sa_mining_laser"){
        AimAng=-Laser:angles()+ang(90,0,0)
        Panel:applyAngForce(angnorm(-Panel:angles()-AimAng)*(Panel:boxSize():length()^2.6)-Panel:angVel()*(Panel:boxSize():length()^2.2))
    
        PivotPos=Laser:pos()+Laser:angles():forward()*-50
        Panel:applyForce(((PivotPos-Panel:pos())*40-Panel:vel())*Panel:mass())
    }
}
