@name AirPlane Control 
@inputs Pod:wirelink 
@persist Prop:entity Fire Prop2:entity Props:array ThrustW ThrustA ThrustS ThrustD ThrustDown ThrustUp 
@persist
@outputs Gun Slot1
@model models/props_lab/reciever01a.mdl
runOnTick(1)
timer("delete",10000)
#Variables
E= entity()
P= owner()
EW= entity():isConstrainedTo()
EWW= EW:isConstrainedTo()
EWWW= EWW:isConstrainedTo()
EWWWW= EWWW:isConstrainedTo()
EWWWWW= EWWW:isConstrainedTo()
LS= owner():lastSaid() 
if(EW:isVehicle()){
if(first()){
    E:setMass(1)
    EW:setMass(10)
    EW:propGravity(100)
    E:propGravity(100)
    print("Slot1 = Alt")
    print("Gun = Mouse1")
    print("Rockets(Spawned At Expression2) = Mouse2")
    print("Re-Read in console (~)")
    hint("We Recommended Not using models/xqm/jetbody3.mdl",7)
    hint("Please Weld Expression2 to Aircraft",70)
    timer("weightless",10000)
    }
if(clk("weightless")){
    EW:setMass(10)
    timer("Weightless",10000)
}
#Controls
if(Pod["W",number]==1){
    ThrustW=1}
if(Pod["A",number]==1){
    ThrustA=1}
if(Pod["S",number]==1){
    ThrustS=1}
if(Pod["D",number]==1){
    ThrustD=1}
if(Pod["Space",number]==1){
    ThrustUp=1}
if(Pod["Alt",number]){
    ThrustDown=1}
if(Pod["Mouse1",number]==1){
    Gun=1}

if(Pod["W",number]==0){
    ThrustW=0}
if(Pod["A",number]==0){
    ThrustA=0}
if(Pod["S",number]==0){
    ThrustS=0}
if(Pod["D",number]==0){
    ThrustD=0}
if(Pod["Space",number]==0){
    ThrustUp=0}
if(Pod["Alt",number]==0){
    ThrustDown=0}
if(Pod["Mouse1",number]==0){
    Gun=0}
    #Missle Launcher
if(changed(Pod["Mouse2",number]==1) & Pod["Mouse2",number]==1){
            Prop2 = propSpawn("models/props_phx/ww2bomb.mdl", E:pos()+(vec(0,0,-100)), P:eyeAngles(), 0)
    Prop2:setMass(100)
    Prop2:setTrails(10,10,10,"trails/smoke",vec(100,100,100),255)
    Props:pushEntity(Prop)
    Prop2:propGravity(0)
}
if(EW:driver():keySprint()){
    EW:setAng(ang(0,0,0)+EW:angles())
    EWW:setAng(ang(0,0,0)+EWW:angles())
    EWWW:setAng(ang(0,0,0)+EWWW:angles())
    EWWWW:setAng(ang(0,0,0)+EWWWW:angles())
    EWWWWW:setAng(ang(0,0,0)+EWWWWW:angles())
}
if(clk("delete")&Props:count()){
    Props:shiftEntity():propDelete()
    Props:propDelete()
}
    #ApplyForce
    Prop2:applyForce(Prop2:forward()*99999999)
        if(duped()){
            reset()
        }
if(ThrustD){
    EW:applyOffsetForce(EW:toWorld(vec(500,0,0))-EW:pos(),EW:toWorld(vec(250,0,0))-EW:pos())    
}
 if(ThrustS){
    EW:applyOffsetForce(EW:toWorld(vec(0,-500,0))-EW:pos(),vec(0,-250,0)-EW:pos())    
}

if(ThrustA){
    EW:applyOffsetForce(EW:toWorld(vec(-500,0,0))-EW:pos(),EW:toWorld(vec(-250,0,0))-EW:pos())
}

if(ThrustW){
    EW:applyOffsetForce(EW:forward()*500,EW:forward()*250)    
}

if(ThrustUp){
    EW:applyOffsetForce(EW:up()*500,EW:up()*250)    
}
}else{
selfDestructAll()
hint("Weld to a veichle",5)
}
if(duped()){
reset()
}

























