@name Auto-Drone
@persist Vec:vector L Prop:entity LS2 C EWME:entity
@outputs Fire 
@inputs 
runOnTick(1)
runOnChat(1)
#Variable
    E = entity()
    P = owner()
    LS = P:lastSaid()
    Ran = random(255,0),random(255,0),random(255)
    EW = E:isConstrainedTo()
    EWM = E:getConstraints()
    Pos = (find():pos() - EW:pos()) + EW:massCenterL() + vec(0,0,50)
    #Targeting & Shooting Mechanism
    findByClass("player")
    findSortByDistance(E:pos()) 
    findExcludePlayer(P)
#Target Props 
#   findIncludePlayerProps(find())
if(chatClk(P)){
    if(owner():lastSaid()=="/off"){
    hideChat(1)
    L = 0
    C = 0
    Fire = 0
    Fire3 = 0 
    LS2 = 0
    EW:setAng((P:pos()+vec(0,0,60)-EW:pos()):toAngle())
}
}
if(chatClk(P)){
    if(owner():lastSaid()=="/on"){
    hideChat(1)
    L = 1
}
}

    
    if(L){
    if (find():pos():distance(EW:pos())<5500){Fire=999999999, C=1}
    if (find():pos():distance(EW:pos())>5500){Fire=0, C=0}
    if (find():pos():distance(EW:pos())<2500){Fire3=1, C=1}
    if (find():pos():distance(EW:pos())>2500){Fire3=0, C=0}
}
    #Pod wirelink
#Instructions / moving prop
if(first()){
    printColor(vec(random(255,0),random(255,0),random(255)),"Place this chip on a frozen or unfrozen prop.")
        EW:setAng((P:pos()+vec(0,0,60)-EW:pos()):toAngle())
        E:setAlpha(0)
        E:setMass(0)
        EW:setMass(1)
        Prop = propSpawn("models/hunter/plates/plate.mdl", EW:pos()+(vec(0,0,0)), (ang(0,0,0)), 1)
        L = 1
        C = 0
        Fire3 = 0
        E:propGravity(0)
        EWME:propGravity(0)
    }
            
            if(C&find():inVehicle()|C&find():isCrouch()){C = 0,
                Fire2 = 1
            }else{
    Fire2 = 0
            }
            if(Fire2){EW:setAng((find():pos()+vec(0,0,10)-EW:pos()):toAngle())
                Fire = 1
}else{
    Fire2 = 0
}
    if(C){
EW:setAng(Pos:toAngle())
}else{
    C = 0
}
#Follows you
if(Fire3){
Vec = find():pos()-(entity():pos()-vec(0,60,100))
}else{
Vec = Prop:pos()-(entity():pos()-vec(60,160,60))
}
for(I=1,EWM:count()){
    EWME = EWM[I,entity]
    EWM[I+1,entity]:setMass(0)
}
EW:applyOffsetForce($Vec*50+Vec,Vec*25)

if(duped()){
    reset()
}

#SetMass E2
#[
@name SetMass E2
runOnTick(1)
EW = entity():isConstrainedTo()
if(first()){
    EW:setMass(0)
    timer("delete",1)  
}
if(clk("delete")){
    selfDestruct()
}
]#
