@name Auto-Turret 
@persist Vec:vector L C 
@outputs Fire 
@inputs 
runOnTick(1)
runOnChat(1)
#Variable
    E = entity()
    P = owner()
    LS = P:lastSaid()
    Ran = random(255,0),random(255,0),random(255)
    EW = E:isConstrainedTo()
    EWW = EW:isConstrainedTo()
    Pos = (find():pos() - EW:pos()) + EW:massCenterL()
    #Targeting & Shooting Mechanism
    if(first()){
        printColor(vec(random(255,0),random(255,0),random(255)),"Place this chip on a frozen or unfrozen prop.")
        printColor(vec(random(255,0),random(255,0),random(255)),"Wire turret(s) to Fire and wait for an unsuspecting victim :D!(When first placed the turret faces you!)")
        printColor(vec(random(255,0),random(255,0),random(255)),"Also copy the SetMass E2 at the very bottom of the chip and in a new e2 workspace paste the code and spawn them on the turrent(s)!)")
        printColor(vec(random(255,0),random(255,0),random(255)),"Only if you want a more stable following turret.")
        printColor(vec(random(255,0),random(255,0),random(255)),"Type !off to turn off the E2, type something else to turn it back on.")
        EW:setAng((P:pos()+vec(0,0,60)-EW:pos()):toAngle())
        E:setAlpha(0)
        E:setMass(0)
        timer("restart",1000)
        L = 1
        Fire = 0
        C = 0
    }
#Target Props
#   findIncludePlayerProps(find())
if(chatClk(P)){
    if(owner():lastSaid()=="!off"){
    hideChat(1)
    L = 0
    C = 0
    Fire = 0
    Fire2 = 0
}
}
if(chatClk(P)){
    if(owner():lastSaid()=="!on"){
    hideChat(1)
    L = 1
}
}
    if(L){
        findByClass("player")
        findSortByDistance(E:pos())
        findExcludePlayer(P)
        if (find():pos():distance(E:pos())<1500){Fire=999999999, C=1}
        if (find():pos():distance(E:pos())>1500){Fire=0, C=0}
        if(!find():isAlive()){
    L = 0
}else{
L = 1
}
}
    #Pod wirelink
#Instructions / moving prop
    if(clk("restart")){
    timer("restart",100)
    EWW:setMass(0)}

            
            if(C&find():inVehicle()|C&find():isCrouch()){C = 0,
                Fire2 = 1
            }else{
    Fire2 = 0
            }
            if(Fire2){EW:setAng(Pos:toAngle())
                Fire = 1
}else{
    Fire2 = 0
}
    if(C){
EW:setAng((find():pos()+vec(0,0,40)-EW:pos()):toAngle())
}else{
    C = 0
}
#Follows you
#SetMass E2
#[
@name SetMass E2
runOnTick(1)
EW = entity():isConstrainedTo()
if(first()){
    EW:setMass(0)
    timer("delete",1)  
}
if(clk("delete")){
    selfDestruct()
}
]#
