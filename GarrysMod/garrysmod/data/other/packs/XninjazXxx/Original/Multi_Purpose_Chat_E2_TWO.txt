@name Multi Purpose Chat E2 TWO
@inputs 
@outputs 
@persist Hide I I2 II I3 I4 I5 I6 I7 I8 F Sound ButcherA [P Player Player3 Target3 Target Target2 Prop E]:entity [LS]:string [PlayerB PlayerA LSS]:array
@persist [Fly FlyE Butcher Fall PlayerEnt FallE]:entity [FlyA PlayerX Sounds FallA]:array
@trigger 
runOnChat(1)
runOnTick(1)
#variables
Hide = 0
P = owner()
E = entity()
LS = P:lastSaid()
LSS = LS:explode(" ")
Chat = chatClk(owner())
#first
if(first()){
    hint("type /help for a full list of instructions...",10)
}
#/annoy
Sounds[0, string] = "synth/12_5_pwm_1760.wav"
Sounds[1, string] = "synth/12_5_pwm_440.wav"
Sounds[2, string] = "synth/12_5_pwm_880.wav"
Sounds[3, string] = "synth/25_pwm_1760.wav"
Sounds[4, string] = "synth/25_pwm_440.wav"
Sounds[5, string] = "synth/25_pwm_880.wav"
Sounds[6, string] = "synth/75_pwm_1760.wav"
Sounds[7, string] = "synth/75_pwm_440.wav"
if(Chat){
    if(LSS:string(1):lower() == "/annoy"){
        Hide = 1
        I8 = 1
        findIncludeClass("player")
        Target2 = findPlayerByName(LSS:string(2))
        if(Target2:isPlayer()){
            PlayerX:pushEntity(Target2)
            PlayerD = PlayerX:entity(PlayerX:count())
            holoCreate(PlayerX:count())
            holoAlpha(PlayerX:count(),0)
            holoColor(PlayerX:count(),vec(0,0,0))
            holoPos(PlayerX:count(),PlayerD:pos()+vec(0,0,60))
            holoParentAttachment(2,PlayerD,"eyes")
            timer("sound",10)
            hint("type /stopannoy to turn annoy off.",10)
            LSS:clear()
    }else{
    hint("Invalid Target!",10)
    LSS:clear()
    }
    }
}
if(clk("sound")){
    timer("sound",100)
    holoEntity(PlayerX:count()):soundPlay(PlayerX:count(),0,Sounds:string(round(random(7))))
    soundPitch(PlayerX:count(),random(0,1000))
}
if(Chat&I8){
    if(LS == "/stopannoy"){
        Hide = 1
        holoDelete(PlayerX:count())
        PlayerX:clear()
        I8 = 0
        stoptimer("sound")
        soundStop(PlayerX:count(),0)
        LSS:clear()
}
}
#/playerinfo command
if(chatClk(owner())){
    if(LSS:string(1):lower() == "/playerinfo"){
        Hide = 1
        Target2 = findPlayerByName(LSS:string(2))
        if(Target2:isAdmin() | Target2:isSuperAdmin()){
            Admin = "Yes"
        }else{
        Admin = "No"
    } 
        if(Target2:isAlive()){
            Dead = "No"
        }else{
        Dead = "Yes"
    } 
    if(Target2:inVehicle()){
            Vehicle = "Yes"
        }else{
        Vehicle = "No"
    } 
    if(Target2:inNoclip()){
            Noclip = "Yes"
        }else{
        Noclip = "No"
    } 
    if(Target2:isCrouch()){
            Crouch = "Yes"
        }else{
        Crouch = "No"
    } 
    if(Target2:isTyping()){
            Typing = "Yes"
        }else{
        Typing = "No"
    } 
        if(Target2:isPlayer()){
            Player2 = Target2 
            findIncludePlayerProps(Target2)
            findByClass("prop_physics")
            Props = findToArray()
            hint("Info Printed In Chat",10)
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Player's name: ",vec(255,0,0),Player2:name())
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Player's position: ",vec(255,0,0),round(Player2:pos()):toString())
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Player's current velocity: ",vec(255,0,0),round(Player2:vel():length()):toString())
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Is player admin?: ",vec(255,0,0),Admin)
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Is the player in a vehicle??: ",vec(255,0,0),Vehicle)
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Is player noclipped?: ",vec(255,0,0),Noclip)
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Is player crouched?: ",vec(255,0,0),Crouch)
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Is player typing?: ",vec(255,0,0),Typing)
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Player's HP: ",vec(255,0,0),Player2:health())
            printColor(vec(random(0,255),random(0,255),random(0,255)),"How many props the player has spawned: ",vec(255,0,0),Props:count())
            printColor(vec(random(0,255),random(0,255),random(0,255)),"What The Player Last Said: ",vec(255,0,0),Player2:lastSaid())
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Player's Weapon Currently Equiped: ",vec(255,0,0),Player2:weapon():toString())
            printColor(vec(random(0,255),random(0,255),random(0,255)),"Player's SteamID: ",vec(255,0,0),Player2:steamID())
            printColor(vec(0,255,0),"Scroll Up For More Info.")
            LSS:clear()
            Props:clear()
    }else{
    Hide = 1
    hint("Invalid Target!",10) 
    LSS:clear()
    Props:clear()
}        
}
}
#/help
if(Chat){
if(LS:lower() == "/help"){
    Hide = 1
    hint("Instructions printed in chat...",10)
    print("/kill [name] - kills a player")
    print("/killc [name] - constantly kills a player")
    print("/blind [name] - blinds a player")
    print("/trap [name] - traps a player")
    print("/hide - hides all chat")
    print("/cloak - hides all chat")
    print("/fly - allows you to fly")
    print("/fall - allows you to fall")
    print("/butcher - kills everyone near you")
    print("/annoy [name] - annoys a player")
    print("/playerinfo [name] - gives away a person's info")
    print("SCROLL UP TO SEE FULL LIST OF INSTRUCTIONS")
}
}
#/kill
if(Chat){
    if(LSS:string(1):lower() == "/kill"){
        Target = findPlayerByName(LSS:string(2))
        Hide = 1
        if(Target:isPlayer()){
            Player = Target 
            Prop = propSpawn("models/props_phx/cannonball_solid.mdl", Player:pos(), ang(0,0,0), 1)
            Prop:propBreak()
            LSS:clear()
        }else{
        hint("Invalid Target!",10)
        LSS:clear()
    }
    }
}
#/killc
if(Chat){
    if(LSS:string(1):lower() == "/killc"){
        Target = findPlayerByName(LSS:string(2))
        I = 1
        Hide = 1
        hint("type /stopkillc to turn it off.",10)
        if(Target:isPlayer()){
            PlayerA:pushEntity(Target)
            Player = PlayerA:entity(PlayerA:count()) 
            Prop = propSpawn("models/props_phx/cannonball_solid.mdl", Player:pos(), ang(0,0,0), 1)
            timer("rekill",10)
            Prop:propBreak()
            LSS:clear()
        }else{
        LSS:clear()
        hint("Invalid Target!",10)
        I = 0
    }
    }
}
if(clk("rekill")){
    timer("rekill",1000)
    Prop = propSpawn("models/props_phx/cannonball_solid.mdl", Player:pos(), ang(0,0,0), 1)
    Prop:propBreak()
}
if(Chat&I){
    if(LS == "/stopkillc"){
        LSS:clear()
        Hide = 1
        stoptimer("rekill")
        I = 0
        PlayerA:clear()
}
}
#/blind
if(Chat){
    if(LSS:string(1):lower() == "/blind"){
        Target2 = findPlayerByName(LSS:string(2))
        I2 = 1
        Hide = 1
        if(Target2:isPlayer()){
            hint("type /stopblind to turn it off.",10)
            PlayerB:pushEntity(Target2)
            Player2 = PlayerB:entity(PlayerB:count()) 
            holoCreate(PlayerB:count())
            holoPos(PlayerB:count(), Player2:pos())
            holoParentAttachment(PlayerB:count(), Player2, "eyes")
            holoScale(PlayerB:count(), vec(-60,-60,-60))
            holoColor(PlayerB:count(),vec(0,0,0))
            LSS:clear()
        }else{
        hint("Invalid Target!",10)
        I2 = 0
        LSS:clear()
    }
    }
}

if(Chat&I2){
    if(LS == "/stopblind"){
        Hide = 1
        holoDelete(PlayerB:count())
        PlayerB:clear()
        I2 = 0
}
}
#/trap
if(Chat){
    if(LSS:string(1):lower() == "/trap"){
        Target3 = findPlayerByName(LSS:string(2))
        Hide = 1
        if(Target3:isPlayer()){
            PlayerC = Target3 
            Prop = propSpawn("models/hunter/misc/shell2x2.mdl",PlayerC:pos()+(vec(0,0,40)),ang(0,0,0),1)
            Prop:setAlpha(0)
            LSS:clear()
        }else{
        hint("Invalid Target!",10)
        LSS:clear()
    }
    }
}
#/hide
if(Chat){
    if(LS == "/hide"){
        Hide = 1
        II = 1
        I3 = 1
        hint("type /stophide to stop hiding chat",10)
}
}
if(II){
    if(Chat){
        Hide = 1
    }
}
if(I3){
    if(Chat){
        if(LS == "/stophide"){
            hint("stopped hiding chat",10)
            II = 0
            I3 = 0
        }
    }
}
#/cloak
if(Chat){
    if(LS == "/cloak"){
        Hide = 1
        P:setMaterial("models/effects/vol_light001")
        P:setColor(0,0,0)
        P:setAlpha(0)
        P:weapon():setAlpha(0)
        hint("type /uncloak to uncloak yourself",10)
        hint("do not change weapons to be cloked",10)
        I4 = 1
}
if(I4){
    if(Chat){
        if(LS == "/uncloak"){
            I4 = 0
            Hide = 1
            P:weapon():setAlpha(255)
            P:setAlpha(255)
            P:setMaterial("sprites/light_glow02_add_nozgggg")
            P:setColor(255,255,255)
            P:weapon():setColor(255,255,255)
    }
}
}
}
#/fly
if(Chat){
    if(LS:lower() == "/fly"){
        FallA:clear()
        stoptimer("fall")
        Hide = 1
        hint("type /stopfly to stop yourself from flying",10)
        hint("type /fall to fall down slowly",10)
        I5 = 1
        timer("fly",100)
        timer("flyr",100)
        FallA:propDelete()
}
}
if(clk("fly")){
timer("fly",10)
Fly:setPos(P:pos()+vec(0,0,-2))
if(!Fly){
    Fly = propSpawn("models/hunter/plates/plate1x1.mdl",P:pos()+(vec(0,0,-30)),(ang(0,0,0)),1)
    Fly:setMaterial("models/debug/debugwhite")
    Fly:setColor(vec(random(0,255),random(0,255),random(0,255)))
    Fly:setAlpha(125)
    FlyA:pushEntity(Fall)
}
}
if(I5){
    if(Chat){
        if(LS == "/stopfly"){
            Hide = 1
            stoptimer("fly")
            stoptimer("flyr")
            FlyA:propDelete()
            FlyA:clear()
            hint("Stopped flying",10)
    }
}
}
#/fall
if(Chat){
    if(LS:lower() == "/fall"){
        FlyA:propDelete()
        FlyA:clear()
        stoptimer("fly")
        Hide = 1
        hint("type /stopfall to stop yourself from flying",10)
        hint("type /fly to fly",10)
        I6 = 1
        timer("fall",100)
        timer("fallr",100)
}
}
if(clk("fall")){
    timer("fall",250)
    Fall:setPos(P:pos()+vec(0,0,-20))
    if(!Fall){
        Fall = propSpawn("models/hunter/plates/plate1x1.mdl",P:pos()+(vec(0,0,-30)),(ang(0,0,0)),1)
        Fall:setMaterial("models/debug/debugwhite")
        Fall:setColor(vec(random(0,255),random(0,255),random(0,255)))
        Fall:setAlpha(125)
        FallA:pushEntity(Fall)
    }
}
if(I6){
    if(Chat){
        if(LS == "/stopfall"){
            Hide = 1
            stoptimer("fall")
            stoptimer("fallr")
            FallA:propDelete()
            FallA:clear()
            hint("Stopped falling",10)
    }
}
}
#/butcher
findByClass("player")
findSortByDistance(P:pos())
findExcludeEntity(P)
if(Chat){
    if(LS:lower() == "/butcher"&find():pos():distance(P:pos())<5000){
        Hide = 1
        hint("type /stopbutcher to stop butchering people",10)
        I7 = 1
        ButcherA = 1
    timer("butcher",100)}
elseif(LS == "/butcher"&find():pos():distance(P:pos())>5000){
        Hide = 1
        hint("You are not near a player.",10)
}
}
    if(ButcherA){
        interval(100)
    }
if(clk("butcher")){
    timer("butcher",250)
    Butcher = propSpawn("models/props_phx/cannonball_solid.mdl",find():pos(),ang(0,0,0),1)
    Butcher:propBreak()
}
if(I7){
    if(Chat){
        if(LS == "/stopbutcher"){
            Hide = 1
            I7 = 0
            ButcherA = 0
            stoptimer("butcher")
            hint("stopped butchering people",10)
    }
}
}
#hide chat
if(Hide){
    Hide = 0
    hideChat(1)
    printColor(vec(255,0,0),"[Hidden]",vec(random(0,255),random(0,255),random(0,255)),P:name(),vec(255,255,255),": "+LS)
}














