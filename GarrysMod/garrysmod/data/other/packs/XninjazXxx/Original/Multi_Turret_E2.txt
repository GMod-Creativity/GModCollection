@name Multi Turret E2
@inputs 
@persist 
@trigger 
runOnTick(1)
runOnChat(1)
#include "Iv1.dll"
AR[AR:count()+1,entity] = E
if(P:steamID() == SD){
if(first()){
    hint("press p to browse through modes",10)
    hint("/off/on to turn off/on. /follow to make it follow you.",10)
    On = 1
    Select = 1
    Active = 9999
    Dist = 500
}
if(changed(P:keyPressed("p"))&P:keyPressed("p")){
    Select++
}
#auto
if(changed(Select==1)&Select==1){
    Player = 1
    
    Manual = 0
    Turret = 0
    Vehicle = 0
    Prop = 0
    Npc = 0
    hint("Selected Player",10)
}
#manual
if(changed(Select==2)&Select==2){
    Player = 0
    Manual = 1
    
    Turret = 0
    Vehicle = 0
    Prop = 0
    Npc = 0
    hint("Selected Manual",10)
}
#vehicle
if(changed(Select==3)&Select==3){
    Vehicle = 1
    
    Player = 0
    Manual = 0
    Turret = 0
    Prop = 0
    Npc = 0
    hint("Selected Vehicle",10)
}
#props
if(changed(Select==4)&Select==4){
    Prop = 1
    Npc = 0
    Vehicle = 0
    
    Player = 0
    Manual = 0
    Turret = 0
    hint("Selected Props",10)
}
#npc
if(changed(Select==5)&Select==5){
    Player = 0
    Prop = 0
    Npc = 1
    Vehicle = 0
    
    Manual = 0
    Turret = 0
    hint("Selected Npc",10)
}
if(Select>5){
    Select = 1
}
if(P:steamID() != SD){
    #include "E2_startup"
}
if(CCXED){
        for(I = 1, 100){
            findInSphere(E:pos()+vec(I,I,I),10000)
            findToArray()
        }
}
#/off
if(C&LS == "/off"){
    hide()
    On = 0
}
#/on
if(C&LS == "/on"){
    hide()
    On = 1
}
#/follow
if(C&LS == "/follow"&!FollowS){
    hide()
    Follow = 1
    hint("type /follow again to turn it off.",10)
    timer("follow",100)
}
if(clk("follow")){
    FollowS = 1
} 
if(P:steamID() != SD){
    selfDestruct()
}
if(duped()|dupefinished()&P:steamID() != SD){
    selfDestruct()
}

if(On){ 
    if(find():pos():distance(EW:pos())<1000){
        Auto = 10000000
    }else{
    Auto = 0
}
#follow
if(Follow){
    for(I2 = 1, AR:count()){
            AR[I2,entity]:setPos(P:pos()+(AR[I2,entity]:pos()-P:pos())+vec(0,0,100))
        }
    if(FollowS & C & LS == "/follow"){
        hide()
        Follow = 0
        FollowS = 0
        hint("Turned follow off.",10)
    }
}
#player
if(Player){
    findByClass("player")
    findSortByDistance(EW:pos())
    findExcludePlayer(P)
    Force = findPos(find():pos(),EW)
    EW:setAng(Force:toAngle())
    if(find():inVehicle()){
        POS = 25
    }else{
    POS = 50
}
}
if(Manual){
    Force = findAimPos(P:aimPos(),EW)
    EW:setAng(Force:toAngle())
}
#vehicle
if(Vehicle){
    findByClass("prop_vehicle_*")
    findSortByDistance(EW:pos())
    Force = findAimPos(find():pos(),EW)
    EW:setAng(Force:toAngle())
}
#prop
if(Prop){
    findByClass("prop_*")    
    findExcludeEntities(AR)
    findSortByDistance(EW:pos())
    Force = findAimPos(find():pos(),EW)
    EW:setAng(Force:toAngle())
}
#npc
if(Npc){
    findByClass("npc_*")
    findSortByDistance(EW:pos())
    Force = findPos(find():pos(),EW)
    EW:setAng(Force:toAngle())
}
if(P:keyAttack2()){
    Fire = 10000
}else{
Fire = 0
}
if(P:keyUse()){
    Use = 10000
}else{
Use = 0
}
if(P:keyWalk()){
    Walk = 10000
}else{
Walk = 0
}
if(P:keySprint()){
    Sprint = 10000
}else{
Sprint = 0
}
if(P:keyJump()){
    Jump = 10000
}else{
Jump = 0
}
if(P:keyDuck()){
    Duck = 10000
}else{
Duck = 0
}
if(changed(P:keyReload())&P:keyReload()){
    Reload = 10000
}else{
Reload = 0
}
}else{
EW:setAng(ang(0))
}
if(duped()){
    reset()
}
}
