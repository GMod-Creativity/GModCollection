@name Riot-Shield
@inputs 
@outputs Turret
@persist EW:entity Vec:vector
@trigger 
@model 
    LIMIT = 1 #DO NOT MESS WITH THIS SETTING OR ELSE IT WILL BREAK THE E2
    E = entity()
    P = owner()
    CONTROL = 0 # 1 = Auto-Riot Shield. 0 = Custom Riot Shield. Anything above 1 destroys the chip. Anything below 0 destroys the chip.
    
    if ( CONTROL == 0 ){
    EW = E:isConstrainedTo()
    Vec = owner():pos() - EW:pos() + vec(0,0,0)
    
    CC = Vec:setZ(0):normalized()*130
    L = CC:cross(vec(0,0,0.1))*angnorm(owner():angles():yaw()-E:angles():yaw())
    
    Vecc = Vec + vec(0,0,10) - CC + L
    Vec2 = quat(Vec:toAngle())/quat(EW)
       
    LO = EW:toLocal(rotationVector(Vec2)+EW:pos())
    
    if(first()){
        E:setAlpha(0)
        E:setMass(1)
        EW:setAlpha(150)
    EW:setMass(99)
    interval(100)
    hint("Place the chip in the middle of a prop.",5)
}
    if(EW:type()=="prop_physics"){
        timer("apply",1)
}else{
    selfDestruct()
    hint("Spawn this chip on a prop.",5)
}
        if(clk("apply")){
            EW:applyTorque((300*LO - 12*EW:angVelVector())*EW:inertia())
            EW:applyOffsetForce((Vecc - EW:vel()/2)*EW:mass(),Vecc)
              
}
}
if(P:keyAttack2()){
Turret = 1}else{
Turret = 0
}
if(changed(P:keyUse())&P:keyUse()){
    EW:applyForce(P:aimPos()*999999-entity():pos())
}


if( CONTROL == 1 ){
    if(first()){
    E:setAlpha(0)
    EW = propSpawn("models/props_lab/blastdoor001c.mdl", E:pos(), E:eyeAngles(), 0)
    EW:setAlpha(150)
    EW:setMass(100)
    interval(100)
     
}
    Vec = owner():pos() - EW:pos() + vec(0,0,0)
    
    CC = Vec:setZ(0):normalized()*130
    L = CC:cross(vec(0,0,0.1))*angnorm(owner():angles():yaw()-E:angles():yaw())
    
    Vecc = Vec + vec(0,0,10) - CC + L
    Vec2 = quat(Vec:toAngle())/quat(EW)
       
    LO = EW:toLocal(rotationVector(Vec2)+EW:pos())             
if(P:keyAttack2()){
Turret = 1}else{
Turret = 0
}
if(changed(P:keyUse())&P:keyUse()){
    EW:applyForce(P:aimPos()*999999-entity():pos())
}

if(EW:type()=="prop_physics"){
        timer("apply",1)
}else{
    selfDestruct()
}
        if(clk("apply")){
            EW:applyTorque((300*LO - 12*EW:angVelVector())*EW:inertia())
            EW:applyForce((Vecc - EW:vel()/2)*EW:mass())
              
}
}
if(CONTROL>LIMIT){
    selfDestructAll()
    hint("Make the variable CONTROL either 1 or 0",5)
}
if(LIMIT>1){
    selfDestructAll()
    hint("MAKE THE VARIABLE LIIT 1",5)
}
if(LIMIT==0){
    selfDestructAll()
    hint("MAKE THE VARIABLE LIIT 1",5)
}

