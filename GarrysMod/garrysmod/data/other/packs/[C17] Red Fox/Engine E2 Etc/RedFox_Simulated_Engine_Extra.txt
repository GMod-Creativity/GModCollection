@name RedFox Simulated Engine Extra
@inputs [Pod Cam]:wirelink [Base]:entity Brake Gear
@outputs CamOn BrakeL ReverseL LightL
@outputs Light LightA Ind FOV Brightness LowBeamFov HighBeamFov LowBeamBrightness HighBeamBrightness
@outputs [WLight ReverseWLight BrakeWLight]:vector
@persist  HeadlightsKey CamKey Active
@persist Count Cnt Cnt1 Cnt2
@persist UseWireBrakeLight UseWireLight UseWireReverseLight BrakeWLightColor:vector WLightColor:vector ReverseWLightColor:vector

@persist ReverseGearNumber  


##############################################
##############################################
#####                                   ######
#####       [C17] Red Fox's Extra E2      ######
#####                                   ######
##############################################
##############################################

if( duped() ){ reset() }

if (first()) 
{
   
    InverseBaseSpeed=1 #If your car is braking when trying to go forward, you either use -1 or 1
    
    #Whether you use Wire Lights instead of Wire Sprites turn these on
    UseWireLight=0
    WLightColor=vec(155,0,0)
    
    UseWireBrakeLight=0
    BrakeWLightColor=vec(255,0,0)
    
    UseWireReverseLight=0
    ReverseWLightColor=vec(255,255,255)
    
    LowBeamFov=40
    LowBeamBrightness = 1.5
    
    HighBeamFov=80
    HighBeamBrightness = 2.5
    
    
    
    CamOffset=vec(0,0,70) #Camera position Relative to input: Base
    CamDist=220 #Camera distance away from CamOffset position
    Position=Base:pos()+CamOffset
    
    Cam["Position",vector]=Position    
    Cam["Parent",entity]=Base
    Cam["Distance",number]=CamDist

    
    #The number of your reverse gear
    ReverseGearNumber=-1
    
    
##################
}
    Active = Pod["Active",number]
    DriverHint = Pod["Entity",entity]
    Driver = Pod["Driver",entity]

    HeadlightsKey=Driver:keyPressed("h")
    CamKey=Driver:keyPressed("g")
    V=Driver:driver():keyPressed("v")

    SpeedB=(Base:velL():x()/14.7)*InverseBaseSpeed #if its braking when going forward you either make it negative or positive

    Speed=toUnit("km/h",Base:vel():length())
   




############################!engine starter!#########################
interval(100)    
        
    if(changed(V==0)& V==1)
        {
            Cnt2++
        }    
    
    if(changed(HeadlightsKey)& HeadlightsKey)    
        {
            Count++
        }   
    
    if(changed(Active)&(Active))
        {
            DriverHint:printDriver("-Controls-")
            DriverHint:printDriver("F to start and Shift to use Clutch | R to reset gears")
            DriverHint:printDriver("W/A/S/D to control the car | Space is handbrake | Alt for full throttle")
            DriverHint:printDriver("H for headlights | G for 3rd or 1st person camera")           
            DriverHint:printDriver("M1 and M2 to control gears") 
            
        }
    switch(Count)
    {
        case 1,
        
        Light=1
        if(UseWireLight==0){LightL=1}
            elseif(UseWireLight==1){WLight=WLightColor}
        FOV=LowBeamFov 
        Brightness=LowBeamBrightness 
        LightA=0
        break
            
        case 2,
            
        Light=0 
        if(UseWireLight==0){LightL=1}
            elseif(UseWireLight==1){WLight=WLightColor}
        LightA=1 
        FOV=HighBeamFov 
        Brightness=HighBeamBrightness
        break
            
        default,
            
        Count=0 
        Light=0 
        if(UseWireLight==0){LightL=0}
            elseif(UseWireLight==1){WLight=vec(0,0,0)}
        LightA=0
            
    }  
       
    
    if(CamKey&CamKey){CamOn=!CamOn}

    
    

    if(Gear==ReverseGearNumber)
    {       
        if(UseWireReverseLight==0){ReverseL=1}
            elseif(UseWireReverseLight==1){ReverseWLight=ReverseWLightColor}

    }
        elseif(Gear>=0)
        {
           
            if(UseWireReverseLight==0){ReverseL=0}
            elseif(UseWireReverseLight==1){ReverseWLight=vec(0,0,0)}
        }


    if(Brake>0)
    {          
        if(UseWireBrakeLight==0){BrakeL=1}
            elseif(UseWireBrakeLight==1){BrakeWLight=BrakeWLightColor}        
    }
    elseif(Brake==0)
    {
        if(UseWireBrakeLight==0){BrakeL=0}
            elseif(UseWireBrakeLight==1){BrakeWLight=vec(0,0,0)}        
    }
       
         
