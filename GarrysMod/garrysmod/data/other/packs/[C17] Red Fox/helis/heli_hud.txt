@name Heli_Hud
@inputs EGP:wirelink
@inputs Active Speed
@inputs [Chair MainGun MainGearBox Engine1 Engine2 SecondaryGun]:entity
@outputs PB Pos:vector Solve Calc_On RVec:vector
@persist ScreenRes:vector2 C X Y PB PBm Col8:vector4 Reload_Indicator
@persist Secondary_Ammo_Count Speedometer RPM Num_Engine Gear
@trigger Active

if (changed(Active) & Active)
{   
    
    EGP:egpClear() #Clears out HUD in case something in Fancy Shit changes or a new player with a different resolution uses the HUD. 
    
#==========================Colors and Other Fancy Shit==============================#
    
    #Fancy Shit (On/Off)#
    
    Speedometer = 1 # Speed in KPH or MPH (See Next Line for Unit)

    RPM = 0 # Engine RPM's

    Secondary_Ammo_Count = 0 # Shows Amount of Each Ammo Type
    Reload_Indicator = 1 # Shows When the Gun Has Reloaded    
    Num_Engine = 0
    Gear = 0 # Shows Current Gear of Main Gearbox
    
    #Fancy Shit Options (Must be Turned on Above)#
    
    
    Secondary_Gun_Name = "Coaxial" # Secondary Gun Name (If Enabled Above)   
    Speed_Unit = "KPH" # Use a Wire Speedometer (KPH, MPH, or Gmod units if desired)

    
    #Colors are (RED,GREEN,BLUE,ALPHA)#
    
    Col1 = vec4(255,85,0,255)    # Center Crosshair, Line Decoration, and Fuel Needle Color
    Col2 = vec4(0,0,0,255)       # Circle Color 1
    Col3 = vec4(255,255,255,255) # Circle Color 2
    Col4 = vec4(0,255,0,255)     # Center Crosshair Dot Color
    Col8 = vec4(255,255,255,255) # Text Color
    Shade = 0                   # Darkness of Screen (0-255 with 255 being black)
    
    #Position Changes (Add or subtract from current position if desired)#
    

    SX  = 300 # Speedometer +/- X position
    SY  = 0 # Speedometer +/- Y position  
    ACX = 0 # Ammo Count +/- X position
    ACY = 0 # Ammo Count +/- Y position
    RTX = 0 # Reload Timer +/- X position
    RTY = 0 # Reload Timer +/- Y position
    
#================================Actual HUD Shit====================================#
    
    #Auto-Resolution Detectotron 9000#
    
    ScreenRes = egpScrSize(Chair:driver() ?: owner())
    X = ScreenRes:x()
    Y = ScreenRes:y()
    
    #Shading Box#
    
    EGP:egpBox(500,vec2(X/2,Y/2),vec2(X,Y))
    EGP:egpColor(500,vec4(0,0,0,Shade))
    
    #Crosshair#
    
    holoCreate(1,vec())
    holoScaleUnits(1,vec())
    holoAlpha(1,0)
    
    EGP:egpBox(1,vec2(),vec2())
    EGP:egpCircleOutline(2,vec2(),vec2(5,5))
    EGP:egpCircleOutline(200,vec2(),vec2(20,20))
    EGP:egpParent(2,1)
    EGP:egpParent(200,1)
    EGP:egp3DTracker(1,holoEntity(1):pos())
    EGP:egpParent(1,holoEntity(1))
    EGP:egpColor(2,vec(255,0,0))
    
    EGP:egpColor(200,vec(255,255,255))
    
    EGP:egpLine(3,vec2(X/2,Y/2+7),vec2(X/2,Y/2-7))
    EGP:egpLine(4,vec2(X/2+7,Y/2),vec2(X/2-7,Y/2))
    
    rangerFilter(MainGun)
    rangerPersist(1)
    rangerFilter(entity():getConstraints())
    
    #Decoration Lines#

    EGP:egpLine(10,vec2(X/2+142,Y/2+5),vec2(X/2+142,Y/2-5))
    EGP:egpColor(10,Col1)
    EGP:egpLine(11,vec2(X/2-142,Y/2+5),vec2(X/2-142,Y/2-5))
    EGP:egpColor(11,Col1)
    EGP:egpLine(12,vec2(X/2+174,Y/2+5),vec2(X/2+174,Y/2-5))
    EGP:egpColor(12,Col1)
    EGP:egpLine(13,vec2(X/2-174,Y/2+5),vec2(X/2-174,Y/2-5))
    EGP:egpColor(13,Col1)
    EGP:egpLine(14,vec2(X/2+206,Y/2+5),vec2(X/2+206,Y/2-5))
    EGP:egpColor(14,Col1)
    EGP:egpLine(15,vec2(X/2-206,Y/2+5),vec2(X/2-206,Y/2-5))
    EGP:egpColor(15,Col1)
    EGP:egpLine(16,vec2(X/2+238,Y/2+5),vec2(X/2+238,Y/2-5))
    EGP:egpColor(16,Col1)
    EGP:egpLine(17,vec2(X/2-238,Y/2+5),vec2(X/2-238,Y/2-5))
    EGP:egpColor(17,Col1)
    EGP:egpLine(18,vec2(X/2+270,Y/2+5),vec2(X/2+270,Y/2-5))
    EGP:egpColor(18,Col1)
    EGP:egpLine(19,vec2(X/2-270,Y/2+5),vec2(X/2-270,Y/2-5))
    EGP:egpColor(19,Col1)
    EGP:egpLine(20,vec2(X/2+302,Y/2+5),vec2(X/2+302,Y/2-5))
    EGP:egpColor(20,Col1)
    EGP:egpLine(21,vec2(X/2-302,Y/2+5),vec2(X/2-302,Y/2-5))
    EGP:egpColor(21,Col1)
    EGP:egpLine(22,vec2(X/2+334,Y/2+5),vec2(X/2+334,Y/2-5))
    EGP:egpColor(22,Col1)
    EGP:egpLine(23,vec2(X/2-334,Y/2+5),vec2(X/2-334,Y/2-5))
    EGP:egpColor(23,Col1)
    EGP:egpLine(24,vec2(X/2+366,Y/2+5),vec2(X/2+366,Y/2-5))
    EGP:egpColor(24,Col1)
    EGP:egpLine(25,vec2(X/2-366,Y/2+5),vec2(X/2-366,Y/2-5))
    EGP:egpColor(25,Col1)
    EGP:egpLine(26,vec2(X/2+398,Y/2+5),vec2(X/2+398,Y/2-5))
    EGP:egpColor(26,Col1)
    EGP:egpLine(27,vec2(X/2-398,Y/2+5),vec2(X/2-398,Y/2-5))
    EGP:egpColor(27,Col1)
    EGP:egpLine(28,vec2(X/2+430,Y/2+5),vec2(X/2+430,Y/2-5))
    EGP:egpColor(28,Col1)
    EGP:egpLine(28,vec2(X/2-430,Y/2+5),vec2(X/2-430,Y/2-5))
    EGP:egpColor(28,Col1)
    
    #Tank Diagram#

    
    #Speedometer#
    
    if (Speedometer)
    {
        EGP:egpText(47," " + Speed_Unit,vec2(X/2+175+SX,Y/2-60-SY))
        EGP:egpFont(47,"Lucida Console",15)
        EGP:egpColor(47,Col8)
        EGP:egpText(60,"0",vec2(-20,0))
        EGP:egpFont(60,"Lucida Console",15)
        EGP:egpColor(60,Col8)
        EGP:egpParent(60,47)
    }
    
    #Reload Indicator#
    
    if (Reload_Indicator)
    {
        EGP:egpText(69,"Ready",vec2(X/2-200,Y/2-60))
        EGP:egpFont(69,"Lucida Console",15)
        EGP:egpColor(69,vec4(0,255,0,255))
    }

       
    #RPM#
    
    if (RPM)
    {
        EGP:egpText(70," " + "  RPM",vec2(X/2+175,Y/2+60))
        EGP:egpFont(70,"Lucida Console",15)
        EGP:egpColor(70,Col8)
        EGP:egpText(71,"0",vec2(X/2+155,Y/2+60))
        EGP:egpFont(71,"Lucida Console",15)
        EGP:egpColor(71,Col8)
        
        if (Num_Engine == 2)
        {
            PB = (Engine1:acfPowerbandMax()+Engine2:acfPowerbandMax())/2
            PBm = (Engine1:acfPowerbandMin()+Engine2:acfPowerbandMin())/2
        }
        elseif (Num_Engine)
        {
            PB = Engine1:acfPowerbandMax()
            PBm = Engine1:acfPowerbandMin()
        }
        
    }
    
    #Gear#
    
    if (Gear)
    {
        EGP:egpText(72,"  " + "Gear",vec2(X/2-180,Y/2+60))
        EGP:egpFont(72,"Lucida Console",15)
        EGP:egpColor(72,Col8)
        EGP:egpText(73,"1",vec2(X/2-190,Y/2+60))
        EGP:egpFont(73,"Lucida Console",15)
        EGP:egpColor(73,Col8)
        
        MainGearBox:acfShift(1)
    }
    
    #Secondary Ammo Count#
    
    if (Secondary_Ammo_Count)
    {
        EGP:egpText(100,Secondary_Gun_Name +": ",vec2(X/2+150,Y-90))
        EGP:egpFont(100,"Lucida Console",15)
        EGP:egpColor(100,Col8)
        EGP:egpText(101,"0",vec2(X/2+260,Y-90))
        EGP:egpFont(101,"Lucida Console",15)
        EGP:egpColor(101,Col8)
    }
}

if (Active)
{
    interval(100)

    
    #Gear#
    if (Gear)
    {
        if (MainGearBox)
        {
            G = MainGearBox:acfGear()
        }
    
        if (changed(G))
        {
            EGP:egpSetText(73,""+G)
        }
    }
    
    #RPM#
    if (RPM)
    {
        if (Num_Engine == 2)
        {
            if (Engine1 | Engine2)
            {
                A = round(((Engine1:acfRPM()+Engine2:acfRPM())/2)/50)*50
            }
            
            if (changed(A))
            {
                EGP:egpSetText(71,""+round(A,2))
            }
        } 
        elseif (Num_Engine)
        {
            if (Engine1)
            {
                A = round(Engine1:acfRPM()/50)*50
            }
        
            if (changed(A))
            {
            EGP:egpSetText(71,""+round(A,2))
            }
        }
        
        if (A > PB)
        {
            EGP:egpColor(71,vec4(255,0,0,255))
        }
        elseif (A < PBm)
        {
            EGP:egpColor(71,vec4(0,255,0,255))
        }
        else
        {
            EGP:egpColor(71,Col8)
        }
    }
    
        
    #Speedometer#
    if (Speedometer)
    {
        G = round(Speed)
        
        if (changed(G))
        {
            EGP:egpSetText(60,""+G)
        }
    }
    

    #Secondary Ammo Count#
    if (Secondary_Ammo_Count)
    {
        if (SecondaryGun)
        {
            SC = SecondaryGun:acfAmmoCount()
        }
        
        if (changed(SC))
        {
            EGP:egpSetText(101,""+SC)
        }
    }
   
    
    #Reload Indicator#
    if (Reload_Indicator)
    {
        GunR = MainGun:acfReady()
        
        if (changed(GunR))
        {
            if (GunR)
            {
                EGP:egpSetText(69,"Ready")
                EGP:egpColor(69,vec(0,255,0))
            }
            else
            {
                EGP:egpSetText(69,"Loading...")
                EGP:egpColor(69,vec(255,0,0))
                
                soundStop(1)
            }
        }
    }
    
    #Floating Crosshair#
 if(Solve)
{
    Pos = RVec
}
if(!Solve)
{
    Pos = (rangerOffset(999999999999,MainGun:pos(),MainGun:forward())):pos()
}
    
    
    holoPos(1,rangerOffset(9999999999,MainGun:pos()+MainGun:forward()*100,MainGun:forward()):position())
}
