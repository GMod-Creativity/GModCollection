@name TurretCalcHeliV1.12N
@inputs [Pod,Cam]:wirelink [Gun, GunMain,Chair,Base,CamProp,Driver, GunProp]:entity
@inputs Active NextWeapon PrevWeapon LAtgmReady RAtgmReady SmokeReady HitPos:vector
@inputs ATGMAmmo1 ATGMAmmo2 MissileAmmo MissileAmmo1 AimM
@outputs Count Cnt WL Ops Op1 Op2 Ammo1 Ammo2 Ammo LeftAtgm LeftAtgm1 RightAtgm RightAtgm1 Smokes Reload Pitch DeltaFunction Trig IsAimCalc HoloATGMPosEnt:entity HoloATGMHitPos:vector IgnoreCams:array
@outputs Distance MissileRel ATGMRel Brakes FOV
@persist Elevation Depression Yaw RotateSpeed FOV LocalVel [Position CamOffset CamOffset1 CamOffset2]:vector DistanceCalcMult CH
@persist Rangefinder:ranger CamDist YawLeft YawRight
@persist [Inertia,Hold]:angle CamL:entity User:entity
@persist Active Mouse1 Mouse2 Reload Shift CamKey GunHold ExDist ChangeAmmo AmmoName:string
@persist HudColor:vector HudColor2:vector RealisticGunMovement LeftAtgmKey RightAtgmKey SmokesKey BrakeKey IsAimCalc
@persist D G P Trig Lim:vector Pitch DragFunction HighLim LowLim CalcKey CntCalc CTP GunAng:angle Elevation1 Elevation2 Depression1 Depression2
CamKey=Driver:driver():keyPressed("V")
GunHold=Driver:driver():keyPressed("G")
#ChangeAmmo=Driver:driver():keyPressed("b")

LeftAtgmKey=Driver:driver():keyPressed("1")
RightAtgmKey=Driver:driver():keyPressed("3")

LeftAtgmKey1=Driver:driver():keyPressed("2")
RightAtgmKey1=Driver:driver():keyPressed("4")

SmokesKey=Driver:driver():keyPressed("5")
CalcKey=Driver:driver():keyPressed("N")
BrakeKey=Driver:driver():keyPressed("B")

Ops=ops()
if(first()||dupefinished()|duped()){
    runOnChat(0)
    
    local Drag = 1
    
    local InertiaX=1000
    local InertiaY=1000
    local InertiaZ=1000
	
    Gun:propInertia(vec(InertiaX, InertiaY, InertiaZ))
    Gun:propDrag(Drag)
	###########------------------VARIARBLES-----------------############
    rangerFilter(Gun)
    rangerFilter(entity():getConstraints())
    rangerPersist(1)
    
    Ammo=0
	
    #Hud
    HudColor=vec(25,100,225)
    HudColor2=vec(100,0,200)
    
    #Gun
    Elevation=10 #Degrees Gun can elevate
    Depression=75 #Degress Gun can depress
    YawLeft=90 #Degrees turret can rotate in both yaw directions
    YawRight = 90
    RotateSpeed=10 #Turret Rotation Speed
    Pitch = 60*Trig + 15*!Trig
    Lim = vec(0,Elevation,Depression)
    DistanceCalcMult = 0.0007
    
    RealisticGunMovement=1 #Turret Rotates relative to chasis
    
    Cnb=0
    WL=1
    
    #holoCreate(1)
    #holoAlpha(1,0)
    
    Hold = entity():toLocal(Gun:angles())
    #Inertia = shiftL(ang(Gun:inertia()))
    Inertia = ang(0,0,0)
	
	
    
    if(Ammo == 0)
    {
        AmmoName = "APDS"
	}
    else
    {
        AmmoName = "HEAT"
	}
	
    holoCreate(1)
    holoAlpha(1,0)
    
	###########---------------------END---------------------############
	
    
}

holoPos(1,HitPos)
HoloATGMPosEnt = holoEntity(1)
HoloATGMHitPos = holoEntity(1):pos()

Distance = Base:pos():distance(holoEntity(1):pos())

if(MissileAmmo>=4&MissileAmmo1>=4){MissileRel=0}elseif(MissileAmmo<=0&MissileAmmo1<=0){MissileRel=1}
if(ATGMAmmo1>=4&ATGMAmmo2>=4){ATGMRel=0}elseif(ATGMAmmo1<=0&ATGMAmmo2<=0){ATGMRel=1}
if(BrakeKey){Brakes=1}else{Brakes=0}

if(changed(Active)&Active){
	
#	Driver:printDriver("Press R to turn on the engine")
	#Driver:printDriver("Press V for 3rd or 1st cam")           
	Driver:printDriver("Press G to lock/unlock the gun")
	#Driver:printDriver("Press B to switch ammo")
	#Driver:printDriver("Press Shift to hold gear")
	#Driver:printDriver("Press Alt to use clutch")
	Driver:printDriver("Press N to change to trajectory calculator")
	#Driver:printDriver("Press 1 to fire ATGM")
	#Driver:printDriver("Press 3 to fire Smoke")
	#Driver:printDriver("Current selected ammo: " + AmmoName )
	#Driver:printDriver("To attack from distance use in chat, !h NumberHere to adjust height")
	#Driver:printDriver("To reset use !r on chat")
	if(IsAimCalc==0){Driver:printDriver("Trajectory Calculator OFF")}
	if(IsAimCalc==1){Driver:printDriver("Trajectory Calculator ON")}
	
}
if(AimM==2){
if (~PrevWeapon|~NextWeapon)
{
	FOV = clamp(FOV + (NextWeapon - PrevWeapon) * 20 ,5,90)
}   
}
if(AimM==1){
if (~PrevWeapon|~NextWeapon)
{
	FOV = clamp(FOV + (NextWeapon - PrevWeapon) * 20 ,20,90)
}   
}
if (~Active | ~AimM)
{
	FOV=90
    
} 

if(changed(ChangeAmmo)&ChangeAmmo)
{
	Ammo+=1 
}

if(Ammo>1)
{Ammo=0}

if(Ammo==0)
{
	Ammo1=1
	Ammo2=0
}
elseif(Ammo==1)
{
	Ammo1=0
	Ammo2=1
}

if(changed(Ammo))
{
	Reload = 1
}else{Reload=0}
if(changed(Ammo1==0)&Ammo1==1)
{
	
	Driver:printDriver("HE Selected")   
}
if(changed(Ammo2==0)&Ammo2==1)
{
	
	Driver:printDriver("HEAT Selected")   
}

if(LeftAtgmKey)
{
	LeftAtgm=1
}else{LeftAtgm=0}
if(RightAtgmKey)
{
	RightAtgm=1
}else{RightAtgm=0}


if(LeftAtgmKey1)
{
	LeftAtgm1=1
}else{LeftAtgm1=0}
if(RightAtgmKey1)
{
	RightAtgm1=1
}else{RightAtgm1=0}

if(SmokesKey)
{
	Smokes=1
}else{Smokes=0}

if(changed(LAtgmReady==0)&LAtgmReady==1)
{
	Driver:printDriver("Left ATGM Ready")   
}
if(changed(RAtgmReady==0)&RAtgmReady==1)
{
	Driver:printDriver("Right ATGM Ready")   
}

if(changed(SmokeReady==0)&SmokeReady==1)
{
	Driver:printDriver("Smoke Ready")   
}

if(!CamProp:isValid())
{
	Count=0
}else
{
	if(changed(CamKey)&CamKey){Count+=1}
	if(Count>2){Count=0}
}

if(changed(GunHold)&GunHold){Cnt+=1}
if(Cnt>1){Cnt=0}

if(changed(CalcKey)&CalcKey){CntCalc+=1}
if(CntCalc==1){IsAimCalc=1}else{IsAimCalc=0}
if(changed(IsAimCalc==0)&IsAimCalc==1){Driver:printDriver("Trajectory Calculator is now ON")}
if(changed(IsAimCalc==1)&IsAimCalc==0){Driver:printDriver("Trajectory Calculator is now OFF")}
if(CntCalc>1){CntCalc=0}

if(Active)
{
	
	if(chatClk() && lastSpoke() == Driver:driver())
	{           
		local What = Driver:driver():lastSaid()
		if(What:sub(1, 3) == "!h ")
		{
			hideChat(1)
			CH = What:sub(4, What:length()):toNumber()
		}
		
		if(What:sub(1, 2) == "!r")
		{
			hideChat(1)
			CH = 0
		}
	}
	if(AimM==1){
	Cam["FOV",number]=FOV
}else{Cam["FOV",number]=90}
	
	if(Count==0)
	{
		CamOffset=vec(0,0,120 + CH) #Camera position Relative to input: Base
	}
	
	if(changed(Count==0)&Count==0)
	{
		Cam["Parent",entity]=Base
		Op1=1
		Op2=0            
		CamDist=300 #Camera distance away from CamOffset position
		#Cam["Activated",number]=1
	#	Cam["Parent",entity]=entity()
	#	Cam["Distance",number]=CamDist
	}
	
	elseif(changed(Count==0)&Count==1&CamProp:isValid())
	{
		Op1=0
		Op2=1
		CamOffset1=vec(0,0,0) #Camera position Relative to input: Base
		CamDist=0 #Camera distance away from CamOffset position
		#Position=CamProp:pos()+CamOffset1
		#Cam["Activated",number]=1
	#	Cam["Parent",entity]=CamProp
	#	Cam["Distance",number]=CamDist
	}
	elseif(changed(Count==1)&Count==2&GunProp:isValid())
	{
		Op1=0
		Op2=1
		CamOffset2=vec(0,0,0) #Camera position Relative to input: Base
		CamDist=0 #Camera distance away from CamOffset position
		#Position=CamProp:pos()+CamOffset1
		#Cam["Activated",number]=1
	#	Cam["Parent",entity]=GunProp
		#Cam["Distance",number]=CamDist
	}
	if(Count==0)
	{
		#base
		Position=Base:toWorld(vec(0,0,0)+CamOffset)
		#Cam["Position",vector]=Position
	}
	elseif(Count==1&CamProp:isValid())
	{
		#driver
		Position=CamProp:toWorld(vec(0,0,0)+CamOffset1)
		#Cam["Position",vector]=Position
	}
	elseif(Count==2&GunProp:isValid())
	{
		#gun
		Position=GunProp:toWorld(vec(0,0,0)+CamOffset2)
		#Cam["Position",vector]=Position
	}
	
	
}

if (Active)
{
	if (~Active)
	{       
		Gun:soundPlay(1,0,"")
		soundPitch(1,0)
        
		# Cam["Activated",number]=1
		#Cam["Parent",entity]=Base
		# Cam["Distance",number]=CamDist
		
		User = Chair:driver()
		
		rangerFilter(Gun)
		rangerFilter(entity():getConstraints())
		rangerPersist(1)
        
		Inertia = shiftL(ang(Gun:inertia()))
	}
    if(IsAimCalc==0)
    {
        #Elevation1 = Elevation
        #Depression1 = Depression
        
        ExDist=3000
        Pitch = 0
        DeltaFunction = 0
		#Gun Angles
        Angle = Chair:toLocal(User:eyeAngles())
        
        Offset = Angle:forward()*ExDist
		
        GunAng = (rangerOffset(99999,(Position+Offset),Angle:forward()):pos() - Gun:pos()):toAngle()
	}elseif(IsAimCalc==1)
    {
        Elevation2 = Elevation
        Depression2 = Depression
        #BullesticPart
        D = (GunMain:acfCaliber()^2)*pi()/85
        G = gravity()*0.01905
		
		# MuzzleVelocity = Gun:acfMuzzleVel()*0.6
        MuzzleVelocity = GunMain:acfMuzzleVel()*0.8 - (Distance*DistanceCalcMult)
        MuzzleWeight = GunMain:acfProjectileMass()*1000
        
        if(MuzzleVelocity == 0||MuzzleWeight == 0)
        {
            MuzzleVelocity = 200
            MuzzleWeight = 1000
		}
        
		CTP = 60*(!Trig-0.7*Trig)/MuzzleVelocity
		
		ExDist = 1000   
		Angle1 = Chair:toLocal(User:eyeAngles())
		Offset1 = Angle1:forward()*ExDist   
		
		K_D = MuzzleWeight/D
		AimPos = Cam["HitPos",vector]+Offset1
		LocPos = (AimPos - Gun:pos())*0.01905
		
		P = vec2(LocPos):length()
		HighLim = clamp(acos(P/(K_D*MuzzleVelocity)),0,90)
		LowLim = atan(LocPos:z(),P)
		Elevation2 = ((HighLim)*Trig + (HighLim+LowLim)/2*!Trig)*!Lim:x() + Lim:y()*Lim:x()
		Depression2 = ((HighLim+LowLim)/2*Trig + LowLim*!Trig)*!Lim:x() + Lim:z()*Lim:x()
		
		if(P < K_D*MuzzleVelocity*cos(Pitch))
		{
			DragFunction = G*K_D^2*ln(1-P/(K_D*MuzzleVelocity*cos(Pitch))) + P*tan(Pitch) + P*K_D*G/(MuzzleVelocity*cos(Pitch)) - LocPos:z()
		}
		#Numerical Analysis part
		DeltaFunction = clamp(abs($DragFunction/clamp(abs($Pitch),0.0000001,10)),0.0000001,1000000)
		Pitch = clamp(Pitch - clamp(CTP*DragFunction/DeltaFunction,-10,10),Depression2,Elevation2)
		#Bullestic END
		
		GunAng = ang(-Pitch,LocPos:toAngle():yaw(),0)
		#LocalVel=entity():toLocal(Gun:angles()):yaw()
		#Hold = entity():toLocal(Gun:angles())
        
	}
    
    LocalVel=entity():toLocal(Gun:angles()):yaw()
    
    soundPitch(1,(abs($LocalVel)>0.3)*150)
    
} 
else
{
	soundPitch(1,0)
	if (~Active){
		Hold = entity():toLocal(Gun:angles())
	}
    GunAng = entity():toWorld(Hold)
    
}

if(duped()|dupefinished()){reset()}

interval(33)

if(Cnt==1)
{
	WL=0
	Force = Gun:toWorld(clamp(Gun:toLocal(GunAng),ang(-RotateSpeed),ang(RotateSpeed)))
	Clamped = clamp(entity():toLocal(Force),ang(-Elevation,-YawRight,-1),ang(Depression,YawLeft,1))
	LocalToGun = Gun:toLocal(entity():toWorld(Clamped))
	Gun:applyAngForce((LocalToGun * 250 - Gun:angVel() * 47 + entity():angVel() * 47 * (abs(Gun:toLocal(GunAng):yaw())>5)*RealisticGunMovement) * Inertia) #250, 47
}
elseif(Active==0)
{
	WL=1
}
else
{
	WL=1
}
