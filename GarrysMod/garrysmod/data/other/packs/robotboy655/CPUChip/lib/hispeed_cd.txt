
// The cd ray functions

#ifndef HISPEED
     //#include <hispeed.txt>
#endif

void hscdSetBufferReady(float a) {
    if (!HS_DEVICES[HS_CURRENT]) return;
    *(HS_DEVICES[HS_CURRENT] + 8) = a;   
}

void hscdGetBufferReady(float a) {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 8);   
}

void hscdWriteContinious() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    *(HS_DEVICES[HS_CURRENT] + 10) = 0;
    *(HS_DEVICES[HS_CURRENT] + 12) = 0;
    *(HS_DEVICES[HS_CURRENT] + 9) = 1;
}

void hscdWriteAddress(float address) {
    if (!HS_DEVICES[HS_CURRENT]) return;
    *(HS_DEVICES[HS_CURRENT] + 11) = address;
    *(HS_DEVICES[HS_CURRENT] + 9) = 0;
    *(HS_DEVICES[HS_CURRENT] + 12) = 0;
    *(HS_DEVICES[HS_CURRENT] + 10) = 1;
}

void hscdWriteTrackSector(float track, sector) {
    if (!HS_DEVICES[HS_CURRENT]) return;
    *(HS_DEVICES[HS_CURRENT] + 13) = sector;
    *(HS_DEVICES[HS_CURRENT] + 14) = track;
    *(HS_DEVICES[HS_CURRENT] + 10) = 0;
    *(HS_DEVICES[HS_CURRENT] + 9) = 0;
    *(HS_DEVICES[HS_CURRENT] + 12) = 1;
}

void hscdWrite(float type) {
    if (!HS_DEVICES[HS_CURRENT]) return;
    if (!(*(HS_DEVICES[HS_CURRENT] + 8))) return;

    // Set up buffer (512, 1023) here
    
    *(HS_DEVICES[HS_CURRENT] + 1) = 0; // Read off
    *(HS_DEVICES[HS_CURRENT]) = 1;
}

void hscdRead() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    if (!(*(HS_DEVICES[HS_CURRENT] + 8))) return;
    
    // Set up buffer (512, 1023) here
    
    *(HS_DEVICES[HS_CURRENT]) = 0; // Write off
    *(HS_DEVICES[HS_CURRENT] + 1) = 1;
}

void hscdTurnOff() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    *(HS_DEVICES[HS_CURRENT]) = 0;
    *(HS_DEVICES[HS_CURRENT] + 1) = 0;
}

float hscdCurrentSectorGlobal() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 2);
}

float hscdCurrentSector() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 3);
}

float hscdCurrentTrack() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 4);
}

float hscdCurrentStack() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 5);
}

float hscdCurrentAddressGlobal() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 6);
}

float hscdCurrentAddress() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 7);
}

float hscdDiskSpinVelocity() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 21);
}

float hscdDiskSpinAngle() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 22);
}

float hscdDistanceFromCenter() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 23);
}

float hscdCurrentStackRaw() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 24);
}

float hscdDiskPrecision() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 25);
}

float hscdDiskTotalSectors() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 26);
}

float hscdDiskTotalTracks() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 27);
}

float hscdFirstTrackNumber() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 28);
}

float hscdBytesPerBlock() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 29);
}

float hscdDiskSize() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 30);
}

float hscdDiskVolume() {
    if (!HS_DEVICES[HS_CURRENT]) return;
    return *(HS_DEVICES[HS_CURRENT] + 31);
}

// CD Ray
//[W] Buffer ready (read or write - pick the ray) 8

//[W] Continious mode 9

//[W] Wait for address mode 10
//[W] Target address (in current stack) 11

//[W] Wait for track&sector mode 12
//[W] Target sector 13
//[W] Target track 14

// Buffer  512 - 1023
