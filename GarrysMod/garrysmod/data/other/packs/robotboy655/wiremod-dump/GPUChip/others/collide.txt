/////////////////////////////////////
//  COLLIDING BALL GPU by HITMAN271		
//  PORT 0 IS THE PHYSICS TIMESCALE
//  WIRE A CHANGING INPUT TO PORT 0 IF THE ABOVE WAS TOO HARD TO UNDERSTAND
/////////////////////////////////////
dentrypoint 0,_draw;               
                               
rand #ball.x;                       
rand #ball.y;

rand #ball2.x
rand #ball2.y                        
                               
dexit;                           
//////////////////////////////////
_draw:                                
                               
dcvxpipe 2;                       
dclrscr bg_color;            

vmov f,d     
vmul f,port0                      
dmuldt eax,#f.x;                // EAX = Direction Vector * Delta (change of coords per frame)
add #ball.x,eax;               
dmuldt eax,#f.y;           
add #ball.y,eax;    

vmov f,e   
vmul f,port0 
dmuldt eax,#f.x;                // EAX = Direction Vector * Delta (change of coords per frame)
add #ball2.x,eax;               
dmuldt eax,#f.y;           
add #ball2.y,eax;     

call Check 

Collisions:
        vmov load,ball
        vsub load,ball2

        fpwr #load.x,2                //Square it. About todo Pythagorean //A^2
        fpwr #load.y,2                //B^2

        add #load.x,#load.y        //A^2 + B^2
        
        fpwr #load.x,0.5        // (A^2 + B^2)^1/2 sqrt //LENGTH
        mov eax,#load.x
        
        cmp eax,0.1                //DISTANCE FOR ACTION
        jg RealDraw

Action:                                //This is only done when the pixels got too close/collided
        vmul d,-1
        vmul e,-1
        mov #Detection,25        // Number is for amount of frames text is present

RealDraw:                                          
        dcolor ball_color;                // Set color to color of ball
       drectwh ball,ball_wh;                // Draw the ball
   
        dcolor ball2_color
        drectwh ball2,ball_wh

        cmp #Detection,0
        jl GrandOleExit
         
        dec #Detection 
        
        dcolor text_color                    
        dsetsize 24                    
        dwrite textpos,text

GrandOleExit:                             
dexit;                          
//////////////////////////////////
bounce.x:                        // Bounce function (change X speed)
  neg #d.x;                        
  min #ball.x,0.9;                
  max #ball.x,0.0;               
ret  

bounce2.x:
  neg #e.x                           
  min #ball2.x,0.9;                
  max #ball2.x,0.0;   
ret
                           
bounce.y:                        // Bounce function (change Y speed) 
  neg #d.y;                     
  min #ball.y,0.9;               
  max #ball.y,0.0;               
ret      

bounce2.y:
  neg #e.y;                     
  min #ball2.y,0.9;               
  max #ball2.y,0.0;   
ret
                     
//////////////////////////////////
// Data and resources               
//////////////////////////////////
                                //
color ball_color, 255, 0, 0;   
color ball2_color, 0, 0, 255   
color bg_color,   32, 32,128; 
color text_color, 255, 255, 255      
                              
vector2f ball;      
vector2f ball2             
vector2f ball_wh, 0.1, 0.1;     
                                
vector2f textpos, 0.2, 0.5;       
                                
vector2f d, 4, 4;                 //Ball 1 vector
vector2f e, 4, 4                      //Ball 2 vector
vector2f f
vector2f load, 1, 1                //Math parts

float Detection
                               
string text,'Collision Detected!';

/////////////////////////////////////
Check:                           
        cmp #ball.x,0.9;                // Check hits against walls
        cge bounce.x;             
        cmp #ball.x,0.0;          
        cle bounce.x;               
                                
        cmp #ball.y,0.9;                // Bounce on other axis
        cge bounce.y;         
        cmp #ball.y,0.0;         
        cle bounce.y;   

Check2:
        cmp #ball2.x,0.9;                // Check hits against walls
        cge bounce2.x;             
        cmp #ball2.x,0.0;          
        cle bounce2.x;               
                                
        cmp #ball2.y,0.9;                // Bounce on other axis
        cge bounce2.y;         
        cmp #ball2.y,0.0;         
        cle bounce2.y;     
ret    