@name gait_lib
@inputs
@outputs
@persist [G_timer G_timer_duration G_current_update G_current_stance G_current_speed G_height] [Dt Ct] [IK1 IK2 IK3 IK4 IKB]
@persist [G_feet G_timings]:table [G_current_timings]:array [G_pos G_dir]:vector [G_ang]:angle
@trigger none

if (first()) {
    #---------------------------------------------------------------
    #[ GAIT LIB
        speed   -> movement speed
        update  -> cycles per second
        stance  -> percentage of cycle foot is in the air
        timings -> foot timings,front to back,left to right
    ]#

    G_timings = table(
        "octo" = table(
            "tetrapod" = table(
                "speed"   = 100,
                "update"  = 1,
                "stance"  = 1/2,
                "timings" = array(0,1/2,1/2,0,0,1/2,1/2,0)
            ),
            "ripple" = table(
                "speed"   = 100,
                "update"  = 2,
                "stance"  = 1/2,
                "timings" = array(0,1/2,1/6,2/3,1/3,5/6,1/2,0)
            )
        ),
        "hexa" = table(
            "tripod" = table(
                "speed"   = 100,
                "update"  = 1,
                "stance"  = 1/2,
                "timings" = array(0,1/2,1/2,0,0,1/2)
            ),
            "wave"   = table(
                "speed"   = 100,
                "update"  = 1,
                "stance"  = 1/6,
                "timings" = array(1/3,1/6,0,5/6,2/3,1/2)
            ),
            "ripple" = table(
                "speed"   = 100,
                "update"  = 1,
                "stance"  = 1/3,
                "timings" = array(2/3,1/3,0,1/6,5/6,1/2)
            )
        ),
        "quad" = table(
            "pairs" = table(
                "speed"   = 100,
                "update"  = 1,
                "stance"  = 1/2,
                "timings" = array(0,1/2,1/2,0)
            ),
            "singleton" = table(
                "speed"   = 100,
                "update"  = 1,
                "stance"  = 1/4,
                "timings" = array(0,1/2,3/4,1/4)
            )
        ),
        "bip" = table(
            "walk" = table(
                "speed"   = 100,
                "update"  = 1,
                "stance"  = 1/2,
                "timings" = array(0,1/2)
            )
        )
    )
    function resetFeet() {
        for (I = 1,G_feet:count()) {
            local Pos = rangerOffset(G_height,toWorld(G_feet[I,table]["pos",vector],ang(),G_pos,G_ang),vec(0,0,-1)):position()
            G_feet[I,table]["lastStep",vector] = Pos
            G_feet[I,table]["nextStep",vector] = Pos
            G_feet[I,table]["realStep",vector] = Pos
        }
    }
    function setGait(Type:string,Name:string,Duration) {
        if (G_timings:exists(Type) & G_timings[Type,table]:exists(Name)) {
            local G = G_timings[Type,table][Name,table]
            G_current_timings = G["timings",array]
            G_current_stance = 1 - G["stance",number]
            G_current_update = G["update",number]
            G_current_speed = G["speed",number]
            G_timer_duration = Duration
        }
        else {
            error(format("Invalid gait <%s> <%s>",Type,Name))
        }
    }
    function updateGait() {
        G_timer += G_current_update*Dt
        if (G_timer > G_timer_duration) {
            G_timer -= G_timer_duration
        }
        elseif (G_timer < 0) {
            G_timer += G_timer_duration
        }
        local Pos = vec()
        for (I = 1,G_current_timings:count()) {
            local Perc = (G_timer/G_timer_duration) + G_current_timings[I,number]
            if (Perc > 1) {
                Perc--
            }
            local Foot = G_feet[I,table]
            if (Perc > G_current_stance) {
                if (Foot["takeStep",number] == 0) {
                    local Ranger = rangerOffset(G_current_speed,rangerOffset(G_pos,toWorld(Foot["pos",vector]:setZ(G_height),ang(),G_pos,G_ang)):position(),G_dir)
                    if (!Ranger:hit()) {
                        Ranger = rangerOffset(Ranger:distance() + G_current_speed + G_height*2,Ranger:position(),vec(0,0,-1))
                    }
                    Foot["nextStep",vector] = Ranger:position()
                    Foot["takeStep",number] = 1
                }
                local Diff = Foot["nextStep",vector] - Foot["lastStep",vector]
                if (Diff) {
                    Perc = (Perc - G_current_stance)/(1 - G_current_stance)
                    Foot["realStep",vector] = mix(bezier(Foot["lastStep",vector],mix(Foot["lastStep",vector],Foot["nextStep",vector],0.5) + quat(Diff,G_ang:up()):up()*G_height*2,Foot["nextStep",vector],Perc),Foot["realStep",vector],Perc)
                }
            }
            elseif (Foot["takeStep",number]) {
                Foot["lastStep",vector] = Foot["nextStep",vector]
                Foot["realStep",vector] = Foot["nextStep",vector]
                Foot["takeStep",number] = 0
            }
            Pos += Foot["realStep",vector]
        }
        G_pos = Pos/G_current_timings:count() + G_ang:up()*G_height
    }

    #---------------------------------------------------------------
    #[ TESTING ]#
    function autoFeet(Type:string,Gait:string,Height,Length) {
        G_height = Height
        G_pos = entity():pos() + vec(0,0,G_height)
        G_ang = ang()

        setGait(Type,Gait,1)
        local Num = 0
        if (Type == "bip") { Num = 2 }
        elseif (Type == "quad") { Num = 4 }
        elseif (Type == "hexa") { Num = 6 }
        elseif (Type == "octo") { Num = 8 }

        for (I = 1,Num/2) {
            local Pos = vec(Length,0,0):rotate(0,(180/(Num/2))*(I - 1) + (180/Num),0)
            G_feet:pushTable(table("pos" = Pos))
            G_feet:pushTable(table("pos" = Pos:setY(-Pos:y())))
        }
        resetFeet()

        for (I = 1,Num) {
            holoCreate(I,G_feet[I,table]["stepReal",vector])
        }
        holoCreate(100)
    }
    function autoLegs(Type:string,Gait:string,Height,Length,IL1,IL2,IL3,IL4) {
        G_height = Height
        G_pos = entity():pos() + vec(0,0,G_height)
        G_ang = ang()

        setGait(Type,Gait,1)
        local Num = 0
        if (Type == "bip") { Num = 2 }
        elseif (Type == "quad") { Num = 4 }
        elseif (Type == "hexa") { Num = 6 }
        elseif (Type == "octo") { Num = 8 }

        for (I = 1,Num/2) {
            local Pos = vec(Length,0,0):rotate(0,(180/(Num/2))*(I - 1) + (180/Num),0)
            G_feet:pushTable(table("pos" = Pos))
            G_feet:pushTable(table("pos" = Pos:setY(-Pos:y())))
        }
        resetFeet()

        holoCreate(100,vec(),vec((Length*2)/_PI):setZ(Height/4)/12)
        holoModel(100,"cylinder")
        holoColor(100,hsv2rgb(0,0.5,1))
        
        local L = (IL1 + IL2 + IL3 + IL4 - G_height)/4
        for (I = 1,Num) {
            local N = I*1000
            holoCreate(N,holoEntity(100):toWorld(G_feet[I,table]["pos",vector]:normalized()*L),vec(IL1*2,8,8)/12)
            holoClipEnabled(N,1),holoClip(N,vec(),vec(1,0,0),0)
            holoParent(N,100)
            holoColor(N,hsv2rgb(20,0.5,1))
            
            for (J = 1,4) {
                N++
                holoCreate(N,holoEntity(N - 1):toWorld(vec(select(J,IL1,IL2,IL4,IL3),0,0)),vec(select(J,IL2,IL3,IL4,IL3)*2,8-J,8-J)/12)
                holoClipEnabled(N,1),holoClip(N,vec(),vec(1,0,0),0)
                holoParent(N,N - 1)
                holoColor(N,hsv2rgb(20+ (60 / 4)*J,0.5,1))
            }
        }

        IK1 = IL1
        IK2 = IL2
        IK3 = IL3
        IK4 = IL4
        IKB = IL1 + IL2 + IL3 + IL4
    }

    autoLegs("octo","ripple",50,100,30,30,40,40)
    #autoLegs("octo","tetrapod",50,100,30,30,40,40)

    #autoLegs("hexa","tripod",50,100,30,30,40,40)
    #autoLegs("hexa","ripple",50,100,30,30,40,40)
    #autoLegs("hexa","wave",50,100,30,30,40,40)

    #autoLegs("quad","pairs",50,100,30,30,40,40)
    #autoLegs("quad","singleton",50,100,30,30,40,40)

    #autoLegs("bip","walk",50,100,30,30,40,40)
}

interval(90)

Dt = curtime() - Ct
Ct = curtime()

if (Dt > 1) { exit() }

updateGait()

G_ang = G_ang:rotateAroundAxis(vec(0,0,1),25*Dt)
G_dir = G_ang:forward()

local Base = holoEntity(100)

holoPos(100,G_pos)
holoAng(100,G_ang)

for (I = 1,G_current_timings:count()) {
    local Target = G_feet[I,table]["realStep",vector]

    local N = I*1000
    local Diff = Base:toLocalAxis(Target - holoEntity(N):pos())
    local Dist = 1 - min(Diff:length()/2,IKB)/IKB

    local Angle = Diff:toAngle()
    holoAng(N,Base:toWorld(Angle + ang(45*Dist,0,0)))
    holoAng(N + 1,Base:toWorld(Angle - ang(135*Dist,0,0)))

    Diff = Base:toLocalAxis(Target - holoEntity(N + 2):pos())
    Dist = min(Diff:length() - IK4,IK3 + IK3 - 0.5)

    holoAng(N + 2,Base:toWorld(Diff:toAngle() - ang(acos(Dist^2/(2*Dist*IK3)),0,0)))
    holoAng(N + 3,holoEntity(N + 2):toWorld(ang(-asin(Dist/(IK3 + IK3)) + 90,0,0)))
    holoAng(N + 4,holoEntity(N + 2):toWorld(ang(-acos((IK3^2 + IK3^2 - Dist^2)/(2*IK3*IK3)) + 180,0,0)))
}
