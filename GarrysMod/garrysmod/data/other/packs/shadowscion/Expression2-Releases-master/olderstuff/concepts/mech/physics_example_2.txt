@name physics_example_2
@inputs 
@outputs 
@persist Entity:entity Owner:entity Inertia:angle Mass
@trigger none

#-- i like using this model because it shows the orientation of the model
@model models/maxofs2d/cube_tool.mdl

#-- by shadowscion

#-- a series of examples showing how i usually
#-- handle the physical aspects of my mechs

#-- NEW: WASD movement (forward/strafing)


if (first()) {
    
    Entity = entity()
    Owner = owner()
    
    Entity:setMass(2000)
    
    Mass = Entity:mass()
    Inertia = shiftL(ang(Entity:inertia()))

    rangerHitEntities(0)
    rangerPersist(1)

}

interval(60)

#-- controls
local W = Owner:keyPressed("up")
local A = Owner:keyPressed("left")
local S = Owner:keyPressed("down")
local D = Owner:keyPressed("right")

#-- for most mechs i just use a single ranger for the hovering
local Ranger = rangerOffset(100, Entity:pos(), vec(0, 0, -1))

#-- if the ranger is hitting, the mech is on the ground
if (Ranger:hit()) {
    
    #-- to get away with using low intervals and applyforce, i turn off gravity when it's on the ground
    Entity:propGravity(0)
    
    #-- for now, just basic angle holding, i never use apply torque
    local Yaw =  Entity:angles():yaw()
    Entity:applyAngForce((Entity:toLocal(ang(0, Yaw, 0))*300 - Entity:angVel()*30) * Inertia)
    
    #-- it can hover at any height lower than the ranger length
    #-- i use the tried and true Target - Current method
    #-- change the multipliers to suit your needs
    local Height = vec(0, 0, 90 - Ranger:distance()) * 1
    local Forward = Entity:forward() * (W - S) * 10
    local Strafe = Entity:right() * (A - D) * 10
    
    local Damping = vec(5, 5, 1)

    Entity:applyForce(((Forward + Strafe + Height)*5 - Entity:vel() / Damping) * Mass)
}

#-- otherwise the mech is off the ground
else {
    
    Entity:propGravity(1)

}
