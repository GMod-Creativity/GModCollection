#-- by shadowscion

#-- a series of examples showing how i usually
#-- handle the physical aspects of my mechs

#-- NEW: simple jumping animation
#-- Controls:
#-- W, A, S, D, Space, Aim/Camera

@name physics_example_5
@inputs 
@outputs
@persist Entity:entity Owner:entity Inertia:angle Mass

#-- jump variables
@persist [Jumping JumpTime] [JumpTarget JumpOrigin]:vector JumpApex
@trigger none

#-- i like using this model because it shows the orientation of the model
@model models/maxofs2d/cube_tool.mdl


if (first()) {

    Entity = entity()
    Owner = owner()

    Entity:setMass(2000)

    Mass = Entity:mass()
    Inertia = shiftL(ang(Entity:inertia()))

    rangerHitEntities(0)
    rangerPersist(1)

}

interval(60)

#-- controls
local W = Owner:keyPressed("up")
local A = Owner:keyPressed("left")
local S = Owner:keyPressed("down")
local D = Owner:keyPressed("right")
local Space = Owner:keyPressed("rshift")

local Aim = Owner:eyeTrace():position()

#-- sin/cos are very useful for giving the illusing of breathing
#-- and adding a little movement to the body of the mech
local Moving = max(Entity:vel():setZ(0):length(), 1)

local Time = curtime()*200
local CosT = cos(Time) / Moving
local SinT = sin(Time) / Moving

#-- for most mechs i just use a single ranger for the hovering
local Ranger = rangerOffset(100, Entity:pos(), vec(0, 0, -1))

#-- if the ranger is hitting, the mech is on the ground
if (Ranger:hit()) {
    
    #-- simple jumping
    #-- we only handle our normal physics if jumping is not engaged
    if (!Jumping) {
        if (Space) {
            JumpOrigin = Entity:pos()
            JumpTarget = Aim + vec(0, 0, Ranger:distance()) #-- we want it to jump to its default hover height
            JumpApex = JumpOrigin:distance(JumpTarget)*0.33 #-- add height to the jump, you can change the multiplier to suit your needs
            
            JumpTime = 0
            Jumping = 1
        }

        #-- to get away with using low intervals and applyforce, i turn off gravity when it's on the ground
        Entity:propGravity(0)

        #-- add sin or cos to the pitch value
        local Yaw =  Entity:angles():yaw() - bearing(Entity:pos(), Entity:angles(), Aim) / 5
    
        Entity:applyAngForce((Entity:toLocal(ang(CosT*5, Yaw, 0))*300 - Entity:angVel()*30) * Inertia)

        #-- add sin or cos to the z value
        local Height = vec(0, 0, SinT*2 + 90 - Ranger:distance()) * 1
        local Forward = Entity:forward() * (W - S) * 10
        local Strafe = Entity:right() * (D - A) * 10

        local Damping = vec(5, 5, 1)
    
        Entity:applyForce(((Forward + Strafe + Height)*5 - Entity:vel() / Damping) * Mass)
    }
}

#-- otherwise the mech is off the ground
else {

    Entity:propGravity(1)

}

#-- jump physics are placed outside of the normal physics
if (Jumping) {
    JumpTime = min(JumpTime + 0.075, 1) #-- you can change the increment value to change how fast the jump 'animation' plays

    local JumpHeight = vec(0, 0, sin(JumpTime*180)*JumpApex) #-- i like to use sin(T)*DesiredHeight for my jumping animations
    local JumpVector = mix(JumpTarget, JumpOrigin, JumpTime) + JumpHeight

    Entity:propGravity(0)
    Entity:applyForce(((JumpVector - Entity:pos())*5 - Entity:vel()) * Mass)

    #-- depending on the type of mech, you might not want the angle to change in the air
    local Yaw =  Entity:angles():yaw() - bearing(Entity:pos(), Entity:angles(), Aim) / 5

    Entity:applyAngForce((Entity:toLocal(ang(CosT*5, Yaw, 0))*300 - Entity:angVel()*30) * Inertia)

    if (JumpTime == 1) {
        Jumping = 0
    }
}
