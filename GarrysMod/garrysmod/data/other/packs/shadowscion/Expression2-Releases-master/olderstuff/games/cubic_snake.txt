@name games/cubic_snake
@inputs

@outputs GAME_POINT_MUL GAME_SCORE

# HOLOGRAM
@persist [HOLO_N] [CFG_SIZE CFG_TILE] [CFG_SKIN]:string [HOLO_DATA SKINS]:table [HOLO_R]:array Vec:vector Ang:angle

# CUBE
@persist [CUBE_SIZE CUBE_TILE CUBE_Z CUBE_GRID CUBE_HALF CUBE_INDEX] [CUBE_MATRIX]:table [CUBE_ENT]:entity

# SNAKE
@persist [SNAKE_POS SNAKE_DIR]:vector [SNAKE_FRAME]:table [SNAKE_FACE]:string [SNAKE_INDEX]

# TAIL
@persist [TAIL]:table [TAIL_COUNT TAIL_MAX]

# POWERUP
@persist [POWERUP_POOL]:array [POWERUP_MAP POWERUP_ACTIVE POWERUP_WEIGHTS]:table [POWERUP_MAX POWERUP_INDEX POWERUP_TIME]
@persist [POWERUP_GHOST POWERUP_MARIO] [MARIO_INDEX]

# FRUIT
@persist [FRUIT_POOL]:array [FRUIT_MAP]:table [FRUIT_MAX FRUIT_INDEX FRUIT_BONUS]

# OBSTACLE
@persist [OBSTACLE_POOL]:array [OBSTACLE_MAX OBSTACLE_INDEX]

# GAME
@persist [GAME_MAP GAME_CTRL]:table [GAME_KEYBUFFER]:array [GAME_PLAYER]:entity [GAME_INTERPOLATE GAME_SPEED_MUL GAME_POINT_MUL GAME_SCORE] [Dt Ct]

# MISC
@model models/hunter/blocks/cube1x1x1.mdl
@trigger none


if (first()) {
    #--------------------------------------------------------------
    #-- settings --------------------------------------------------
    #--------------------------------------------------------------
    GAME_PLAYER = owner()

    entity():setAlpha(0)

    TAIL_MAX = 100
    CFG_SIZE = 47
    CFG_TILE = 16
    CFG_SKIN = "default"

    SKINS = table(
        "default" = table(
            "cube"   = vec4(187, 205, 229, 255),
            "corner" = vec4(48, 48, 48, 255),
            "obstacle" = vec4(48, 48, 48, 255),
            "snake"  = vec4(55, 155, 55, 255),
            "tail1"  = vec4(109, 182, 109, 255),
            "tail2"  = vec4(hsv2rgb(rgb2hsv(109, 182, 109) * vec(1, 0.50, 0.75)), 255),
            "fruit1" = vec4(214, 73, 51, 255),
            "fruit2" = vec4(127, 111, 63, 255),
            "power"  = vec4(88, 94, 176, 255),
            "material" = "phoenix_storms/concrete3"
        ),
         "skin1" = table(
            "cube"   = vec4(248, 244, 244, 255),
            "corner" = vec4(51, 51, 51, 255),
            "obstacle" = vec4(48, 48, 48, 255),
            "snake"  = vec4(122, 199, 79, 255),
            "tail1"  = vec4(111, 181, 72, 255),
            "tail2"  = vec4(67, 109, 44, 255),
            "fruit1" = vec4(244, 96, 54, 255),
            "fruit2" = vec4(127, 111, 63, 255),
            "power"  = vec4(0, 154, 152, 255),
            "material" = "phoenix_storms/concrete3"
        )
    )

    POWERUP_WEIGHTS = table(
        "powerup_mario_activate"    = 25,
        "powerup_obstacle_activate" = 25,
        "powerup_fast_activate"     = 25,
        "powerup_ghost_activate"    = 20,
        "powerup_slow_activate"     = 20,
        "powerup_harvest_activate"  = 15,
        "powerup_mindfuck_activate" = 5
    )

    #phoenix_storms/Fender_white
    #phoenix_storms/concrete3
    #phoenix_storms/egg
    #phoenix_storms/mat/mat_phx_metallic2

    #--------------------------------------------------------------
    #-- do not edit below this line -------------------------------
    #--------------------------------------------------------------

    #--------------------------------------------------------------
    #-- hologram stuff --------------------------------------------
    #--------------------------------------------------------------
    HOLO_N = 1000

    HOLO_N++
    holoCreate(HOLO_N)
    holoParent(HOLO_N, entity())

    CUBE_INDEX = HOLO_N
    CUBE_ENT  = holoEntity(CUBE_INDEX)

    for (I = 1, 16) {
        HOLO_N++
        holoCreate(HOLO_N)
        holoParent(HOLO_N, CUBE_INDEX)
    }

    FRUIT_MAX = 30
    FRUIT_POOL = array()
    FRUIT_INDEX = HOLO_N + 1

    for (I = 1, FRUIT_MAX) {
        HOLO_N++
        holoCreate(HOLO_N)
        holoParent(HOLO_N, CUBE_INDEX)
        FRUIT_POOL:pushNumber(HOLO_N)
    }

    POWERUP_MAX = 2
    POWERUP_POOL = array()
    POWERUP_INDEX = HOLO_N + 1

    for (I = 1, POWERUP_MAX) {
        HOLO_N++
        holoCreate(HOLO_N)
        holoParent(HOLO_N, CUBE_INDEX)
        POWERUP_POOL:pushNumber(HOLO_N)
    }

    # snake
    HOLO_N++
    holoCreate(HOLO_N)
    holoParent(HOLO_N, CUBE_INDEX)
    SNAKE_INDEX = HOLO_N

    HOLO_N++
    holoCreate(HOLO_N)
    holoParent(HOLO_N, SNAKE_INDEX)

    HOLO_N++
    holoCreate(HOLO_N)
    holoParent(HOLO_N, SNAKE_INDEX)
    
    # mario tube
    HOLO_N++
    holoCreate(HOLO_N)
    holoParent(HOLO_N, CUBE_INDEX)
    MARIO_INDEX = HOLO_N

    HOLO_N++
    holoCreate(HOLO_N)
    holoParent(HOLO_N, CUBE_INDEX)        

    OBSTACLE_MAX = holoRemainingSpawns() - 1
    OBSTACLE_POOL = array()
    OBSTACLE_INDEX = HOLO_N + 1

    for (I = 1, OBSTACLE_MAX) {
        HOLO_N++
        holoCreate(HOLO_N)
        holoParent(HOLO_N, CUBE_INDEX)
        OBSTACLE_POOL:pushNumber(HOLO_N)
    }

    TAIL_MAX = min(TAIL_MAX, 250 - (HOLO_N - 1000))
    HOLO_N = 0

    function holoVisual(N, Pos:vector, Ang:angle, Scale:vector, Model:string, Material:string, Color:vector4) {
        holoPos(N, holoEntity(N):parent():toWorld(Pos))
        holoAng(N, holoEntity(N):parent():toWorld(Ang))
        holoModel(N, Model)
        holoMaterial(N, Material)
        holoScaleUnits(N, Scale)
        holoColor(N, Color)
        #holoDisableShading(N, 1)

        HOLO_R:pushNumber(N)
    }
    function rebuild_cube(Size, Grid, Padding, SkinID:string) {
        timer("rebuild", 100)

        HOLO_DATA = table()
        HOLO_R = array()

        # CONFIG
        CUBE_SIZE = Size
        CUBE_GRID = Grid
        CUBE_HALF = CUBE_GRID/2
        CUBE_TILE = CUBE_SIZE/CUBE_GRID
        CUBE_Z    = CUBE_SIZE/2

        local N = CUBE_INDEX

        # SKIN
        local Skin = SKINS[SkinID, table]
        local Material = Skin["material", string]

        # CUBE
            HOLO_DATA:pushArray(array(N, Vec, Ang, vec(CUBE_SIZE - CUBE_TILE - Padding), "", "models/shiny", Skin["cube", vector4]:setW(100)))
        N++, HOLO_DATA:pushArray(array(N, Vec, Ang, vec(CUBE_SIZE - CUBE_TILE*2 - Padding), "", Material, Skin["cube", vector4]))
        N++, HOLO_DATA:pushArray(array(N, Vec, Ang, vec(CUBE_SIZE - CUBE_TILE*2 - Padding), "", "models/wireframe", vec4(0, 0, 0, 255)))

        # CORNERS
        N++, HOLO_DATA:pushArray(array(N, vec(CUBE_Z, CUBE_Z, CUBE_Z), Ang, vec(CUBE_TILE - Padding), "", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(-CUBE_Z, CUBE_Z, CUBE_Z), Ang, vec(CUBE_TILE - Padding), "", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(-CUBE_Z, -CUBE_Z, CUBE_Z), Ang, vec(CUBE_TILE - Padding), "", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(CUBE_Z, -CUBE_Z, CUBE_Z), Ang, vec(CUBE_TILE - Padding), "", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(CUBE_Z, CUBE_Z, -CUBE_Z), Ang, vec(CUBE_TILE - Padding), "", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(-CUBE_Z, CUBE_Z, -CUBE_Z), Ang, vec(CUBE_TILE - Padding), "", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(-CUBE_Z, -CUBE_Z, -CUBE_Z), Ang, vec(CUBE_TILE - Padding), "", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(CUBE_Z, -CUBE_Z, -CUBE_Z), Ang, vec(CUBE_TILE - Padding), "", Material, Skin["corner", vector4]))

        # ARROWS
        local Offset = (CUBE_SIZE - CUBE_TILE*2 - Padding)*0.5
        local Scale  = vec(CUBE_SIZE*0.25 - Padding):setY(1)

        N++, HOLO_DATA:pushArray(array(N, vec(0, 0, Offset), ang(0, 90, 90), Scale, "prism", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(0, 0, -Offset), ang(0, 90, -90), Scale, "prism", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(Offset, 0, 0), ang(0, 90, -180), Scale, "prism", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(-Offset, 0, 0), ang(0, 90, 0), Scale, "prism", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(0, Offset, 0), ang(90, 0, 0), Scale, "prism", Material, Skin["corner", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(0, -Offset, 0), ang(-90, 180, 0), Scale, "prism", Material, Skin["corner", vector4]))

        # FRUIT
        local Scale = vec(CUBE_TILE - Padding)
        for (I = 1, FRUIT_MAX) {
            N++, HOLO_DATA:pushArray(array(N, Vec, Ang, Scale, "icosphere2", Material, Skin["fruit1", vector4]))
        }

        # POWERUP
        local Scale = vec(CUBE_TILE - Padding)
        for (I = 1, POWERUP_MAX) {
            N++, HOLO_DATA:pushArray(array(N, Vec, Ang, Scale, "rcube", Material, Skin["power", vector4]))
        }

        # SNAKE
        local Scale = vec(CUBE_TILE - Padding)
        N++, HOLO_DATA:pushArray(array(N, Vec:setZ(CUBE_Z), Ang, Scale, "", Material, Skin["snake", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(Scale:x(), 0, -Scale:z()*0.25), Ang, Scale*vec(1, 1, 0.5), "", Material, Skin["snake", vector4]))
        N++, HOLO_DATA:pushArray(array(N, vec(Scale:x()*0.25, 0, Scale:z()*0.25), Ang, Scale*vec(0.2, 1.1, 0.2), "", "", vec4(15, 15, 15, 255)))
        
        # WORMHOLE
        N++, HOLO_DATA:pushArray(array(N, Vec, Ang, vec(CUBE_TILE) , "hq_stube", Material, vec4(55, 255, 55, 255)))
        N++, HOLO_DATA:pushArray(array(N, Vec, Ang, vec(CUBE_TILE) , "hq_stube", Material, vec4(55, 255, 55, 255)))

        # OBSTACLE
        local Scale = vec(CUBE_TILE - Padding)
        for (I = 1, OBSTACLE_MAX) {
            N++, HOLO_DATA:pushArray(array(N, Vec, Ang, Scale, "", "phoenix_storms/stripes", vec4(255, 255, 255, 255)))
        }

        # TAIL
        local Scale = vec(CUBE_TILE - Padding - Padding)
        for (I = 1, 100) {
            HOLO_DATA:pushArray(array(I, Vec, Ang, Scale, "", Material, mix(Skin["tail1", vector4], Skin["tail2", vector4], I/100):setW(255)))
        }
    }
    function reset_fruit_holos() {
        local P = CUBE_ENT:pos()
        for (I = FRUIT_INDEX, FRUIT_INDEX+FRUIT_MAX-1) {
            holoPos(I, P)
        }
    }
    function reset_powerup_holos() {
        local P = CUBE_ENT:pos()
        for (I = POWERUP_INDEX, POWERUP_INDEX+POWERUP_MAX-1) {
            holoPos(I, P)
        }
    }
    function reset_obstacle_holos() {
        local P = CUBE_ENT:pos()
        for (I = OBSTACLE_INDEX, OBSTACLE_INDEX+OBSTACLE_MAX-1) {
            holoPos(I, P)
        }
    }
    function reset_tail_holos() {
        local P = CUBE_ENT:pos()
        for (I = 1, TAIL_MAX) {
            holoPos(I, P)
        }
    }
    function reset_object_holos() {
        local P = CUBE_ENT:pos()

        holoPos(SNAKE_INDEX, P)
        for (I = FRUIT_INDEX, FRUIT_INDEX+FRUIT_MAX-1) {
            holoPos(I, P)
        }
        for (I = POWERUP_INDEX, POWERUP_INDEX+POWERUP_MAX-1) {
            holoPos(I, P)
        }
        for (I = OBSTACLE_INDEX, OBSTACLE_INDEX+OBSTACLE_MAX-1) {
            holoPos(I, P)
        }
        for (I = 1, TAIL_MAX) {
            holoPos(I, P)
        }
    }
    function object_set_pos(N, Face:string, Pos:vector) {
        holoPos(N, toWorld(Pos*CUBE_TILE, Ang, CUBE_ENT:toWorld(CUBE_MATRIX[Face, table]["d", vector]*CUBE_Z), CUBE_ENT:toWorld(CUBE_MATRIX[Face, table]["a", angle])))
    }
    function object_set_ang(N, Face:string, Angl:angle) {
        holoAng(N, toWorldAng(Vec, Angl, Vec, CUBE_ENT:toWorld(CUBE_MATRIX[Face, table]["a", angle])))
    }
    function object_set_pos_ang(N, Face:string, Pos:vector, Angl:angle) {
        if (Pos:z()) {
            local PA =  toWorldPosAng(Pos:setZ(0)*CUBE_TILE, Angl, CUBE_ENT:toWorld(CUBE_MATRIX[Face, table]["d", vector]*Pos:z()), CUBE_ENT:toWorld(CUBE_MATRIX[Face, table]["a", angle]))
            holoPos(N, PA[1, vector])
            holoAng(N, PA[2, angle])             
        }
        else {
            local PA =  toWorldPosAng(Pos*CUBE_TILE, Angl, CUBE_ENT:toWorld(CUBE_MATRIX[Face, table]["d", vector]*CUBE_Z), CUBE_ENT:toWorld(CUBE_MATRIX[Face, table]["a", angle]))
            holoPos(N, PA[1, vector])
            holoAng(N, PA[2, angle])            
        }
    }


    #--------------------------------------------------------------
    #-- cube matrix -----------------------------------------------
    #--------------------------------------------------------------
    CUBE_MATRIX = table(
        "u" = table(
            "m" = matrix(vec(1, 0, 0), vec(0, -1, 0), vec(0, 0, 1)),
            "x" = array("f", "b"),
            "y" = array("l", "r"),
            "o" = "d"
        ),
        "d" = table(
            "m" = matrix(vec(-1, 0, 0), vec(0, -1, 0), vec(0, 0, -1)),
            "x" = array("b", "f"),
            "y" = array("l", "r"),
            "o" = "u"
        ),
        "f" = table(
            "m" =  matrix(vec(0, 0, 1), vec(0, -1, 0), vec(1, 0, 0)),
            "x" = array("d", "u"),
            "y" = array("l", "r"),
            "o" = "b"
        ),
        "b" = table(
            "m" =  matrix(vec(0, 0, -1), vec(0, -1, 0), vec(-1, 0, 0)),
            "x" = array("u", "d"),
            "y" = array("l", "r"),
            "o" = "f"
        ),
        "l" = table(
            "m" =  matrix(vec(1, 0, 0), vec(0, 0, 1), vec(0, 1, 0)),
            "x" = array("f", "b"),
            "y" = array("d", "u"),
            "o" = "r"
        ),
        "r" = table(
            "m" =  matrix(vec(1, 0, 0), vec(0, 0, -1), vec(0, -1, 0)),
            "x" = array("f", "b"),
            "y" = array("u", "d"),
            "o" = "l"
        )
    )

    foreach (K, V:table = CUBE_MATRIX) {
        V["a", angle] = -V["m", matrix]:toAngle()
        V["d", vector] = V["m", matrix]:z()
    }


    #--------------------------------------------------------------
    #-- game map triggers -----------------------------------------
    #--------------------------------------------------------------
    function array map_get_empty(F:string) {
        local NotEmpty = 1
        while (NotEmpty) {
            local Face = F ?: select(randint(1, 6), "u", "d", "f", "b", "l", "r")
            local Pos = vec(randint(-CUBE_HALF + 1, CUBE_HALF - 1), randint(-CUBE_HALF + 1, CUBE_HALF - 1), 0)
            local Key = format("%s%d%d", Face, Pos:x(), Pos:y())

            if (GAME_MAP[Key, string]) {
            }
            else {
                NotEmpty = 0
                return array(Key, Face, Pos)
            }
        }
        return array()
    }
    function map_set_trigger(Face:string, Pos:vector, Event:string) {
        local Key = format("%s%d%d", Face, Pos:x(), Pos:y())
        GAME_MAP[Key, string] = GAME_MAP[Key, string] ?: Event
    }
    function map_remove_trigger(Face:string, Pos:vector) {
        GAME_MAP:removeString(format("%s%d%d", Face, Pos:x(), Pos:y()))
    }
    function map_remove_trigger(Face:string, Pos:vector, Event:string) {
        local Key = format("%s%d%d", Face, Pos:x(), Pos:y())
        if (GAME_MAP[Key, string] == Event) {
            GAME_MAP:removeString(Key)
        }
    }
    function map_trigger(Face:string, Pos:vector) {
        local Key = format("%s%d%d", Face, Pos:x(), Pos:y())
        if (GAME_MAP[Key, string]) {
            print(format("Event-> %25s at %s %+3dx %+3dy", GAME_MAP[Key, string], Face, Pos[1], Pos[2]))
            GAME_MAP[Key, string](Key, Face, Pos)
        }
    }
    function map_reset() {
        GAME_MAP = table()

        for (I = 1, 6) {
            local Face = select(I, "u", "d", "f", "b", "l", "r")
            map_set_trigger(Face, vec(CUBE_HALF, CUBE_HALF, 0), "event_collide_corner")
            map_set_trigger(Face, vec(CUBE_HALF, -CUBE_HALF, 0), "event_collide_corner")
            map_set_trigger(Face, vec(-CUBE_HALF, CUBE_HALF, 0), "event_collide_corner")
            map_set_trigger(Face, vec(-CUBE_HALF, -CUBE_HALF, 0), "event_collide_corner")
        }
    }


    #--------------------------------------------------------------
    #-- game objects ----------------------------------------------
    #--------------------------------------------------------------
    function void game_add_fruit() {
        if (!FRUIT_POOL:count()) { return }

        local N = FRUIT_POOL:popNumber()
        local M = map_get_empty("")

        FRUIT_MAP[M[1, string], table] = table(
            "index" = N,
            "value" = 100,
            "decay" = Ct
        )
        
        holoEntity(N):soundPlay("fruit_add" + N, 1, "garrysmod/balloon_pop_cute.wav"), soundPitch("fruit_add" + N, 100 + (FRUIT_MAX - FRUIT_POOL:count()))

        map_set_trigger(M[2, string], M[3, vector], "event_collide_fruit")
        object_set_pos(N, M[2, string], M[3, vector])
    }
    function string game_random_powerup() {
        local RNG = random(1, POWERUP_WEIGHTS:values():sum())
        local SUM = 0

        foreach (K, W:number = POWERUP_WEIGHTS) {
            SUM += W
            if (SUM >= RNG) {
                return K
            }
        }

        return ""
    }
    function game_add_powerup() {
        if (!POWERUP_POOL:count()) { return }
        local P = game_random_powerup()

        if (P) {
            local N = POWERUP_POOL:popNumber()
            local M = map_get_empty("")
            POWERUP_MAP[M[1, string], table] = table(
                "index" = N,
                "onHit" = P
            )

            map_set_trigger(M[2, string], M[3, vector], "event_collide_powerup")
            object_set_pos(N, M[2, string], M[3, vector])
        }
    }
    
    
    #--------------------------------------------------------------
    #-- powerups --------------------------------------------------
    #--------------------------------------------------------------
    
    # powerup -> mario
    function event_collide_mario(Key:string, Face:string, Pos:vector) {
        local Data = POWERUP_MAP[Key,table]
        SNAKE_FACE = Data["face",string]
        SNAKE_POS  = Data["pos",vector]
    }
    function number powerup_mario(Data:table) {
        if (Ct - Data["time", number] > Data["duration", number]) {
            holoPos(MARIO_INDEX,CUBE_ENT:pos())
            holoPos(MARIO_INDEX+1,CUBE_ENT:pos())

            GAME_MAP:removeTable(Data["key1",string])
            GAME_MAP:removeTable(Data["key2",string])             
            POWERUP_MAP:removeTable(Data["key1",string])
            POWERUP_MAP:removeTable(Data["key2",string])           
            
            POWERUP_MARIO = 0

            return 1
        }
        return 0
    }
    function table powerup_mario_activate() {
        if (!POWERUP_MARIO) {
            POWERUP_MARIO = 1

            local M1 = map_get_empty(SNAKE_FACE)
            object_set_pos_ang(MARIO_INDEX, M1[2, string], M1[3, vector]:setZ(CUBE_Z - CUBE_TILE*0.5), Ang)
            
            local M2 = map_get_empty(CUBE_MATRIX[M1[2,string],table]["o",string])
            object_set_pos_ang(MARIO_INDEX+1, M2[2, string], M2[3, vector]:setZ(CUBE_Z - CUBE_TILE*0.5), Ang)
            
            map_set_trigger(M1[2, string], M1[3, vector], "event_collide_mario")
            map_set_trigger(M2[2, string], M2[3, vector], "event_collide_mario")
            
            POWERUP_MAP[M1[1,string],table] = table(
                "face" = M2[2,string],
                "pos"  = M2[3,vector]
            )
            POWERUP_MAP[M2[1,string],table] = table(
                "face" = M1[2,string],
                "pos"  = M1[3,vector]
            )
            
            return table(
                "key1" = M1[1,string],
                "key2" = M2[1,string],
                "func" = "powerup_mario",
                "sound" = "ui/buttonclickrelease.wav",
                "pitch" = 62,
                "time" = Ct,
                "duration" = 1000
            )
        }
        else {
            return table(
                "func" = "powerup_mario",
                "duration" = 0
            )    
        }
    }
        
    # powerup -> harvest
    function number powerup_harvest(Data:table) {
        Data["counter",number] = Data["counter",number] + Dt
        if (Data["counter",number] > 0.5) {
            Data["counter",number] = 0
            game_add_fruit()
        }
        if (Ct - Data["time", number] > Data["duration", number]) {
            soundPurge()
            FRUIT_BONUS = 0
            return 1
        }
        return 0
    }
    function table powerup_harvest_activate() {
        FRUIT_BONUS = 2
        return table(
            "func" = "powerup_harvest",
            "sound" = "vo/npc/barney/ba_laugh03.wav",
            "pitch" = 144,
            "time" = Ct,
            "duration" = 10
        )
    }

    # powerup -> speed increase
    function number powerup_fast(Data:table) {
        if (Ct - Data["time", number] > Data["duration", number]) {
            GAME_SPEED_MUL = max(GAME_SPEED_MUL - 1, 0.5)
            GAME_POINT_MUL = max(GAME_POINT_MUL - 2, 1)
            return 1
        }
        return 0
    }
    function table powerup_fast_activate() {
        GAME_SPEED_MUL += 1
        GAME_POINT_MUL += 2
        return table(
            "func" = "powerup_fast",
            "sound" = "vo/npc/barney/ba_hurryup.wav",
            "pitch" = 144,
            "time" = Ct,
            "duration" = 20
        )
    }

    # powerup -> speed decrease
    function number powerup_slow(Data:table) {
        if (Ct - Data["time", number] > Data["duration", number]) {
            GAME_SPEED_MUL += 0.5
            return 1
        }
        return 0
    }
    function table powerup_slow_activate() {
        GAME_SPEED_MUL = max(GAME_SPEED_MUL - 0.5, 0.5)
        return table(
            "func" = "powerup_slow",
            "sound" = "vo/npc/barney/ba_damnit.wav",
            "pitch" = 144,
            "time" = Ct,
            "duration" = 10
        )
    }

    # powerup -> mindfuck
    function number powerup_mindfuck(Data:table) {
        if (Ct - Data["time", number] > Data["duration", number]) {
            GAME_CTRL["current", table] = GAME_CTRL["normal", table]
            GAME_POINT_MUL = max(GAME_POINT_MUL - 8, 1)

            holoEntity(Data["index", number]):soundPlay("brutal", 0, "vo/npc/alyx/brutal02.wav"), soundPitch("brutal", 135)

            return 1
        }
        return 0
    }
    function table powerup_mindfuck_activate() {
        GAME_CTRL["current", table] = GAME_CTRL["mindfuck", table]
        GAME_POINT_MUL += 8
        return table(
            "func" = "powerup_mindfuck",
            "sound" = "vo/npc/male01/thehacks01.wav",
            "pitch" = 144,
            "time" = Ct,
            "duration" = 10
        )
    }

    # powerup -> ghost
    function number powerup_ghost(Data:table) {
        if (Ct - Data["time", number] > Data["duration", number]) {
            POWERUP_GHOST = 0

            holoAlpha(SNAKE_INDEX, 255)
            holoAlpha(SNAKE_INDEX+1, 255)
            holoAlpha(SNAKE_INDEX+2, 255)

            for (I = 1, TAIL_MAX) { holoAlpha(I, 255) }

            return 1
        }
        return 0
    }
    function table powerup_ghost_activate() {
        POWERUP_GHOST = 1

        holoAlpha(SNAKE_INDEX, 100)
        holoAlpha(SNAKE_INDEX+1, 100)
        holoAlpha(SNAKE_INDEX+2, 100)

        for (I = 1, TAIL_MAX) { holoAlpha(I, 100) }

        return table(
            "func" = "powerup_ghost",
            "sound" = "vo/npc/male01/fantastic01.wav",
            "pitch" = 144,
            "time" = Ct,
            "duration" = 15
        )
    }

    function number powerup_obstacle(Data:table) {
        if (Ct - Data["time", number] > Data["duration", number]) {
            return 1
        }
        return 0
    }
    function table powerup_obstacle_activate() {
        if (OBSTACLE_POOL:count()) {
            local N = OBSTACLE_POOL:popNumber()
            local M = map_get_empty(SNAKE_FACE)

            object_set_pos_ang(N, M[2, string], M[3, vector], Ang)
            map_set_trigger(M[2, string], M[3, vector], "event_collide_obstacle")
        }
        return table(
            "func" = "powerup_obstacle",
            "sound" = "vo/npc/barney/ba_lookout.wav",
            "pitch" = 144,
            "time" = Ct,
            "duration" = 0
        )
    }


    #--------------------------------------------------------------
    #-- game map events -------------------------------------------
    #--------------------------------------------------------------
    function event_reset() {
        Ct = curtime()

        reset_object_holos()

        GAME_SPEED_MUL = 1
        GAME_POINT_MUL = 1
        GAME_SCORE = 0
        
        FRUIT_BONUS = 0

        SNAKE_POS = vec()
        SNAKE_DIR = vec(1, 0, 0)
        SNAKE_FACE = "u"

        TAIL = table()
        TAIL_COUNT = 5

        FRUIT_MAP = table()
        FRUIT_POOL = array()
        for (I = FRUIT_INDEX, FRUIT_INDEX+FRUIT_MAX-1) {
            FRUIT_POOL:pushNumber(I)
        }

        POWERUP_MAP = table()
        POWERUP_POOL = array()
        for (I = POWERUP_INDEX, POWERUP_INDEX+POWERUP_MAX-1) {
            POWERUP_POOL:pushNumber(I)
        }

        OBSTACLE_POOL = array()
        for (I = OBSTACLE_INDEX, OBSTACLE_INDEX+OBSTACLE_MAX-1) {
            OBSTACLE_POOL:pushNumber(I)
        }

        map_reset()
    }
    function event_death(Key:string, Face:string, Pos:vector) {
        CUBE_ENT:soundPlay("death1", 0, "vo/npc/barney/ba_no02.wav"), soundPitch("death1", 144)
        event_reset()
        exit()
    }
    function event_collide_self(Key:string, Face:string, Pos:vector) {
        if (!POWERUP_GHOST) {
            event_death(Key, Face, Pos)
        }
    }
    function event_collide_corner(Key:string, Face:string, Pos:vector) {
        if (!POWERUP_GHOST) {
            event_death(Key, Face, Pos)
        }
    }
    function event_collide_obstacle(Key:string, Face:string, Pos:vector) {
        if (!POWERUP_GHOST) {
            event_death(Key, Face, Pos)
        }
    }
    function event_collide_fruit(Key:string, Face:string, Pos:vector) {
        local Object = FRUIT_MAP:removeTable(Key)

        holoPos(Object["index", number], CUBE_ENT:pos())

        for (I = 1, FRUIT_BONUS) {
            game_add_fruit()
        }

        if (TAIL_COUNT < TAIL_MAX) { TAIL_COUNT++ }
        
        local Decay = Ct - Object["decay",number]
        GAME_SCORE += floor((Object["value",number] - Decay)*GAME_POINT_MUL)
        GAME_SCORE -= floor((Object["poison",number] * Decay * 0.10)*GAME_POINT_MUL)
        
        if (Object["poison",number]) {
            holoEntity(SNAKE_INDEX):soundPlay("gulp", 0, "vo/npc/male01/moan01.wav"), soundPitch("gulp", 144)
        }
        else {
            holoEntity(SNAKE_INDEX):soundPlay("gulp", 0, "npc/barnacle/barnacle_gulp1.wav")
        }

        GAME_MAP:removeString(Key)
        FRUIT_POOL:pushNumber(Object["index", number])
    }
    function event_collide_powerup(Key:string, Face:string, Pos:vector) {
        local Object = POWERUP_MAP:removeTable(Key)

        local PowerUp = Object["onHit", string]()[table]
        PowerUp["index", number] = Object["index", number]

        POWERUP_ACTIVE:pushTable(PowerUp)
        POWERUP_TIME = Ct

        holoEntity(Object["index", number]):soundPlay(Key + "powerup", 0, PowerUp["sound", string]), soundPitch(Key + "powerup", PowerUp["pitch", number])
        holoPos(Object["index", number], CUBE_ENT:pos())

        GAME_MAP:removeString(Key)
        POWERUP_POOL:pushNumber(Object["index", number])
    }


    #--------------------------------------------------------------
    #-- game controls ---------------------------------------------
    #--------------------------------------------------------------
    GAME_CTRL = table(
        "normal" = table(
            "up" = vec(1, 0, 0),
            "down" = vec(-1, 0, 0),
            "left" = vec(0, 1, 0),
            "right" = vec(0, -1, 0)
        ),
        "mindfuck" = table(
            "up" = vec(-1, 0, 0),
            "down" = vec(1, 0, 0),
            "left" = vec(0, -1, 0),
            "right" = vec(0, 1, 0)
        )
    )

    GAME_CTRL["current", table] = GAME_CTRL["normal", table]


    #--------------------------------------------------------------
    #-- misc stuff ------------------------------------------------
    #--------------------------------------------------------------
    timer("spawn", 15)
}


#--------------------------------------------------------------
#-- spawner and rebuidler -------------------------------------
#--------------------------------------------------------------
if (clk("spawn")) {
    timer("spawn", 15)
    while (perf() & holoCanCreate() & HOLO_N < TAIL_MAX) {
        HOLO_N++
        holoCreate(HOLO_N)
        holoParent(HOLO_N, CUBE_INDEX)
        if (HOLO_N >= TAIL_MAX) {
            rebuild_cube(CFG_SIZE, CFG_TILE, 0.1, CFG_SKIN)
            stoptimer("spawn")
        }
    }
}
if (clk("rebuild")) {
    timer("rebuild", 15)
    while (perf() & HOLO_DATA:count()) {
        local D = HOLO_DATA:popArray()
        holoVisual(D[1, number], D[2, vector], D[3, angle], D[4, vector], D[5, string], D[6, string], D[7, vector4])
        if (!HOLO_DATA:count()) {
            event_reset()
            stoptimer("rebuild")
            timer("game", 100)
        }
    }
}


#--------------------------------------------------------------
#-- game ------------------------------------------------------
#--------------------------------------------------------------
if (keyClk(GAME_PLAYER)) {
    local Key = keyClkPressed()
    if (GAME_CTRL["current", table][Key, vector]){
        if (GAME_PLAYER:keyPressed(Key)) {
            if (GAME_KEYBUFFER:count() < 3 & Key != GAME_KEYBUFFER[GAME_KEYBUFFER:count(), string]) {
                GAME_KEYBUFFER:pushString(Key)
            }
        }
    }
}
if (clk("game")) {
    timer("game", 105)

    Dt = curtime() - Ct
    Ct = curtime()

    if (changed(GAME_PLAYER)) {
        runOnKeys(GAME_PLAYER, 1)
        GAME_KEYBUFFER = array()
    }

    GAME_INTERPOLATE += Dt*sqrt(CUBE_GRID)*GAME_SPEED_MUL

    while (GAME_INTERPOLATE >= 1) {
        # key buffer
        if (abs(SNAKE_POS:x()) != CUBE_HALF & abs(SNAKE_POS:y()) != CUBE_HALF) {
            local Next = GAME_CTRL["current", table][GAME_KEYBUFFER:removeString(1), vector]
            SNAKE_DIR = ((SNAKE_DIR == -Next) ? SNAKE_DIR : Next) ?: SNAKE_DIR
        }

        # cache old snake info
        SNAKE_FRAME = table(
            "old_r" = SNAKE_POS,
            "old_p" = SNAKE_POS*CUBE_TILE,
            "old_f" = SNAKE_FACE,
            "old_u" = CUBE_MATRIX[SNAKE_FACE, table]["d", vector]*CUBE_Z,
            "old_a" = CUBE_MATRIX[SNAKE_FACE, table]["a", angle]
        )

        # add dir to position
        SNAKE_POS = clamp(SNAKE_POS + SNAKE_DIR, vec(-CUBE_HALF), vec(CUBE_HALF))

        # evaluate new position
        map_trigger(SNAKE_FACE, SNAKE_POS)

        # wrap x
        if (SNAKE_POS:x() >= CUBE_HALF | SNAKE_POS:x() <= -CUBE_HALF) {
            local Swap = sign(SNAKE_POS:x())
            local Next = CUBE_MATRIX[SNAKE_FACE, table]["x", array][Swap > 0 ? 1 : 2, string]

            switch (SNAKE_FACE) {
                case "l",
                    SNAKE_DIR = vec(0, -1, 0)
                    SNAKE_POS = vec(SNAKE_POS:y(), SNAKE_POS:x(), 0) * Swap
                break
                case "r",
                    SNAKE_DIR = vec(0, 1, 0)
                    SNAKE_POS = vec(SNAKE_POS:y(), SNAKE_POS:x(), 0) * -Swap
                break
                default,
                    SNAKE_POS[1] = -SNAKE_POS:x()
                break
            }

            SNAKE_FACE = Next

            map_trigger(SNAKE_FACE, SNAKE_POS)
        }

        # wrap y
        elseif (SNAKE_POS:y() >= CUBE_HALF | SNAKE_POS:y() <= -CUBE_HALF) {
            local Swap = sign(SNAKE_POS:y())
            local Next = CUBE_MATRIX[SNAKE_FACE, table]["y", array][Swap > 0 ? 1 : 2, string]

            switch (SNAKE_FACE) {
                case "u",
                    SNAKE_POS[2] = -SNAKE_POS:y()
                break
                case "d",
                    SNAKE_DIR = -SNAKE_DIR
                    SNAKE_POS[1] = -SNAKE_POS:x()
                break
                case "f",
                    SNAKE_DIR  = vec(-1, 0, 0)
                    SNAKE_POS = vec(SNAKE_POS:y(), SNAKE_POS:x(), 0) * Swap
                break
                case "b",
                    SNAKE_DIR  = vec(1, 0, 0)
                    SNAKE_POS = vec(SNAKE_POS:y(), SNAKE_POS:x(), 0) * -Swap
                break
                case "l",
                    if (Swap == 1) {
                        SNAKE_DIR = -SNAKE_DIR
                        SNAKE_POS[1] = -SNAKE_POS:x()
                    }
                    else {
                        SNAKE_POS[2] = -SNAKE_POS:y()
                    }
                break
                case "r",
                    if (Swap == 1) {
                        SNAKE_POS[2] = -SNAKE_POS:y()
                    }
                    else {
                        SNAKE_DIR = -SNAKE_DIR
                        SNAKE_POS[1] = -SNAKE_POS:x()
                    }
                break
            }

            SNAKE_FACE = Next

            map_trigger(SNAKE_FACE, SNAKE_POS)
        }

        map_set_trigger(SNAKE_FACE, SNAKE_POS, "event_collide_self")

        # set new snake info
        SNAKE_FRAME = SNAKE_FRAME:add(table(
            "new_r" = SNAKE_POS,
            "new_p" = SNAKE_POS*CUBE_TILE,
            "new_f" = SNAKE_FACE,
            "new_u" = CUBE_MATRIX[SNAKE_FACE, table]["d", vector]*CUBE_Z,
            "new_a" = CUBE_MATRIX[SNAKE_FACE, table]["a", angle]
        ))

        # shift frame into tail
        TAIL:unshiftTable(SNAKE_FRAME)
        while (TAIL:count() > TAIL_COUNT + 1) {
            local T = TAIL:popTable()
            map_remove_trigger(T["new_f", string], T["new_r", vector], "event_collide_self")
        }

        # add fruit when there are none
        while (FRUIT_POOL:count() > FRUIT_MAX - 2) {
            game_add_fruit()
        }
        
        local C1 = SKINS[CFG_SKIN,table]["fruit1",vector4]
        local C2 = SKINS[CFG_SKIN,table]["fruit2",vector4]

        foreach (K, Fruit:table = FRUIT_MAP) {
            if (!Fruit["poison",number]) {
                local Decay = min((Ct - Fruit["decay",number]) / 30, 1)
                holoColor(Fruit["index",number],mix(C2,C1,Decay))
                if (Decay == 1) {
                    Fruit["poison",number] = 1
                }                
            }
        }

        # add powerup when there are none
        while (Ct - POWERUP_TIME > 10 & POWERUP_POOL:count()) { # == POWERUP_MAX) {
            game_add_powerup()
        }
        foreach (K:number, PowerUp:table = POWERUP_ACTIVE) {
            if (PowerUp["func", string](PowerUp)[number]) {
                POWERUP_ACTIVE:removeTable(K)
            }
        }

        # remainder
        GAME_INTERPOLATE--
    }

    local Dir = (GAME_PLAYER:shootPos() - CUBE_ENT:pos()):setZ(0)
    local Mat = CUBE_MATRIX[SNAKE_FACE, table]["m", matrix]
    holoAng(CUBE_INDEX, slerp(quat(CUBE_ENT), quat(Mat:toAngle()) * qRotation(Mat:z(), angnorm(15 + 180 + atan(Dir:y(), Dir:x()))), 0.4):toAngle())

    holoPos(SNAKE_INDEX, mix(
        toWorld(SNAKE_FRAME["new_p", vector], Ang, CUBE_ENT:toWorld(SNAKE_FRAME["new_u", vector]), CUBE_ENT:toWorld(SNAKE_FRAME["new_a", angle])),
        toWorld(SNAKE_FRAME["old_p", vector], Ang, CUBE_ENT:toWorld(SNAKE_FRAME["old_u", vector]), CUBE_ENT:toWorld(SNAKE_FRAME["old_a", angle])),
        GAME_INTERPOLATE))

    if (changed(SNAKE_FACE) | changed(SNAKE_DIR)) {
        holoAng(SNAKE_INDEX, toWorldAng(Vec, SNAKE_DIR:toAngle(), Vec, CUBE_ENT:toWorld(CUBE_MATRIX[SNAKE_FACE, table]["a", angle])))
    }

    for (I = 1, TAIL:count()) {
        local F = TAIL[I+1, table]
        holoPos(I, mix(
            toWorld(F["new_p", vector], Ang, CUBE_ENT:toWorld(F["new_u", vector]), CUBE_ENT:toWorld(F["new_a", angle])),
            toWorld(F["old_p", vector], Ang, CUBE_ENT:toWorld(F["old_u", vector]), CUBE_ENT:toWorld(F["old_a", angle])),
            GAME_INTERPOLATE))
    }
}
