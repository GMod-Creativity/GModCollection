@name ik/humanoid/three_seg_digi
@inputs Target:vector
@outputs 
@persist [SegmentLengthA SegmentLengthB SegmentLengthC] Entity:entity
@trigger none

#-- by shadowscion

#-- i don't claim to be a math expert, nor am i a math teacher
#-- this is just a brief implementation of basic trig using holograms
#-- if something is unclear i suggest you read about trig based inverse kinematics and the law of cosines

#-- this is an example of digitigrade (think the rear legs of a dog) three-segment inverse kinematics

if (first()) {
    
    #-- first we will configure the length of this leg
    SegmentLengthA = 35
    SegmentLengthB = 35 * 1.0357142857143	
    SegmentLengthC = 35 * 0.60714285714286
    
    Entity = entity()
    
    #-- segment 1
    holoCreate(1)
    holoParent(1, Entity)
    holoDisableShading(1, 1)
    holoColor(1, vec4(255, 0, 0, 125))
    holoScale(1, vec(0.25, 1.5, 0.25))
    
    holoCreate(2)
    holoParent(2, 1)
    holoDisableShading(2, 1)
    holoColor(2, vec4(0, 0, 255, 200))
    holoScale(2, vec(0.25, 0.25, 1.5))
    
    #-- segment 2
    holoCreate(3)
    holoParent(3, 2)
    holoPos(3, holoEntity(2):toWorld(vec(0, 0, SegmentLengthA))) #-- offset the second segment
    holoDisableShading(3, 1)
    holoColor(3, vec4(255, 255, 0, 125))
    holoScale(3, vec(0.25, 0.25, 0.75))
  
    #-- segment 2
    holoCreate(4)
    holoParent(4, 3)
    holoPos(4, holoEntity(3):toWorld(vec(0, 0, SegmentLengthB))) #-- offset the foot
    holoDisableShading(4, 1)
    holoColor(4, vec4(0, 255, 0, 125))
    holoScale(4, vec(0.25, 0.25, 0.75))

    #-- foot (not actually required, it just helps us visualize)
    holoCreate(5)
    holoParent(5, 4)
    holoPos(5, holoEntity(4):toWorld(vec(0, 0, SegmentLengthC))) #-- offset the second segment
    holoDisableShading(5, 1)
    holoColor(5, vec4(255, 255, 255, 125))
    holoScale(5, vec(0.25, 0.25, 0.75))
    
    #-- this is our basic cosine-rule function, i'm not a math teacher so google it if you want to know how and why it does what it does
    function number icos(A, B, C) {
        return acos((A^2 + B^2 - C^2) / (2*A*B))    
    }
    

}

#-- setup
interval(60) #-- i have found 60ms to be a good balance between performance and cpu/ops


#-------------------------
#-- segment 1
local PosA = holoEntity(1):pos()


#-- 
local RollAxis = Entity:toLocalAxis(Target - PosA) #-- localized to the entity
local RollOffset = atan(RollAxis:z(), RollAxis:y()) + 90

holoAng(1, Entity:toWorld(ang(0, 0, RollOffset))) #-- local angles, so use toWorld

local PitchAxis = holoEntity(1):toLocalAxis(Target - PosA) #-- localized to the yaw hologram

#-- we don't use the acos formula here this time, instead we cheat and add rotation based on distance
local PitchFrac = 1 - min(1, PosA:distance(Target) / (SegmentLengthA + SegmentLengthC) - 0.5) #-- gives a number from 0-1
local PitchOffset = atan(-PitchAxis:x(), PitchAxis:z()) + 90*PitchFrac 

holoAng(2, holoEntity(1):toWorld(ang(PitchOffset, 180, 0))) #-- local angles, so use toWorld

    
#-------------------------
#-- segment 2
#-- now we start the IK as normal
local PitchAxis = holoEntity(1):toLocalAxis(Target - holoEntity(3):pos()) #-- localized to the yaw hologram
local SegmentLengthD = min(PitchAxis:length(), SegmentLengthB + SegmentLengthC) #-- clamp this to the total leg length to prevent NaN errors
local PitchOffset = atan(PitchAxis:x(), PitchAxis:z()) + icos(SegmentLengthD, SegmentLengthB, SegmentLengthC) #-- reverse knee

holoAng(3, holoEntity(1):toWorld(ang(PitchOffset, 0, 0))) #-- local angles, so use toWorld


#-------------------------
#-- segment 3
holoAng(4, holoEntity(3):toWorld(ang(icos(SegmentLengthC, SegmentLengthB, SegmentLengthD) + 180, 0, 0)))


#-------------------------
#-- for feet i usually just match the base entity's angle
holoAng(5, Entity:angles())


#[

    #-- Turning it into an easily usable function
    
    function digi_ik(NHipA, NHipB, NKnee, NAnkle, NFoot, LengthA, LengthB, LengthC, Base:entity, Target:vector) {
        local AxisWorld = Target - holoEntity(NHipA):pos()
        local AxisLocal = Base:toLocalAxis(AxisWorld)
        
        holoAng(NHipA, Base:toWorld(ang(0, 0, atan(AxisLocal:z(), AxisLocal:y()) + 90)))
        
        local AxisLocal = holoEntity(NHipA):toLocalAxis(AxisWorld)
        local Fraction = 1 - min(1, holoEntity(NHipB):pos():distance(Target) / (LengthA + LengthC) - 0.5)
        
        holoAng(NHipB, holoEntity(NHipA):toWorld(ang(atan(-AxisLocal:x(), AxisLocal:z()) + 90*Fraction, 180, 0)))
        
        local AxisLocal = holoEntity(NHipA):toLocalAxis(Target - holoEntity(NKnee):pos())
        local Distance = min(AxisLocal:length(), LengthB + LengthC)
        
        holoAng(NKnee, holoEntity(NHipA):toWorld(ang(atan(AxisLocal:x(), AxisLocal:z()) + icos(Distance, LengthB, LengthC), 0, 0)))
        holoAng(NAnkle, holoEntity(NKnee):toWorld(ang(icos(LengthC, LengthB, Distance) + 180, 0, 0)))
        holoAng(NFoot, Base:angles())
    }

    digi_ik(1, 2, 3, 4, 5, SegmentLengthA, SegmentLengthB, SegmentLengthC, Entity, Target)

]#
