@name ik/insectoid/basic_three_seg
@inputs Target:vector
@outputs 
@persist [SegmentLengthA SegmentLengthB] Entity:entity
@trigger none

#-- by shadowscion

#-- i don't claim to be a math expert, nor am i a math teacher
#-- this is just a brief implementation of basic trig using holograms
#-- if something is unclear i suggest you read about trig based inverse kinematics and the law of cosines

#-- this is a basic example of three-segment inverse kinematics for use on insect-like creations
#-- this does not take into consideration things like the angles of the base entity, which means 
#-- it will not work when inverted or climbing steep inclines, and wont be suitable for humanoid configurations

if (first()) {
    
    #-- first we will configure the length of this leg
    SegmentLengthA = 75 #-- in this basic version the first and third segments both use this length
    SegmentLengthB = 50
    
    Entity = entity()
    
    #-- segment 1
    holoCreate(1)
    holoParent(1, Entity)
    holoModel(1, "sphere")
    holoDisableShading(1, 1)
    holoColor(1, vec4(255, 0, 0, 125))
    
    #-- segment 2
    holoCreate(2)
    holoParent(2, 1)
    holoPos(2, holoEntity(1):toWorld(vec(0, 0, SegmentLengthA))) #-- offset the second segment
    holoModel(2, "sphere")
    holoDisableShading(2, 1)
    holoColor(2, vec4(0, 0, 255, 125))
    
    #-- segment 3
    holoCreate(3)
    holoParent(3, 2)
    holoPos(3, holoEntity(2):toWorld(vec(0, 0, SegmentLengthB))) #-- offset the third segment
    holoModel(3, "sphere")
    holoDisableShading(3, 1)
    holoColor(3, vec4(255, 255, 0, 125))    
  
    #-- foot (not actually required, it just helps us visualize)
    holoCreate(4)
    holoParent(4, 3)
    holoPos(4, holoEntity(3):toWorld(vec(0, 0, SegmentLengthA))) #-- offset the foot
    holoModel(4, "sphere")
    holoDisableShading(4, 1)
    holoColor(4, vec4(255, 255, 0, 125))

    #-- this is our basic cosine-rule function, i'm not a math teacher so google it if you want to know how and why it does what it does
    function number icos(A, B, C) {
        return acos((A^2 + B^2 - C^2) / (2*A*B))    
    }
    
}

#-- setup
interval(60) #-- i have found 60ms to be a good balance between performance and cpu/ops


#-------------------------
#-- segment 1
local PosA = holoEntity(1):pos()

#-- this is our triangle's third length, the distance between the origin and the target
#-- it's the same as with the two-segment version, but here we subtract the middle length
local SegmentLengthC = min(PosA:distance(Target) - SegmentLengthB, SegmentLengthA + SegmentLengthA) #-- clamp this to the total leg length to prevent NaN errors

#local Dist = min(Hip:distance(Vec) - IK_L2, LEGL)
#-- this aims directly at the target position
local DefaultAngle = (Target - PosA):toAngle() + ang(0, 0, 0) 

#-- this uses cosine rule to figure out what angle we need to offset by given our triangle's information
#-- you might need to negate it and add/sub 90 degrees depending on how you constructed your leg earlier
local OffsetAngle = -icos(SegmentLengthC, SegmentLengthA, SegmentLengthA) + 90

#-- add the two angles
holoAng(1, DefaultAngle + ang(OffsetAngle, 0, 0))


#-------------------------
#-- segment 2
#-- this angle always matches the angle between the origin and the target
holoAng(2, holoEntity(1):toWorld(ang(-asin(SegmentLengthC / (SegmentLengthA + SegmentLengthA)) + 90, 0, 0)))


#-------------------------
#-- segment 3
holoAng(3, holoEntity(1):toWorld(ang(sign(SegmentLengthC) * -icos(SegmentLengthA, SegmentLengthA, SegmentLengthC) + 180, 0, 0)))

