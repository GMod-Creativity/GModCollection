@name exteel/exteel_skeleton_v4
@inputs Camera:wirelink [W A S D] [Shift Space] [Mouse1 Mouse2] [Active] [Entity]:entity
@outputs Ops Cpu
@persist [ANIM Animation]:table  PHYS:entity [Ct Dt Ts] DEBUG
@persist [GlobalZ GlobalY GlobalX GlobalV]:vector GlobalA:angle [L_AtoB L_BtoC L_CtoD L_DtoE]
@trigger none

#[
    An mech/robot animation template based on the action game "Exteel"
    by shadowscion

    To wire:
        - Spawn a SEAT
        - Spawn a WIRE POD CONTROLLER
        - Spawn a WIRE CAMERA CONTROLLER with the following options:
            - CHECK   "coordinates local to parent"
            - CHECK   "clientside movement"
            - UNCHECK "localized movement"

        - Link the pod and cam to the seat

        - With the wiring tool selected,HOLD ALT and LEFT CLICK on the E2
        - LEFT CLICK on the pod controller
        - HOLD ALT and LEFT CLICK again

        - Rewire the Camera:wirelink input to the camera controller entity

        - Reload the E2
]#

if (first()) {

    #-- SETTINGS
    DEBUG = 1

    function number icos(A,B,C) {
        return acos((A^2 + B^2 - C^2) / (2 * A * B))
    }
    function ik(A,B,C,D,E,Base:entity,IK:vector) {
        #--
        local H_A = holoEntity(A)
        local H_B = holoEntity(B)
        local H_C = holoEntity(C)
        local H_D = holoEntity(D)
        local H_E = holoEntity(E)

        #-- A
        local MoveDir = Base:toLocalAxis(IK - H_A:pos())
        local Dis = 1 - min(1,MoveDir:length() / (L_BtoC + L_CtoD + L_DtoE) - 0.5)
        local Ang = quat(MoveDir:toAngle():setRoll(-bearing(H_A:pos(),Base:angles(),IK))) * qRotation(vec(0,10 - Dis * 90,0))

        holoAng(A,Base:toWorld(Ang:toAngle()))

        #-- B
        local MoveDir = H_A:toLocalAxis(IK - H_B:pos())
        local Dis = 1 - min(1,MoveDir:length() / (L_CtoD + L_DtoE) - 0.5)

        holoAng(B,H_A:toWorld(ang(atan(MoveDir:x(),MoveDir:z()) - 60 + Dis * 45,0,0)))

        #-- C
        local MoveDir = H_B:toLocalAxis(IK - H_C:pos())
        local Dis = min(MoveDir:length(),L_CtoD + L_DtoE)

        holoAng(C,H_B:toWorld(ang(atan(MoveDir:x(),MoveDir:z()) - 90 + icos(Dis,L_CtoD,L_DtoE),0,0)))

        #-- D
        holoAng(D,H_C:toWorld(ang(icos(L_DtoE,L_CtoD,Dis) - 180,0,0)))
    }

    L_AtoB = 24
    L_BtoC = L_AtoB * 0.650
    L_CtoD = L_AtoB * 1.156
    L_DtoE = L_AtoB * 0.500
    L_Total = (L_AtoB + L_BtoC + L_CtoD + L_DtoE)

    local LegJointLength_A = (L_AtoB + L_BtoC) * 0.9
    local LegJointLength_B = (L_CtoD + L_DtoE) * 0.9
    local LegJointLength_T = LegJointLength_A + LegJointLength_B

    
    #[
        YOU CAN MESS AROUND WITH THESE,BUT THEY ARE SOMEWHAT TUNED
        THE MOVESPEEDS IN PARTICULAR I WOULD NOT CHANGE
    ]#

    ANIM = table(
        "Walk_PelvisZ"  = LegJointLength_T * 0.8,
        "Walk_StrideY"  = vec(0,L_AtoB * 0.425,0),
        "Walk_StrideX"  = LegJointLength_B * 0.75,
        "Walk_StrideZ"  = LegJointLength_B,
        "Walk_IdleSway" = 0.05,

        "Run_PelvisZ" = LegJointLength_T * 0.8,
        "Run_StrideY" = vec(0,L_AtoB * 0.225,0),

        "FrameLoop" = 0
    )

    ANIM["Walk_MoveSpeed",number] = 2 * _PI * ANIM["Walk_StrideX",number]
    ANIM["Run_MoveSpeed",number] = 2 * _PI * ANIM["Run_PelvisZ",number]


    #[
        I SUGGEST NOT EDITING
        BELOW THIS COMMENT UNLESS
        YOU KNOW WHAT YOU'RE DOING
    ]#

    function entity holoCreate(N,P,Pos:vector,Ang:angle,Scale:vector,Model:string,Material:string,Color:vector4,Shading) {
        holoCreate(N)

        local Parent = holoEntity(P)
        if (Parent) { holoParent(N,P) } else { Parent = entity() }

        holoPos(N,Parent:toWorld(Pos))
        holoAng(N,Parent:toWorld(Ang))
        holoScale(N,Scale)
        holoModel(N,Model)
        holoMaterial(N,Material)
        holoColor(N,Color)
        holoDisableShading(N,Shading)

        return holoEntity(N)
    }

    #-- PHYS SETUP
    #-- most are variables stored on the entity,to share and interact with other expression2s
    PHYS_Setup = table(
        "EnableAirStrafe" = 1,
        "JumpHeight"      = 100,
        "BBoxRadius"      = 10,
        "BBoxHeightReal"  = ANIM["Walk_PelvisZ",number],
        "CamDistance"     = 100,
        "CamOffset"       = vec()
    )

    PHYS = holoCreate(98765,0,vec(0,0,PHYS_Setup["BBoxHeightReal",number]),ang(),vec(DEBUG*12) / 12,"","",vec4(0,255,0,55),1)

    PHYS["EnableAirStrafe",number] = PHYS_Setup["EnableAirStrafe",number]
    PHYS["WalkSpeed",number] = PHYS_Setup["WalkSpeed",number]
    PHYS["RunSpeed",number] = PHYS_Setup["RunSpeed",number]
    PHYS["JumpHeight",number] = PHYS_Setup["JumpHeight",number]
    PHYS["BBoxRadius",number] = PHYS_Setup["BBoxRadius",number]
    PHYS["BBoxHeightReal",number] = PHYS_Setup["BBoxHeightReal",number]

    PHYS["BBoxHeight",number] = PHYS["BBoxHeightReal",number] * 0.5
    PHYS["BBoxMins",vector] = vec(PHYS["BBoxRadius",number],PHYS["BBoxRadius",number],PHYS["BBoxHeight",number]) *  -1
    PHYS["BBoxMaxs",vector] = vec(PHYS["BBoxRadius",number],PHYS["BBoxRadius",number],0)
    PHYS["Position",vector] = PHYS:pos()
    PHYS["Velocity",vector] = vec()
    PHYS["E2",entity] = entity()

    if (DEBUG) {
        holoCreate(98769,98765,vec(0,0,0),ang(),vec(12,12,12) / 12,"models/sprops/misc/origin.mdl","",vec4(255,255,255,255),1)
       # holoCreate(98770,98765,vec(0,0,0),ang(),vec(6) / 12,"","",vec4(0,255,255,255),1)
       # holoCreate(98771,98765,vec(0,0,0),ang(),vec(6) / 12,"","",vec4(0,255,255,255),1)
        
        holoUnparent(98769)
    }
    

    local Col = vec4(189,195,199,255)
    holoCreate(2,98769,vec(0,L_AtoB * 0.325,0),ang(),vec(6) / 12,"","",Col,0)
    holoCreate(3,2,vec(L_AtoB,0,0),ang(),vec(5) / 12,"","",Col,0)
    holoCreate(4,3,vec(L_BtoC,0,0),ang(),vec(4) / 12,"","",Col,0)
    holoCreate(5,4,vec(L_CtoD,0,0),ang(),vec(3) / 12,"","",Col,0)
    holoCreate(6,5,vec(L_DtoE,0,0),ang(),vec(3) / 12,"","",Col,0)

    for (I = 1,4) {
        local N = 600 + I
        local L = select(I,L_AtoB,L_BtoC,L_CtoD,L_DtoE)
        holoCreate(N,1 + I,vec(L * 0.5,0,0),ang(),vec(L,5 - I,5 - I) / 12,"","",vec4(41,128,185,255),0)
    }

    local Col = vec4(189,195,199,255)
    holoCreate(7,98769,vec(0,-L_AtoB * 0.325,0),ang(),vec(6) / 12,"","",Col,0)
    holoCreate(8,7,vec(L_AtoB,0,0),ang(),vec(5) / 12,"","",Col,0)
    holoCreate(9,8,vec(L_BtoC,0,0),ang(),vec(4) / 12,"","",Col,0)
    holoCreate(10,9,vec(L_CtoD,0,0),ang(),vec(3) / 12,"","",Col,0)
    holoCreate(11,10,vec(L_DtoE,0,0),ang(),vec(3) / 12,"","",Col,0)

    for (I = 1,4) {
        local N = 700 + I
        local L = select(I,L_AtoB,L_BtoC,L_CtoD,L_DtoE)
        holoCreate(N,6 + I,vec(L * 0.5,0,0),ang(),vec(L,5 - I,5 - I) / 12,"","",vec4(192,57,43,255),0)
    }
    
    Camera["Parent",entity] = PHYS #holoEntity(98769)
    Camera["Distance",number] = PHYS_Setup["CamDistance",number]
    Camera["Position",vector] = PHYS_Setup["CamOffset",vector]

    Ct = curtime()

    GlobalZ = vec(0,0,1)
    GlobalY = vec(0,1,0)
    GlobalX = vec(1,0,0)
    GlobalV = vec()
    GlobalA = ang()

    interval(90)


    #-- ANIMATIONS
    function number linear(Y0,Y1,T) {
        return (1 - T) * Y0 + Y1 * T
    }
    function number cosine(Y0,Y1,T) {
        local T = (1 - cosr(T * _PI)) * 0.5
        return (1 - T) * Y0 + Y1 * T
    }
    function table blend(Blend0:table,Blend1:table,T) {
        if     (T == 0) { return Blend0 }
        elseif (T == 1) { return Blend1 }
        else {
            local T = cosine(0,1,T)
            local Blend2 = table()

            foreach (K,V:quaternion = Blend0) {
                Blend2[K,quaternion] = slerp(V,Blend1[K,quaternion],T)
            }
            foreach (K,V:vector = Blend0) {
                Blend2[K,vector] = mix(Blend1[K,vector],V,T)
            }
            foreach (K,V:number = Blend0) {
                Blend2[K,number] = (1 - T) * V + Blend1[K,number] * T
            }

            return Blend2
        }
    }
    function table blendByName(Blend0:string,Blend1:string,T) {
        if     (T == 0) { return Blend0()[table] }
        elseif (T == 1) { return Blend1()[table] }
        else {
            return blend(Blend0()[table],Blend1()[table],T)
        }
    }

    function table anim__JUMP_LOOP()  {
        local FootTrace_L = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld(ANIM["Walk_StrideY",vector]:setX(ANIM["Walk_StrideX",number] * 0.5)),-GlobalZ)
        local FootTrace_R = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld((-ANIM["Walk_StrideY",vector]):setX(-ANIM["Walk_StrideX",number] * 0.5)),-GlobalZ)

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,cos(PHYS["FrameLoop",number] * 0.5) * ANIM["Walk_IdleSway",number],sin(PHYS["FrameLoop",number]) * ANIM["Walk_IdleSway",number])),
            "q_pelvis_ang" = quat(PHYS:toWorld(GlobalA)),
            "v_foot_l_pos" = FootTrace_L:position(),
            "v_foot_r_pos" = FootTrace_R:position(),
            "n_movespeed" = 0,
            "n_framerate" = 1
        )
    }

    function table anim__WALK_IDLE() {
        local FootTrace_L = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld(ANIM["Walk_StrideY",vector]:setX(ANIM["Walk_StrideX",number] * 0.5)),-GlobalZ)
        local FootTrace_R = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld((-ANIM["Walk_StrideY",vector]):setX(-ANIM["Walk_StrideX",number] * 0.5)),-GlobalZ)

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,cos(PHYS["FrameLoop",number] * 0.5) * ANIM["Walk_IdleSway",number],sin(PHYS["FrameLoop",number]) * ANIM["Walk_IdleSway",number])),
            "q_pelvis_ang" = quat(PHYS:toWorld(GlobalA)),
            "v_foot_l_pos" = FootTrace_L:position(),
            "v_foot_r_pos" = FootTrace_R:position(),
            "n_movespeed" = 0,
            "n_framerate" = 1
        )
    }
    function table anim__WALK_F() {
        local Sin = sin(90 + PHYS["FrameLoop",number]) * ANIM["Walk_StrideZ",number]
        local Cos = cos(90 + PHYS["FrameLoop",number]) * ANIM["Walk_StrideX",number]

        local FootTrace_L = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld(ANIM["Walk_StrideY",vector]:setX(Cos)),-GlobalZ)
        local FootTrace_R = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld((-ANIM["Walk_StrideY",vector]):setX(-Cos)),-GlobalZ)

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,0,abs(Sin) * 0.25)),
            "q_pelvis_ang" = quat(PHYS:toWorld(ang(7 + abs(Cos),Cos,0))),
            "v_foot_l_pos" = FootTrace_L:position() + max(0,-Sin) * (FootTrace_L:hitNormal() ?: GlobalZ),
            "v_foot_r_pos" = FootTrace_R:position() + max(0,Sin) * (FootTrace_R:hitNormal() ?: GlobalZ),
            "n_movespeed" = ANIM["Walk_MoveSpeed",number],
            "n_framerate" = _PHI^2 * 0.45
        )
    }
    function table anim__WALK_B() {
        local Sin = sin(270 + PHYS["FrameLoop",number]) * ANIM["Walk_StrideZ",number]
        local Cos = cos(270 + PHYS["FrameLoop",number]) * ANIM["Walk_StrideX",number]

        local FootTrace_L = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld(ANIM["Walk_StrideY",vector]:setX(Cos)),-GlobalZ)
        local FootTrace_R = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld((-ANIM["Walk_StrideY",vector]):setX(-Cos)),-GlobalZ)

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,0,abs(Sin) * 0.25)),
            "q_pelvis_ang" = quat(PHYS:toWorld(ang(-7 - abs(Cos),Cos,0))),
            "v_foot_l_pos" = FootTrace_L:position() + max(0,Sin) * (FootTrace_L:hitNormal() ?: GlobalZ),
            "v_foot_r_pos" = FootTrace_R:position() + max(0,-Sin) * (FootTrace_R:hitNormal() ?: GlobalZ),
            "n_movespeed" = ANIM["Walk_MoveSpeed",number],
            "n_framerate" = _PHI^2 * 0.45
        )
    }
    function table anim__WALK_L() {
        local Sin = sin(90 + PHYS["FrameLoop",number]) * ANIM["Walk_StrideZ",number]
        local Cos = cos(90 + PHYS["FrameLoop",number]) * ANIM["Walk_StrideX",number]

        local FootTrace_L = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld(vec(-ANIM["Walk_StrideY",vector]:y(),ANIM["Walk_StrideY",vector]:y() + Cos,0)),-GlobalZ)
        local FootTrace_R = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld(vec(ANIM["Walk_StrideY",vector]:y(),-ANIM["Walk_StrideY",vector]:y() - Cos,0)),-GlobalZ)

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,0,abs(Sin) * 0.25)),
            "q_pelvis_ang" = quat(PHYS:toWorld(ang(0,Cos,-7 - abs(Cos)))),
            "v_foot_l_pos" = FootTrace_L:position() + max(0,-Sin) * (FootTrace_L:hitNormal() ?: GlobalZ),
            "v_foot_r_pos" = FootTrace_R:position() + max(0,Sin) * (FootTrace_R:hitNormal() ?: GlobalZ),
            "n_movespeed" = ANIM["Walk_MoveSpeed",number],
            "n_framerate" = _PHI^2 * 0.45
        )
    }
    function table anim__WALK_R() {
        local Sin = sin(270 + PHYS["FrameLoop",number]) * ANIM["Walk_StrideZ",number]
        local Cos = cos(270 + PHYS["FrameLoop",number]) * ANIM["Walk_StrideX",number]

        local FootTrace_L = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld(vec(ANIM["Walk_StrideY",vector]:y(),ANIM["Walk_StrideY",vector]:y() + Cos,0)),-GlobalZ)
        local FootTrace_R = rangerOffset(ANIM["Walk_PelvisZ",number],PHYS:toWorld(vec(-ANIM["Walk_StrideY",vector]:y(),-ANIM["Walk_StrideY",vector]:y() - Cos,0)),-GlobalZ)

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,0,abs(Sin) * 0.25)),
            "q_pelvis_ang" = quat(PHYS:toWorld(ang(0,Cos,7 + abs(Cos)))),
            "v_foot_l_pos" = FootTrace_L:position() + max(0,Sin) * (FootTrace_L:hitNormal() ?: GlobalZ),
            "v_foot_r_pos" = FootTrace_R:position() + max(0,-Sin) * (FootTrace_R:hitNormal() ?: GlobalZ),
            "n_movespeed" = ANIM["Walk_MoveSpeed",number],
            "n_framerate" = _PHI^2 * 0.45
        )
    }

    function table anim__RUN_F() {
        local Sin = sin(90 + PHYS["FrameLoop",number])
        local Cos = cos(90 + PHYS["FrameLoop",number])
        local FootTrace_L = -rangerOffset(ANIM["Run_PelvisZ",number],PHYS:toWorld(ANIM["Run_StrideY",vector]),-GlobalZ):distance() * GlobalZ * 0.5
        local FootTrace_R = -rangerOffset(ANIM["Run_PelvisZ",number],PHYS:toWorld(-ANIM["Run_StrideY",vector]),-GlobalZ):distance() * GlobalZ * 0.5

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,Sin * ANIM["Run_StrideY",vector]:y(),abs(cos(90 + PHYS["FrameLoop",number])) * ANIM["Run_PelvisZ",number] * 0.25):rotate(30,0,0)),
            "q_pelvis_ang" = quat(PHYS:toWorld(ang(20 + abs(Cos) * 5,-Cos * 15,0))),
            "v_foot_l_pos" = PHYS:toWorld(FootTrace_L:rotate(-Cos * 60,0,0) + FootTrace_L:rotate(-(Cos + Sin) * 60 + 60,0,0) + ANIM["Run_StrideY",vector]),
            "v_foot_r_pos" = PHYS:toWorld(FootTrace_R:rotate(Cos * 60,0,0) + FootTrace_R:rotate((Cos + Sin) * 60 + 60,0,0) - ANIM["Run_StrideY",vector]),
            "n_movespeed" = ANIM["Run_MoveSpeed",number],
            "n_framerate" = _PHI^2 * 0.45
        )
    }
    function table anim__RUN_B() {
        local Sin = sin(270 + PHYS["FrameLoop",number])
        local Cos = cos(270 + PHYS["FrameLoop",number])

        local FootTrace_L = -rangerOffset(ANIM["Run_PelvisZ",number],PHYS:toWorld(ANIM["Run_StrideY",vector]),-GlobalZ):distance() * GlobalZ * 0.5
        local FootTrace_R = -rangerOffset(ANIM["Run_PelvisZ",number],PHYS:toWorld(-ANIM["Run_StrideY",vector]),-GlobalZ):distance() * GlobalZ * 0.5

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,-Sin * ANIM["Run_StrideY",vector]:y() * 0.5,cos(270 + PHYS["FrameLoop",number] * 2) * ANIM["Run_PelvisZ",number] * 0.1):rotate(-30,0,0)),
            "q_pelvis_ang" = quat(PHYS:toWorld(ang(-10 - abs(Cos) * 5,-Cos * 15,0))),
            "v_foot_l_pos" = PHYS:toWorld(FootTrace_L:rotate(-Cos * 60,0,0) + FootTrace_L:rotate(-(Cos / 2 + Sin) * 60 - 60,0,0) + ANIM["Run_StrideY",vector]),
            "v_foot_r_pos" = PHYS:toWorld(FootTrace_R:rotate(Cos * 60,0,0) + FootTrace_R:rotate((Cos / 2 + Sin) * 60 - 60,0,0) - ANIM["Run_StrideY",vector]),
            "n_movespeed" = ANIM["Run_MoveSpeed",number],
            "n_framerate" = _PHI^2 * 0.45
        )
    }
    function table anim__RUN_L() {
        local Sin = sin(90 + PHYS["FrameLoop",number])
        local Cos = cos(90 + PHYS["FrameLoop",number])

        local Rotate = ANIM["Run_StrideY",vector]:rotate(0,90,0)
        local FootTrace_L = -rangerOffset(ANIM["Run_PelvisZ",number],PHYS:toWorld(Rotate),-GlobalZ):distance() * GlobalZ * 0.5
        local FootTrace_R = -rangerOffset(ANIM["Run_PelvisZ",number],PHYS:toWorld(-Rotate),-GlobalZ):distance() * GlobalZ * 0.5

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,-Sin * ANIM["Run_StrideY",vector]:y() * 0.5,abs(cos(90 + PHYS["FrameLoop",number])) * ANIM["Run_PelvisZ",number] * 0.25)),
            "q_pelvis_ang" = quat(PHYS:toWorld(ang(0,-Cos * 15 + 70,-20 - abs(Cos) * 5))),
            "v_foot_l_pos" = PHYS:toWorld(FootTrace_L:rotate(-Cos * 60,90,0) + FootTrace_L:rotate(-(Cos + Sin) * 60 + 60,90,0) + Rotate + ANIM["Run_StrideY",vector]),
            "v_foot_r_pos" = PHYS:toWorld(FootTrace_R:rotate(Cos * 60,90,0) + FootTrace_R:rotate((Cos + Sin) * 60 + 60,90,0) - Rotate - ANIM["Run_StrideY",vector]),
            "n_movespeed" = ANIM["Run_MoveSpeed",number],
            "n_framerate" = _PHI^2 * 0.45
        )
    }
    function table anim__RUN_R() {
        local Sin = sin(90 + PHYS["FrameLoop",number])
        local Cos = cos(90 + PHYS["FrameLoop",number])

        local Rotate = ANIM["Run_StrideY",vector]:rotate(0,-90,0)
        local FootTrace_L = -rangerOffset(ANIM["Run_PelvisZ",number],PHYS:toWorld(Rotate),-GlobalZ):distance() * GlobalZ * 0.5
        local FootTrace_R = -rangerOffset(ANIM["Run_PelvisZ",number],PHYS:toWorld(-Rotate),-GlobalZ):distance() * GlobalZ * 0.5

        return table(
            "v_pelvis_pos" = PHYS:toWorld(vec(0,-Sin * ANIM["Run_StrideY",vector]:y() * 0.5,abs(cos(90 + PHYS["FrameLoop",number])) * ANIM["Run_PelvisZ",number] * 0.25)),
            "q_pelvis_ang" = quat(PHYS:toWorld(ang(0,-Cos * 15 - 70,20 + abs(Cos) * 5))),
            "v_foot_l_pos" = PHYS:toWorld(FootTrace_L:rotate(-Cos * 60,-90,0) + FootTrace_L:rotate(-(Cos + Sin) * 60 + 60,-90,0) + Rotate + ANIM["Run_StrideY",vector]),
            "v_foot_r_pos" = PHYS:toWorld(FootTrace_R:rotate(Cos * 60,-90,0) + FootTrace_R:rotate((Cos + Sin) * 60 + 60,-90,0) - Rotate - ANIM["Run_StrideY",vector]),
            "n_movespeed" = ANIM["Run_MoveSpeed",number],
            "n_framerate" = _PHI^2 * 0.45
        )
    }

    function table blendMovementByDirection(Type:string,Direction) {
        local Direction = angnorm(Direction)
        if (Direction == 0) {
            return (Type + "F")()[table]
        }
        elseif (Direction == 90) {
            return (Type + "L")()[table]
        }
        elseif (Direction == -90) {
            return (Type + "R")()[table]
        }
        elseif (Direction == 180 | Direction == -180) {
            return (Type + "B")()[table]
        }
        elseif (inrange(Direction,0,90)) {
            return blendByName(Type + "F",Type + "L",abs(Direction / 90))
        }
        elseif (inrange(Direction,-90,0)) {
            return blendByName(Type + "F",Type + "R",abs(Direction / 90))
        }
        elseif (inrange(Direction,90,180)) {
            return blendByName(Type + "L",Type + "B",abs(Direction / 90) - 1)
        }
        elseif (inrange(Direction,-180,-90)) {
            return blendByName(Type + "R",Type + "B",abs(Direction / 90) - 1)
        }
        else {
            return table()
        }
    }
    function table blendspaceNormalMotion() {
        if (PHYS["ANIMSTATE_Speed",number] == 0) {
            return anim__WALK_IDLE()
        }
        elseif (PHYS["ANIMSTATE_Speed",number] <= 0.5) {
            if (PHYS["ANIMSTATE_Speed",number] == 0.5) {
                return blendMovementByDirection("anim__WALK_",PHYS["ANIMSTATE_Direction",number])
            }
            else {
                return blend(anim__WALK_IDLE(),blendMovementByDirection("anim__WALK_",PHYS["ANIMSTATE_Direction",number]),PHYS["ANIMSTATE_Speed",number] * 2)
            }
        }
        else {
            if (PHYS["ANIMSTATE_Speed",number] == 1) {
                return blendMovementByDirection("anim__RUN_",PHYS["ANIMSTATE_Direction",number])
            }
            else {
                return blend(blendMovementByDirection("anim__WALK_",PHYS["ANIMSTATE_Direction",number]),blendMovementByDirection("anim__RUN_",PHYS["ANIMSTATE_Direction",number]),PHYS["ANIMSTATE_Speed",number] * 2 - 1)
            }
        }
    }
}

if (clk()) {

    #-- e2 execution
    interval(90)

    Ts = 1                    #-- timescale
    Dt = (curtime() - Ct) * Ts  #-- delta time
    Ct = curtime()

    if (Active) {
        #-- enable camera
        Camera["Activated",number] = 1


        #-- player setup
        PHYS["Player",entity] = Entity:driver()
        PHYS["EyeDir",vector] = Entity:toLocalAxis(PHYS["Player",entity]:eye()):setZ(0)


        #-- movement input
        local ShouldMove = 0
        if (S) { ShouldMove = A | D | S }
        else { ShouldMove = (W | A | D) * 2 }

        PHYS["ANIMSTATE_Speed",number] = PHYS["ANIMSTATE_Speed",number] + clamp(ShouldMove * 0.5 - PHYS["ANIMSTATE_Speed",number],-Dt*0.5,Dt*0.5)

        if (W | S) {
            PHYS["MoveDir",vector] = (W - S) * PHYS["EyeDir",vector]
        }
        if (A | D) {
            PHYS["MoveDir",vector] = PHYS["MoveDir",vector] + PHYS["EyeDir",vector]:cross(GlobalZ) * ((D - A) * 1.25)
        }
        PHYS["MoveDir",vector] = PHYS["MoveDir",vector]:normalized()

        if (PHYS["ANIMSTATE_Speed",number]) {
            PHYS["Angle",angle] = PHYS["EyeDir",vector]:toAngle()
        }

        PHYS["ANIMSTATE_Direction",number] = atan(PHYS["MoveDir",vector][2],PHYS["MoveDir",vector][1]) - atan(PHYS["EyeDir",vector][2],PHYS["EyeDir",vector][1])

        local Speed = (Animation["n_movespeed",number] * Animation["n_framerate",number]) * Dt
        local Gravity = 600 * Dt * Dt * -1


        #-- jump input
        if (PHYS["EnableAirStrafe",number]) {
            if (!PHYS["HitGround",number]) {
                local AirDir = PHYS["EyeDir",vector]:cross(vec(0,0,1)) * (D - A)
                      AirDir = AirDir:normalized()

                local DotVel = PHYS["Velocity",vector]:setZ(0):dot(AirDir)
                local AirVel = 100 * Dt

                if (DotVel + AirVel > PHYS["JumpSpeed",number]) {
                    AirVel = PHYS["JumpSpeed",number] - DotVel
                }

                PHYS["Velocity",vector] = PHYS["Velocity",vector] + AirDir:setZ(0) * AirVel
            }
        }
        if (PHYS["HitGround",number]) {
            PHYS["Velocity",vector] = (PHYS["MoveDir",vector] * Speed):setZ(Space * sqrt(2 * abs(Gravity) * PHYS["JumpHeight",number]))
            if (PHYS["Velocity",vector][3]) {
                PHYS["JumpSpeed",number] = PHYS["Velocity",vector]:setZ(0):length()
                PHYS["HitGround",number] = 0
            }
        }
        else {
            PHYS["Velocity",vector] = PHYS["Velocity",vector] + vec(0,0,Gravity)
        }


        #-- XY-axis velocity handler
        PHYS["HitBBox",number] = 0

        local Ranger = rangerOffsetHull(PHYS["Position",vector],PHYS["Position",vector] + PHYS["Velocity",vector],PHYS["BBoxMins",vector],PHYS["BBoxMaxs",vector])
        if (Ranger:hit()) {
            #-- resolve collisions
            local TargetPos = PHYS["Position",vector] + PHYS["Velocity",vector]
            local RangerPos = Ranger:position()
            local RangerNormal = Ranger:hitNormal():setZ(0) * 1.05

            Ranger = rangerOffsetHull(RangerPos,TargetPos - RangerNormal * (TargetPos - RangerPos):dot(RangerNormal),PHYS["BBoxMins",vector],PHYS["BBoxMaxs",vector])

            #-- set new velocity
            PHYS["Velocity",vector] = (Ranger:position() - PHYS["Position",vector]):setZ(PHYS["Velocity",vector][3])

            PHYS["HitBBox",number] = 1
        }


        #-- Z-axis velocity handler
        #-- vertical movement
        local Normal = sign(PHYS["Velocity",vector]:z()) ?: -1
        local Ranger = rangerOffset(999999999,PHYS["Position",vector] + PHYS["Velocity",vector]:setZ(0),vec(0,0,Normal))

        #-- stick to downward slopes
        if (PHYS["HitGround",number]) {
            local GDot = PHYS["Velocity",vector]:normalized():setZ(0):dot(Ranger:hitNormal())
            if (GDot > 0) {
                PHYS["Position",vector][3] = Ranger:position():z() + PHYS["BBoxHeightReal",number]
                PHYS["Velocity",vector][3] = 0
                PHYS["HitGround",number] = 2
            }
        }

        #-- downward movement
        if (Normal == -1) {
            local Ground = Ranger:position():z() + PHYS["BBoxHeightReal",number]

            PHYS["Position",vector][3] = max(PHYS["Position",vector][3] + PHYS["Velocity",vector][3],Ground)
            if (PHYS["Position",vector][3] <= Ground) {
                PHYS["Position",vector][3] = Ground
                PHYS["Velocity",vector][3] = 0
                PHYS["HitGround",number] = 1
            }
            else {
                PHYS["HitGround",number] = 0
            }
        }

        #-- upward movement
        else {
            local Ceiling = Ranger:position():z() - PHYS["Velocity",vector][3]

            PHYS["Position",vector][3] = min(PHYS["Position",vector][3],Ceiling)
            if (PHYS["Position",vector][3] >= Ceiling) {
                PHYS["Position",vector][3] = Ceiling
                PHYS["Velocity",vector][3] = Gravity
                PHYS["HitCeiling",number] = 1
            }
            else {
                PHYS["HitCeiling",number] = 0
            }
        }

        PHYS["Position",vector] = PHYS["Position",vector] + PHYS["Velocity",vector]
        PHYS["FrameLoop",number] = PHYS["FrameLoop",number] + Animation["n_framerate",number] * 360 * Dt

        if (PHYS["HitGround",number]) {
            Animation = blendspaceNormalMotion()
        }
        else {
            Animation = anim__JUMP_LOOP()
        }


        #-- debug
        holoPos(98765,PHYS["Position",vector])
        holoAng(98765,PHYS["Angle",angle])

        if (DEBUG) {
            holoPos(98769,Animation["v_pelvis_pos",vector])
            holoAng(98769,Animation["q_pelvis_ang",quaternion]:toAngle())
            #holoPos(98770,Animation["v_foot_l_pos",vector])
            #holoPos(98771,Animation["v_foot_r_pos",vector])
        }
        
        ik(2,3,4,5,6,holoEntity(98769),Animation["v_foot_l_pos",vector])
        ik(7,8,9,10,11,holoEntity(98769),Animation["v_foot_r_pos",vector])

    }
    else {
        Camera["Activated",number] = 0
    }

    Ops = ops()
    Cpu = cpuUsage()*1000000
}
